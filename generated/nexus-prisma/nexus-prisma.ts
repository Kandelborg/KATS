/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Post: PostObject
      User: UserObject
      Profile: ProfileObject
      Avatar: AvatarObject
      Project: ProjectObject
      ProjectCategory: ProjectCategoryObject
      ProjectCategoryContent: ProjectCategoryContentObject
      ProjectCategoryLng: ProjectCategoryLngObject
      ProjectAlbum: ProjectAlbumObject
      ProjectImage: ProjectImageObject
      ProjectImageContent: ProjectImageContentObject
      ProjectImageLng: ProjectImageLngObject
      ProjectContent: ProjectContentObject
      ProjectLng: ProjectLngObject
      ProjectTag: ProjectTagObject
      ProjectTagLng: ProjectTagLngObject
      ProjectTagContent: ProjectTagContentObject
      Comment: CommentObject
      PostContent: PostContentObject
      PostLng: PostLngObject
      PostTag: PostTagObject
      PostTagLng: PostTagLngObject
      PostTagContent: PostTagContentObject
      PostConnection: PostConnectionObject
      PageInfo: PageInfoObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      PostContentConnection: PostContentConnectionObject
      PostContentEdge: PostContentEdgeObject
      AggregatePostContent: AggregatePostContentObject
      PostLngConnection: PostLngConnectionObject
      PostLngEdge: PostLngEdgeObject
      AggregatePostLng: AggregatePostLngObject
      CommentConnection: CommentConnectionObject
      CommentEdge: CommentEdgeObject
      AggregateComment: AggregateCommentObject
      PostTagConnection: PostTagConnectionObject
      PostTagEdge: PostTagEdgeObject
      AggregatePostTag: AggregatePostTagObject
      PostTagContentConnection: PostTagContentConnectionObject
      PostTagContentEdge: PostTagContentEdgeObject
      AggregatePostTagContent: AggregatePostTagContentObject
      PostTagLngConnection: PostTagLngConnectionObject
      PostTagLngEdge: PostTagLngEdgeObject
      AggregatePostTagLng: AggregatePostTagLngObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ProfileConnection: ProfileConnectionObject
      ProfileEdge: ProfileEdgeObject
      AggregateProfile: AggregateProfileObject
      AvatarConnection: AvatarConnectionObject
      AvatarEdge: AvatarEdgeObject
      AggregateAvatar: AggregateAvatarObject
      ProjectConnection: ProjectConnectionObject
      ProjectEdge: ProjectEdgeObject
      AggregateProject: AggregateProjectObject
      ProjectContentConnection: ProjectContentConnectionObject
      ProjectContentEdge: ProjectContentEdgeObject
      AggregateProjectContent: AggregateProjectContentObject
      ProjectLngConnection: ProjectLngConnectionObject
      ProjectLngEdge: ProjectLngEdgeObject
      AggregateProjectLng: AggregateProjectLngObject
      ProjectTagConnection: ProjectTagConnectionObject
      ProjectTagEdge: ProjectTagEdgeObject
      AggregateProjectTag: AggregateProjectTagObject
      ProjectTagContentConnection: ProjectTagContentConnectionObject
      ProjectTagContentEdge: ProjectTagContentEdgeObject
      AggregateProjectTagContent: AggregateProjectTagContentObject
      ProjectTagLngConnection: ProjectTagLngConnectionObject
      ProjectTagLngEdge: ProjectTagLngEdgeObject
      AggregateProjectTagLng: AggregateProjectTagLngObject
      ProjectCategoryConnection: ProjectCategoryConnectionObject
      ProjectCategoryEdge: ProjectCategoryEdgeObject
      AggregateProjectCategory: AggregateProjectCategoryObject
      ProjectCategoryContentConnection: ProjectCategoryContentConnectionObject
      ProjectCategoryContentEdge: ProjectCategoryContentEdgeObject
      AggregateProjectCategoryContent: AggregateProjectCategoryContentObject
      ProjectCategoryLngConnection: ProjectCategoryLngConnectionObject
      ProjectCategoryLngEdge: ProjectCategoryLngEdgeObject
      AggregateProjectCategoryLng: AggregateProjectCategoryLngObject
      ProjectAlbumConnection: ProjectAlbumConnectionObject
      ProjectAlbumEdge: ProjectAlbumEdgeObject
      AggregateProjectAlbum: AggregateProjectAlbumObject
      ProjectImageConnection: ProjectImageConnectionObject
      ProjectImageEdge: ProjectImageEdgeObject
      AggregateProjectImage: AggregateProjectImageObject
      ProjectImageContentConnection: ProjectImageContentConnectionObject
      ProjectImageContentEdge: ProjectImageContentEdgeObject
      AggregateProjectImageContent: AggregateProjectImageContentObject
      ProjectImageLngConnection: ProjectImageLngConnectionObject
      ProjectImageLngEdge: ProjectImageLngEdgeObject
      AggregateProjectImageLng: AggregateProjectImageLngObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      PostContentSubscriptionPayload: PostContentSubscriptionPayloadObject
      PostContentPreviousValues: PostContentPreviousValuesObject
      PostLngSubscriptionPayload: PostLngSubscriptionPayloadObject
      PostLngPreviousValues: PostLngPreviousValuesObject
      CommentSubscriptionPayload: CommentSubscriptionPayloadObject
      CommentPreviousValues: CommentPreviousValuesObject
      PostTagSubscriptionPayload: PostTagSubscriptionPayloadObject
      PostTagPreviousValues: PostTagPreviousValuesObject
      PostTagContentSubscriptionPayload: PostTagContentSubscriptionPayloadObject
      PostTagContentPreviousValues: PostTagContentPreviousValuesObject
      PostTagLngSubscriptionPayload: PostTagLngSubscriptionPayloadObject
      PostTagLngPreviousValues: PostTagLngPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ProfileSubscriptionPayload: ProfileSubscriptionPayloadObject
      ProfilePreviousValues: ProfilePreviousValuesObject
      AvatarSubscriptionPayload: AvatarSubscriptionPayloadObject
      AvatarPreviousValues: AvatarPreviousValuesObject
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadObject
      ProjectPreviousValues: ProjectPreviousValuesObject
      ProjectContentSubscriptionPayload: ProjectContentSubscriptionPayloadObject
      ProjectContentPreviousValues: ProjectContentPreviousValuesObject
      ProjectLngSubscriptionPayload: ProjectLngSubscriptionPayloadObject
      ProjectLngPreviousValues: ProjectLngPreviousValuesObject
      ProjectTagSubscriptionPayload: ProjectTagSubscriptionPayloadObject
      ProjectTagPreviousValues: ProjectTagPreviousValuesObject
      ProjectTagContentSubscriptionPayload: ProjectTagContentSubscriptionPayloadObject
      ProjectTagContentPreviousValues: ProjectTagContentPreviousValuesObject
      ProjectTagLngSubscriptionPayload: ProjectTagLngSubscriptionPayloadObject
      ProjectTagLngPreviousValues: ProjectTagLngPreviousValuesObject
      ProjectCategorySubscriptionPayload: ProjectCategorySubscriptionPayloadObject
      ProjectCategoryPreviousValues: ProjectCategoryPreviousValuesObject
      ProjectCategoryContentSubscriptionPayload: ProjectCategoryContentSubscriptionPayloadObject
      ProjectCategoryContentPreviousValues: ProjectCategoryContentPreviousValuesObject
      ProjectCategoryLngSubscriptionPayload: ProjectCategoryLngSubscriptionPayloadObject
      ProjectCategoryLngPreviousValues: ProjectCategoryLngPreviousValuesObject
      ProjectAlbumSubscriptionPayload: ProjectAlbumSubscriptionPayloadObject
      ProjectAlbumPreviousValues: ProjectAlbumPreviousValuesObject
      ProjectImageSubscriptionPayload: ProjectImageSubscriptionPayloadObject
      ProjectImagePreviousValues: ProjectImagePreviousValuesObject
      ProjectImageContentSubscriptionPayload: ProjectImageContentSubscriptionPayloadObject
      ProjectImageContentPreviousValues: ProjectImageContentPreviousValuesObject
      ProjectImageLngSubscriptionPayload: ProjectImageLngSubscriptionPayloadObject
      ProjectImageLngPreviousValues: ProjectImageLngPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Post: PostFieldDetails
      User: UserFieldDetails
      Profile: ProfileFieldDetails
      Avatar: AvatarFieldDetails
      Project: ProjectFieldDetails
      ProjectCategory: ProjectCategoryFieldDetails
      ProjectCategoryContent: ProjectCategoryContentFieldDetails
      ProjectCategoryLng: ProjectCategoryLngFieldDetails
      ProjectAlbum: ProjectAlbumFieldDetails
      ProjectImage: ProjectImageFieldDetails
      ProjectImageContent: ProjectImageContentFieldDetails
      ProjectImageLng: ProjectImageLngFieldDetails
      ProjectContent: ProjectContentFieldDetails
      ProjectLng: ProjectLngFieldDetails
      ProjectTag: ProjectTagFieldDetails
      ProjectTagLng: ProjectTagLngFieldDetails
      ProjectTagContent: ProjectTagContentFieldDetails
      Comment: CommentFieldDetails
      PostContent: PostContentFieldDetails
      PostLng: PostLngFieldDetails
      PostTag: PostTagFieldDetails
      PostTagLng: PostTagLngFieldDetails
      PostTagContent: PostTagContentFieldDetails
      PostConnection: PostConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      PostContentConnection: PostContentConnectionFieldDetails
      PostContentEdge: PostContentEdgeFieldDetails
      AggregatePostContent: AggregatePostContentFieldDetails
      PostLngConnection: PostLngConnectionFieldDetails
      PostLngEdge: PostLngEdgeFieldDetails
      AggregatePostLng: AggregatePostLngFieldDetails
      CommentConnection: CommentConnectionFieldDetails
      CommentEdge: CommentEdgeFieldDetails
      AggregateComment: AggregateCommentFieldDetails
      PostTagConnection: PostTagConnectionFieldDetails
      PostTagEdge: PostTagEdgeFieldDetails
      AggregatePostTag: AggregatePostTagFieldDetails
      PostTagContentConnection: PostTagContentConnectionFieldDetails
      PostTagContentEdge: PostTagContentEdgeFieldDetails
      AggregatePostTagContent: AggregatePostTagContentFieldDetails
      PostTagLngConnection: PostTagLngConnectionFieldDetails
      PostTagLngEdge: PostTagLngEdgeFieldDetails
      AggregatePostTagLng: AggregatePostTagLngFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ProfileConnection: ProfileConnectionFieldDetails
      ProfileEdge: ProfileEdgeFieldDetails
      AggregateProfile: AggregateProfileFieldDetails
      AvatarConnection: AvatarConnectionFieldDetails
      AvatarEdge: AvatarEdgeFieldDetails
      AggregateAvatar: AggregateAvatarFieldDetails
      ProjectConnection: ProjectConnectionFieldDetails
      ProjectEdge: ProjectEdgeFieldDetails
      AggregateProject: AggregateProjectFieldDetails
      ProjectContentConnection: ProjectContentConnectionFieldDetails
      ProjectContentEdge: ProjectContentEdgeFieldDetails
      AggregateProjectContent: AggregateProjectContentFieldDetails
      ProjectLngConnection: ProjectLngConnectionFieldDetails
      ProjectLngEdge: ProjectLngEdgeFieldDetails
      AggregateProjectLng: AggregateProjectLngFieldDetails
      ProjectTagConnection: ProjectTagConnectionFieldDetails
      ProjectTagEdge: ProjectTagEdgeFieldDetails
      AggregateProjectTag: AggregateProjectTagFieldDetails
      ProjectTagContentConnection: ProjectTagContentConnectionFieldDetails
      ProjectTagContentEdge: ProjectTagContentEdgeFieldDetails
      AggregateProjectTagContent: AggregateProjectTagContentFieldDetails
      ProjectTagLngConnection: ProjectTagLngConnectionFieldDetails
      ProjectTagLngEdge: ProjectTagLngEdgeFieldDetails
      AggregateProjectTagLng: AggregateProjectTagLngFieldDetails
      ProjectCategoryConnection: ProjectCategoryConnectionFieldDetails
      ProjectCategoryEdge: ProjectCategoryEdgeFieldDetails
      AggregateProjectCategory: AggregateProjectCategoryFieldDetails
      ProjectCategoryContentConnection: ProjectCategoryContentConnectionFieldDetails
      ProjectCategoryContentEdge: ProjectCategoryContentEdgeFieldDetails
      AggregateProjectCategoryContent: AggregateProjectCategoryContentFieldDetails
      ProjectCategoryLngConnection: ProjectCategoryLngConnectionFieldDetails
      ProjectCategoryLngEdge: ProjectCategoryLngEdgeFieldDetails
      AggregateProjectCategoryLng: AggregateProjectCategoryLngFieldDetails
      ProjectAlbumConnection: ProjectAlbumConnectionFieldDetails
      ProjectAlbumEdge: ProjectAlbumEdgeFieldDetails
      AggregateProjectAlbum: AggregateProjectAlbumFieldDetails
      ProjectImageConnection: ProjectImageConnectionFieldDetails
      ProjectImageEdge: ProjectImageEdgeFieldDetails
      AggregateProjectImage: AggregateProjectImageFieldDetails
      ProjectImageContentConnection: ProjectImageContentConnectionFieldDetails
      ProjectImageContentEdge: ProjectImageContentEdgeFieldDetails
      AggregateProjectImageContent: AggregateProjectImageContentFieldDetails
      ProjectImageLngConnection: ProjectImageLngConnectionFieldDetails
      ProjectImageLngEdge: ProjectImageLngEdgeFieldDetails
      AggregateProjectImageLng: AggregateProjectImageLngFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      PostContentSubscriptionPayload: PostContentSubscriptionPayloadFieldDetails
      PostContentPreviousValues: PostContentPreviousValuesFieldDetails
      PostLngSubscriptionPayload: PostLngSubscriptionPayloadFieldDetails
      PostLngPreviousValues: PostLngPreviousValuesFieldDetails
      CommentSubscriptionPayload: CommentSubscriptionPayloadFieldDetails
      CommentPreviousValues: CommentPreviousValuesFieldDetails
      PostTagSubscriptionPayload: PostTagSubscriptionPayloadFieldDetails
      PostTagPreviousValues: PostTagPreviousValuesFieldDetails
      PostTagContentSubscriptionPayload: PostTagContentSubscriptionPayloadFieldDetails
      PostTagContentPreviousValues: PostTagContentPreviousValuesFieldDetails
      PostTagLngSubscriptionPayload: PostTagLngSubscriptionPayloadFieldDetails
      PostTagLngPreviousValues: PostTagLngPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ProfileSubscriptionPayload: ProfileSubscriptionPayloadFieldDetails
      ProfilePreviousValues: ProfilePreviousValuesFieldDetails
      AvatarSubscriptionPayload: AvatarSubscriptionPayloadFieldDetails
      AvatarPreviousValues: AvatarPreviousValuesFieldDetails
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadFieldDetails
      ProjectPreviousValues: ProjectPreviousValuesFieldDetails
      ProjectContentSubscriptionPayload: ProjectContentSubscriptionPayloadFieldDetails
      ProjectContentPreviousValues: ProjectContentPreviousValuesFieldDetails
      ProjectLngSubscriptionPayload: ProjectLngSubscriptionPayloadFieldDetails
      ProjectLngPreviousValues: ProjectLngPreviousValuesFieldDetails
      ProjectTagSubscriptionPayload: ProjectTagSubscriptionPayloadFieldDetails
      ProjectTagPreviousValues: ProjectTagPreviousValuesFieldDetails
      ProjectTagContentSubscriptionPayload: ProjectTagContentSubscriptionPayloadFieldDetails
      ProjectTagContentPreviousValues: ProjectTagContentPreviousValuesFieldDetails
      ProjectTagLngSubscriptionPayload: ProjectTagLngSubscriptionPayloadFieldDetails
      ProjectTagLngPreviousValues: ProjectTagLngPreviousValuesFieldDetails
      ProjectCategorySubscriptionPayload: ProjectCategorySubscriptionPayloadFieldDetails
      ProjectCategoryPreviousValues: ProjectCategoryPreviousValuesFieldDetails
      ProjectCategoryContentSubscriptionPayload: ProjectCategoryContentSubscriptionPayloadFieldDetails
      ProjectCategoryContentPreviousValues: ProjectCategoryContentPreviousValuesFieldDetails
      ProjectCategoryLngSubscriptionPayload: ProjectCategoryLngSubscriptionPayloadFieldDetails
      ProjectCategoryLngPreviousValues: ProjectCategoryLngPreviousValuesFieldDetails
      ProjectAlbumSubscriptionPayload: ProjectAlbumSubscriptionPayloadFieldDetails
      ProjectAlbumPreviousValues: ProjectAlbumPreviousValuesFieldDetails
      ProjectImageSubscriptionPayload: ProjectImageSubscriptionPayloadFieldDetails
      ProjectImagePreviousValues: ProjectImagePreviousValuesFieldDetails
      ProjectImageContentSubscriptionPayload: ProjectImageContentSubscriptionPayloadFieldDetails
      ProjectImageContentPreviousValues: ProjectImageContentPreviousValuesFieldDetails
      ProjectImageLngSubscriptionPayload: ProjectImageLngSubscriptionPayloadFieldDetails
      ProjectImageLngPreviousValues: ProjectImageLngPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      ProfileWhereInput: ProfileWhereInputInputObject
      AvatarWhereInput: AvatarWhereInputInputObject
      ProjectWhereInput: ProjectWhereInputInputObject
      ProjectCategoryWhereInput: ProjectCategoryWhereInputInputObject
      ProjectCategoryContentWhereInput: ProjectCategoryContentWhereInputInputObject
      ProjectCategoryLngWhereInput: ProjectCategoryLngWhereInputInputObject
      ProjectAlbumWhereInput: ProjectAlbumWhereInputInputObject
      ProjectImageWhereInput: ProjectImageWhereInputInputObject
      ProjectImageContentWhereInput: ProjectImageContentWhereInputInputObject
      ProjectImageLngWhereInput: ProjectImageLngWhereInputInputObject
      ProjectContentWhereInput: ProjectContentWhereInputInputObject
      ProjectLngWhereInput: ProjectLngWhereInputInputObject
      ProjectTagWhereInput: ProjectTagWhereInputInputObject
      ProjectTagLngWhereInput: ProjectTagLngWhereInputInputObject
      ProjectTagContentWhereInput: ProjectTagContentWhereInputInputObject
      CommentWhereInput: CommentWhereInputInputObject
      PostContentWhereInput: PostContentWhereInputInputObject
      PostLngWhereInput: PostLngWhereInputInputObject
      PostTagWhereInput: PostTagWhereInputInputObject
      PostTagLngWhereInput: PostTagLngWhereInputInputObject
      PostTagContentWhereInput: PostTagContentWhereInputInputObject
      PostContentWhereUniqueInput: PostContentWhereUniqueInputInputObject
      PostLngWhereUniqueInput: PostLngWhereUniqueInputInputObject
      CommentWhereUniqueInput: CommentWhereUniqueInputInputObject
      PostTagWhereUniqueInput: PostTagWhereUniqueInputInputObject
      PostTagContentWhereUniqueInput: PostTagContentWhereUniqueInputInputObject
      PostTagLngWhereUniqueInput: PostTagLngWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ProfileWhereUniqueInput: ProfileWhereUniqueInputInputObject
      AvatarWhereUniqueInput: AvatarWhereUniqueInputInputObject
      ProjectWhereUniqueInput: ProjectWhereUniqueInputInputObject
      ProjectContentWhereUniqueInput: ProjectContentWhereUniqueInputInputObject
      ProjectLngWhereUniqueInput: ProjectLngWhereUniqueInputInputObject
      ProjectTagWhereUniqueInput: ProjectTagWhereUniqueInputInputObject
      ProjectTagContentWhereUniqueInput: ProjectTagContentWhereUniqueInputInputObject
      ProjectTagLngWhereUniqueInput: ProjectTagLngWhereUniqueInputInputObject
      ProjectCategoryWhereUniqueInput: ProjectCategoryWhereUniqueInputInputObject
      ProjectCategoryContentWhereUniqueInput: ProjectCategoryContentWhereUniqueInputInputObject
      ProjectCategoryLngWhereUniqueInput: ProjectCategoryLngWhereUniqueInputInputObject
      ProjectAlbumWhereUniqueInput: ProjectAlbumWhereUniqueInputInputObject
      ProjectImageWhereUniqueInput: ProjectImageWhereUniqueInputInputObject
      ProjectImageContentWhereUniqueInput: ProjectImageContentWhereUniqueInputInputObject
      ProjectImageLngWhereUniqueInput: ProjectImageLngWhereUniqueInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      ProfileCreateOneWithoutUserInput: ProfileCreateOneWithoutUserInputInputObject
      ProfileCreateWithoutUserInput: ProfileCreateWithoutUserInputInputObject
      AvatarCreateOneInput: AvatarCreateOneInputInputObject
      AvatarCreateInput: AvatarCreateInputInputObject
      PostCreateManyWithoutLikedByInput: PostCreateManyWithoutLikedByInputInputObject
      PostCreateWithoutLikedByInput: PostCreateWithoutLikedByInputInputObject
      PostContentCreateManyWithoutPostInput: PostContentCreateManyWithoutPostInputInputObject
      PostContentCreateWithoutPostInput: PostContentCreateWithoutPostInputInputObject
      PostLngCreateOneWithoutPostsInput: PostLngCreateOneWithoutPostsInputInputObject
      PostLngCreateWithoutPostsInput: PostLngCreateWithoutPostsInputInputObject
      PostTagCreateManyInput: PostTagCreateManyInputInputObject
      PostTagCreateInput: PostTagCreateInputInputObject
      PostTagLngCreateOneWithoutTagsInput: PostTagLngCreateOneWithoutTagsInputInputObject
      PostTagLngCreateWithoutTagsInput: PostTagLngCreateWithoutTagsInputInputObject
      PostTagContentCreateOneWithoutTagInput: PostTagContentCreateOneWithoutTagInputInputObject
      PostTagContentCreateWithoutTagInput: PostTagContentCreateWithoutTagInputInputObject
      CommentCreateManyWithoutPostInput: CommentCreateManyWithoutPostInputInputObject
      CommentCreateWithoutPostInput: CommentCreateWithoutPostInputInputObject
      UserCreateOneWithoutCommentsInput: UserCreateOneWithoutCommentsInputInputObject
      UserCreateWithoutCommentsInput: UserCreateWithoutCommentsInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      UserCreateManyWithoutPostLikesInput: UserCreateManyWithoutPostLikesInputInputObject
      UserCreateWithoutPostLikesInput: UserCreateWithoutPostLikesInputInputObject
      ProjectCreateManyWithoutAuthorInput: ProjectCreateManyWithoutAuthorInputInputObject
      ProjectCreateWithoutAuthorInput: ProjectCreateWithoutAuthorInputInputObject
      ProjectCategoryCreateOneWithoutProjectsInput: ProjectCategoryCreateOneWithoutProjectsInputInputObject
      ProjectCategoryCreateWithoutProjectsInput: ProjectCategoryCreateWithoutProjectsInputInputObject
      ProjectCategoryContentCreateManyWithoutCategoryInput: ProjectCategoryContentCreateManyWithoutCategoryInputInputObject
      ProjectCategoryContentCreateWithoutCategoryInput: ProjectCategoryContentCreateWithoutCategoryInputInputObject
      ProjectCategoryLngCreateOneWithoutCategoriesInput: ProjectCategoryLngCreateOneWithoutCategoriesInputInputObject
      ProjectCategoryLngCreateWithoutCategoriesInput: ProjectCategoryLngCreateWithoutCategoriesInputInputObject
      ProjectAlbumCreateOneWithoutProjectInput: ProjectAlbumCreateOneWithoutProjectInputInputObject
      ProjectAlbumCreateWithoutProjectInput: ProjectAlbumCreateWithoutProjectInputInputObject
      ProjectImageCreateManyWithoutAlbumInput: ProjectImageCreateManyWithoutAlbumInputInputObject
      ProjectImageCreateWithoutAlbumInput: ProjectImageCreateWithoutAlbumInputInputObject
      ProjectImageContentCreateOneWithoutImageInput: ProjectImageContentCreateOneWithoutImageInputInputObject
      ProjectImageContentCreateWithoutImageInput: ProjectImageContentCreateWithoutImageInputInputObject
      ProjectImageLngCreateOneWithoutImagesInput: ProjectImageLngCreateOneWithoutImagesInputInputObject
      ProjectImageLngCreateWithoutImagesInput: ProjectImageLngCreateWithoutImagesInputInputObject
      ProjectContentCreateManyWithoutProjectInput: ProjectContentCreateManyWithoutProjectInputInputObject
      ProjectContentCreateWithoutProjectInput: ProjectContentCreateWithoutProjectInputInputObject
      ProjectLngCreateOneWithoutProjectsInput: ProjectLngCreateOneWithoutProjectsInputInputObject
      ProjectLngCreateWithoutProjectsInput: ProjectLngCreateWithoutProjectsInputInputObject
      ProjectTagCreateManyInput: ProjectTagCreateManyInputInputObject
      ProjectTagCreateInput: ProjectTagCreateInputInputObject
      ProjectTagLngCreateOneWithoutTagsInput: ProjectTagLngCreateOneWithoutTagsInputInputObject
      ProjectTagLngCreateWithoutTagsInput: ProjectTagLngCreateWithoutTagsInputInputObject
      ProjectTagContentCreateOneWithoutTagInput: ProjectTagContentCreateOneWithoutTagInputInputObject
      ProjectTagContentCreateWithoutTagInput: ProjectTagContentCreateWithoutTagInputInputObject
      CommentCreateManyWithoutAuthorInput: CommentCreateManyWithoutAuthorInputInputObject
      CommentCreateWithoutAuthorInput: CommentCreateWithoutAuthorInputInputObject
      PostCreateOneWithoutCommentsInput: PostCreateOneWithoutCommentsInputInputObject
      PostCreateWithoutCommentsInput: PostCreateWithoutCommentsInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneRequiredWithoutPostsInput: UserUpdateOneRequiredWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      ProfileUpdateOneWithoutUserInput: ProfileUpdateOneWithoutUserInputInputObject
      ProfileUpdateWithoutUserDataInput: ProfileUpdateWithoutUserDataInputInputObject
      AvatarUpdateOneRequiredInput: AvatarUpdateOneRequiredInputInputObject
      AvatarUpdateDataInput: AvatarUpdateDataInputInputObject
      AvatarUpsertNestedInput: AvatarUpsertNestedInputInputObject
      ProfileUpsertWithoutUserInput: ProfileUpsertWithoutUserInputInputObject
      PostUpdateManyWithoutLikedByInput: PostUpdateManyWithoutLikedByInputInputObject
      PostUpdateWithWhereUniqueWithoutLikedByInput: PostUpdateWithWhereUniqueWithoutLikedByInputInputObject
      PostUpdateWithoutLikedByDataInput: PostUpdateWithoutLikedByDataInputInputObject
      PostContentUpdateManyWithoutPostInput: PostContentUpdateManyWithoutPostInputInputObject
      PostContentUpdateWithWhereUniqueWithoutPostInput: PostContentUpdateWithWhereUniqueWithoutPostInputInputObject
      PostContentUpdateWithoutPostDataInput: PostContentUpdateWithoutPostDataInputInputObject
      PostLngUpdateOneRequiredWithoutPostsInput: PostLngUpdateOneRequiredWithoutPostsInputInputObject
      PostLngUpdateWithoutPostsDataInput: PostLngUpdateWithoutPostsDataInputInputObject
      PostLngUpsertWithoutPostsInput: PostLngUpsertWithoutPostsInputInputObject
      PostContentUpsertWithWhereUniqueWithoutPostInput: PostContentUpsertWithWhereUniqueWithoutPostInputInputObject
      PostContentScalarWhereInput: PostContentScalarWhereInputInputObject
      PostContentUpdateManyWithWhereNestedInput: PostContentUpdateManyWithWhereNestedInputInputObject
      PostContentUpdateManyDataInput: PostContentUpdateManyDataInputInputObject
      PostTagUpdateManyInput: PostTagUpdateManyInputInputObject
      PostTagUpdateWithWhereUniqueNestedInput: PostTagUpdateWithWhereUniqueNestedInputInputObject
      PostTagUpdateDataInput: PostTagUpdateDataInputInputObject
      PostTagLngUpdateOneRequiredWithoutTagsInput: PostTagLngUpdateOneRequiredWithoutTagsInputInputObject
      PostTagLngUpdateWithoutTagsDataInput: PostTagLngUpdateWithoutTagsDataInputInputObject
      PostTagLngUpsertWithoutTagsInput: PostTagLngUpsertWithoutTagsInputInputObject
      PostTagContentUpdateOneRequiredWithoutTagInput: PostTagContentUpdateOneRequiredWithoutTagInputInputObject
      PostTagContentUpdateWithoutTagDataInput: PostTagContentUpdateWithoutTagDataInputInputObject
      PostTagContentUpsertWithoutTagInput: PostTagContentUpsertWithoutTagInputInputObject
      PostTagUpsertWithWhereUniqueNestedInput: PostTagUpsertWithWhereUniqueNestedInputInputObject
      PostTagScalarWhereInput: PostTagScalarWhereInputInputObject
      PostTagUpdateManyWithWhereNestedInput: PostTagUpdateManyWithWhereNestedInputInputObject
      PostTagUpdateManyDataInput: PostTagUpdateManyDataInputInputObject
      CommentUpdateManyWithoutPostInput: CommentUpdateManyWithoutPostInputInputObject
      CommentUpdateWithWhereUniqueWithoutPostInput: CommentUpdateWithWhereUniqueWithoutPostInputInputObject
      CommentUpdateWithoutPostDataInput: CommentUpdateWithoutPostDataInputInputObject
      UserUpdateOneRequiredWithoutCommentsInput: UserUpdateOneRequiredWithoutCommentsInputInputObject
      UserUpdateWithoutCommentsDataInput: UserUpdateWithoutCommentsDataInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      UserUpdateManyWithoutPostLikesInput: UserUpdateManyWithoutPostLikesInputInputObject
      UserUpdateWithWhereUniqueWithoutPostLikesInput: UserUpdateWithWhereUniqueWithoutPostLikesInputInputObject
      UserUpdateWithoutPostLikesDataInput: UserUpdateWithoutPostLikesDataInputInputObject
      ProjectUpdateManyWithoutAuthorInput: ProjectUpdateManyWithoutAuthorInputInputObject
      ProjectUpdateWithWhereUniqueWithoutAuthorInput: ProjectUpdateWithWhereUniqueWithoutAuthorInputInputObject
      ProjectUpdateWithoutAuthorDataInput: ProjectUpdateWithoutAuthorDataInputInputObject
      ProjectCategoryUpdateOneRequiredWithoutProjectsInput: ProjectCategoryUpdateOneRequiredWithoutProjectsInputInputObject
      ProjectCategoryUpdateWithoutProjectsDataInput: ProjectCategoryUpdateWithoutProjectsDataInputInputObject
      ProjectCategoryContentUpdateManyWithoutCategoryInput: ProjectCategoryContentUpdateManyWithoutCategoryInputInputObject
      ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInput: ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInputInputObject
      ProjectCategoryContentUpdateWithoutCategoryDataInput: ProjectCategoryContentUpdateWithoutCategoryDataInputInputObject
      ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInput: ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInputInputObject
      ProjectCategoryLngUpdateWithoutCategoriesDataInput: ProjectCategoryLngUpdateWithoutCategoriesDataInputInputObject
      ProjectCategoryLngUpsertWithoutCategoriesInput: ProjectCategoryLngUpsertWithoutCategoriesInputInputObject
      ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInput: ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInputInputObject
      ProjectCategoryContentScalarWhereInput: ProjectCategoryContentScalarWhereInputInputObject
      ProjectCategoryContentUpdateManyWithWhereNestedInput: ProjectCategoryContentUpdateManyWithWhereNestedInputInputObject
      ProjectCategoryContentUpdateManyDataInput: ProjectCategoryContentUpdateManyDataInputInputObject
      ProjectCategoryUpsertWithoutProjectsInput: ProjectCategoryUpsertWithoutProjectsInputInputObject
      ProjectAlbumUpdateOneRequiredWithoutProjectInput: ProjectAlbumUpdateOneRequiredWithoutProjectInputInputObject
      ProjectAlbumUpdateWithoutProjectDataInput: ProjectAlbumUpdateWithoutProjectDataInputInputObject
      ProjectImageUpdateManyWithoutAlbumInput: ProjectImageUpdateManyWithoutAlbumInputInputObject
      ProjectImageUpdateWithWhereUniqueWithoutAlbumInput: ProjectImageUpdateWithWhereUniqueWithoutAlbumInputInputObject
      ProjectImageUpdateWithoutAlbumDataInput: ProjectImageUpdateWithoutAlbumDataInputInputObject
      ProjectImageContentUpdateOneRequiredWithoutImageInput: ProjectImageContentUpdateOneRequiredWithoutImageInputInputObject
      ProjectImageContentUpdateWithoutImageDataInput: ProjectImageContentUpdateWithoutImageDataInputInputObject
      ProjectImageLngUpdateOneRequiredWithoutImagesInput: ProjectImageLngUpdateOneRequiredWithoutImagesInputInputObject
      ProjectImageLngUpdateWithoutImagesDataInput: ProjectImageLngUpdateWithoutImagesDataInputInputObject
      ProjectImageLngUpsertWithoutImagesInput: ProjectImageLngUpsertWithoutImagesInputInputObject
      ProjectImageContentUpsertWithoutImageInput: ProjectImageContentUpsertWithoutImageInputInputObject
      ProjectImageUpsertWithWhereUniqueWithoutAlbumInput: ProjectImageUpsertWithWhereUniqueWithoutAlbumInputInputObject
      ProjectImageScalarWhereInput: ProjectImageScalarWhereInputInputObject
      ProjectImageUpdateManyWithWhereNestedInput: ProjectImageUpdateManyWithWhereNestedInputInputObject
      ProjectImageUpdateManyDataInput: ProjectImageUpdateManyDataInputInputObject
      ProjectAlbumUpsertWithoutProjectInput: ProjectAlbumUpsertWithoutProjectInputInputObject
      ProjectContentUpdateManyWithoutProjectInput: ProjectContentUpdateManyWithoutProjectInputInputObject
      ProjectContentUpdateWithWhereUniqueWithoutProjectInput: ProjectContentUpdateWithWhereUniqueWithoutProjectInputInputObject
      ProjectContentUpdateWithoutProjectDataInput: ProjectContentUpdateWithoutProjectDataInputInputObject
      ProjectLngUpdateOneRequiredWithoutProjectsInput: ProjectLngUpdateOneRequiredWithoutProjectsInputInputObject
      ProjectLngUpdateWithoutProjectsDataInput: ProjectLngUpdateWithoutProjectsDataInputInputObject
      ProjectLngUpsertWithoutProjectsInput: ProjectLngUpsertWithoutProjectsInputInputObject
      ProjectContentUpsertWithWhereUniqueWithoutProjectInput: ProjectContentUpsertWithWhereUniqueWithoutProjectInputInputObject
      ProjectContentScalarWhereInput: ProjectContentScalarWhereInputInputObject
      ProjectContentUpdateManyWithWhereNestedInput: ProjectContentUpdateManyWithWhereNestedInputInputObject
      ProjectContentUpdateManyDataInput: ProjectContentUpdateManyDataInputInputObject
      ProjectTagUpdateManyInput: ProjectTagUpdateManyInputInputObject
      ProjectTagUpdateWithWhereUniqueNestedInput: ProjectTagUpdateWithWhereUniqueNestedInputInputObject
      ProjectTagUpdateDataInput: ProjectTagUpdateDataInputInputObject
      ProjectTagLngUpdateOneRequiredWithoutTagsInput: ProjectTagLngUpdateOneRequiredWithoutTagsInputInputObject
      ProjectTagLngUpdateWithoutTagsDataInput: ProjectTagLngUpdateWithoutTagsDataInputInputObject
      ProjectTagLngUpsertWithoutTagsInput: ProjectTagLngUpsertWithoutTagsInputInputObject
      ProjectTagContentUpdateOneRequiredWithoutTagInput: ProjectTagContentUpdateOneRequiredWithoutTagInputInputObject
      ProjectTagContentUpdateWithoutTagDataInput: ProjectTagContentUpdateWithoutTagDataInputInputObject
      ProjectTagContentUpsertWithoutTagInput: ProjectTagContentUpsertWithoutTagInputInputObject
      ProjectTagUpsertWithWhereUniqueNestedInput: ProjectTagUpsertWithWhereUniqueNestedInputInputObject
      ProjectTagScalarWhereInput: ProjectTagScalarWhereInputInputObject
      ProjectTagUpdateManyWithWhereNestedInput: ProjectTagUpdateManyWithWhereNestedInputInputObject
      ProjectTagUpdateManyDataInput: ProjectTagUpdateManyDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutAuthorInput: ProjectUpsertWithWhereUniqueWithoutAuthorInputInputObject
      ProjectScalarWhereInput: ProjectScalarWhereInputInputObject
      ProjectUpdateManyWithWhereNestedInput: ProjectUpdateManyWithWhereNestedInputInputObject
      ProjectUpdateManyDataInput: ProjectUpdateManyDataInputInputObject
      CommentUpdateManyWithoutAuthorInput: CommentUpdateManyWithoutAuthorInputInputObject
      CommentUpdateWithWhereUniqueWithoutAuthorInput: CommentUpdateWithWhereUniqueWithoutAuthorInputInputObject
      CommentUpdateWithoutAuthorDataInput: CommentUpdateWithoutAuthorDataInputInputObject
      PostUpdateOneRequiredWithoutCommentsInput: PostUpdateOneRequiredWithoutCommentsInputInputObject
      PostUpdateWithoutCommentsDataInput: PostUpdateWithoutCommentsDataInputInputObject
      PostUpsertWithoutCommentsInput: PostUpsertWithoutCommentsInputInputObject
      CommentUpsertWithWhereUniqueWithoutAuthorInput: CommentUpsertWithWhereUniqueWithoutAuthorInputInputObject
      CommentScalarWhereInput: CommentScalarWhereInputInputObject
      UserUpsertWithWhereUniqueWithoutPostLikesInput: UserUpsertWithWhereUniqueWithoutPostLikesInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpsertWithoutCommentsInput: UserUpsertWithoutCommentsInputInputObject
      CommentUpsertWithWhereUniqueWithoutPostInput: CommentUpsertWithWhereUniqueWithoutPostInputInputObject
      PostUpsertWithWhereUniqueWithoutLikedByInput: PostUpsertWithWhereUniqueWithoutLikedByInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      PostContentCreateInput: PostContentCreateInputInputObject
      PostCreateOneWithoutContentsInput: PostCreateOneWithoutContentsInputInputObject
      PostCreateWithoutContentsInput: PostCreateWithoutContentsInputInputObject
      PostContentUpdateInput: PostContentUpdateInputInputObject
      PostUpdateOneRequiredWithoutContentsInput: PostUpdateOneRequiredWithoutContentsInputInputObject
      PostUpdateWithoutContentsDataInput: PostUpdateWithoutContentsDataInputInputObject
      PostUpsertWithoutContentsInput: PostUpsertWithoutContentsInputInputObject
      PostContentUpdateManyMutationInput: PostContentUpdateManyMutationInputInputObject
      PostLngCreateInput: PostLngCreateInputInputObject
      PostContentCreateManyWithoutLanguageInput: PostContentCreateManyWithoutLanguageInputInputObject
      PostContentCreateWithoutLanguageInput: PostContentCreateWithoutLanguageInputInputObject
      PostLngUpdateInput: PostLngUpdateInputInputObject
      PostContentUpdateManyWithoutLanguageInput: PostContentUpdateManyWithoutLanguageInputInputObject
      PostContentUpdateWithWhereUniqueWithoutLanguageInput: PostContentUpdateWithWhereUniqueWithoutLanguageInputInputObject
      PostContentUpdateWithoutLanguageDataInput: PostContentUpdateWithoutLanguageDataInputInputObject
      PostContentUpsertWithWhereUniqueWithoutLanguageInput: PostContentUpsertWithWhereUniqueWithoutLanguageInputInputObject
      PostLngUpdateManyMutationInput: PostLngUpdateManyMutationInputInputObject
      CommentCreateInput: CommentCreateInputInputObject
      CommentUpdateInput: CommentUpdateInputInputObject
      PostTagUpdateInput: PostTagUpdateInputInputObject
      PostTagUpdateManyMutationInput: PostTagUpdateManyMutationInputInputObject
      PostTagContentCreateInput: PostTagContentCreateInputInputObject
      PostTagCreateOneWithoutContentsInput: PostTagCreateOneWithoutContentsInputInputObject
      PostTagCreateWithoutContentsInput: PostTagCreateWithoutContentsInputInputObject
      PostTagContentUpdateInput: PostTagContentUpdateInputInputObject
      PostTagUpdateOneRequiredWithoutContentsInput: PostTagUpdateOneRequiredWithoutContentsInputInputObject
      PostTagUpdateWithoutContentsDataInput: PostTagUpdateWithoutContentsDataInputInputObject
      PostTagUpsertWithoutContentsInput: PostTagUpsertWithoutContentsInputInputObject
      PostTagContentUpdateManyMutationInput: PostTagContentUpdateManyMutationInputInputObject
      PostTagLngCreateInput: PostTagLngCreateInputInputObject
      PostTagCreateManyWithoutLanguageInput: PostTagCreateManyWithoutLanguageInputInputObject
      PostTagCreateWithoutLanguageInput: PostTagCreateWithoutLanguageInputInputObject
      PostTagLngUpdateInput: PostTagLngUpdateInputInputObject
      PostTagUpdateManyWithoutLanguageInput: PostTagUpdateManyWithoutLanguageInputInputObject
      PostTagUpdateWithWhereUniqueWithoutLanguageInput: PostTagUpdateWithWhereUniqueWithoutLanguageInputInputObject
      PostTagUpdateWithoutLanguageDataInput: PostTagUpdateWithoutLanguageDataInputInputObject
      PostTagUpsertWithWhereUniqueWithoutLanguageInput: PostTagUpsertWithWhereUniqueWithoutLanguageInputInputObject
      PostTagLngUpdateManyMutationInput: PostTagLngUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ProfileCreateInput: ProfileCreateInputInputObject
      UserCreateOneWithoutProfileInput: UserCreateOneWithoutProfileInputInputObject
      UserCreateWithoutProfileInput: UserCreateWithoutProfileInputInputObject
      ProfileUpdateInput: ProfileUpdateInputInputObject
      UserUpdateOneRequiredWithoutProfileInput: UserUpdateOneRequiredWithoutProfileInputInputObject
      UserUpdateWithoutProfileDataInput: UserUpdateWithoutProfileDataInputInputObject
      UserUpsertWithoutProfileInput: UserUpsertWithoutProfileInputInputObject
      ProfileUpdateManyMutationInput: ProfileUpdateManyMutationInputInputObject
      AvatarUpdateInput: AvatarUpdateInputInputObject
      AvatarUpdateManyMutationInput: AvatarUpdateManyMutationInputInputObject
      ProjectCreateInput: ProjectCreateInputInputObject
      UserCreateOneWithoutProjectsInput: UserCreateOneWithoutProjectsInputInputObject
      UserCreateWithoutProjectsInput: UserCreateWithoutProjectsInputInputObject
      ProjectUpdateInput: ProjectUpdateInputInputObject
      UserUpdateOneRequiredWithoutProjectsInput: UserUpdateOneRequiredWithoutProjectsInputInputObject
      UserUpdateWithoutProjectsDataInput: UserUpdateWithoutProjectsDataInputInputObject
      UserUpsertWithoutProjectsInput: UserUpsertWithoutProjectsInputInputObject
      ProjectUpdateManyMutationInput: ProjectUpdateManyMutationInputInputObject
      ProjectContentCreateInput: ProjectContentCreateInputInputObject
      ProjectCreateOneWithoutContentsInput: ProjectCreateOneWithoutContentsInputInputObject
      ProjectCreateWithoutContentsInput: ProjectCreateWithoutContentsInputInputObject
      ProjectContentUpdateInput: ProjectContentUpdateInputInputObject
      ProjectUpdateOneRequiredWithoutContentsInput: ProjectUpdateOneRequiredWithoutContentsInputInputObject
      ProjectUpdateWithoutContentsDataInput: ProjectUpdateWithoutContentsDataInputInputObject
      ProjectUpsertWithoutContentsInput: ProjectUpsertWithoutContentsInputInputObject
      ProjectContentUpdateManyMutationInput: ProjectContentUpdateManyMutationInputInputObject
      ProjectLngCreateInput: ProjectLngCreateInputInputObject
      ProjectContentCreateManyWithoutLanguageInput: ProjectContentCreateManyWithoutLanguageInputInputObject
      ProjectContentCreateWithoutLanguageInput: ProjectContentCreateWithoutLanguageInputInputObject
      ProjectLngUpdateInput: ProjectLngUpdateInputInputObject
      ProjectContentUpdateManyWithoutLanguageInput: ProjectContentUpdateManyWithoutLanguageInputInputObject
      ProjectContentUpdateWithWhereUniqueWithoutLanguageInput: ProjectContentUpdateWithWhereUniqueWithoutLanguageInputInputObject
      ProjectContentUpdateWithoutLanguageDataInput: ProjectContentUpdateWithoutLanguageDataInputInputObject
      ProjectContentUpsertWithWhereUniqueWithoutLanguageInput: ProjectContentUpsertWithWhereUniqueWithoutLanguageInputInputObject
      ProjectLngUpdateManyMutationInput: ProjectLngUpdateManyMutationInputInputObject
      ProjectTagUpdateInput: ProjectTagUpdateInputInputObject
      ProjectTagUpdateManyMutationInput: ProjectTagUpdateManyMutationInputInputObject
      ProjectTagContentCreateInput: ProjectTagContentCreateInputInputObject
      ProjectTagCreateOneWithoutContentsInput: ProjectTagCreateOneWithoutContentsInputInputObject
      ProjectTagCreateWithoutContentsInput: ProjectTagCreateWithoutContentsInputInputObject
      ProjectTagContentUpdateInput: ProjectTagContentUpdateInputInputObject
      ProjectTagUpdateOneRequiredWithoutContentsInput: ProjectTagUpdateOneRequiredWithoutContentsInputInputObject
      ProjectTagUpdateWithoutContentsDataInput: ProjectTagUpdateWithoutContentsDataInputInputObject
      ProjectTagUpsertWithoutContentsInput: ProjectTagUpsertWithoutContentsInputInputObject
      ProjectTagContentUpdateManyMutationInput: ProjectTagContentUpdateManyMutationInputInputObject
      ProjectTagLngCreateInput: ProjectTagLngCreateInputInputObject
      ProjectTagCreateManyWithoutLanguageInput: ProjectTagCreateManyWithoutLanguageInputInputObject
      ProjectTagCreateWithoutLanguageInput: ProjectTagCreateWithoutLanguageInputInputObject
      ProjectTagLngUpdateInput: ProjectTagLngUpdateInputInputObject
      ProjectTagUpdateManyWithoutLanguageInput: ProjectTagUpdateManyWithoutLanguageInputInputObject
      ProjectTagUpdateWithWhereUniqueWithoutLanguageInput: ProjectTagUpdateWithWhereUniqueWithoutLanguageInputInputObject
      ProjectTagUpdateWithoutLanguageDataInput: ProjectTagUpdateWithoutLanguageDataInputInputObject
      ProjectTagUpsertWithWhereUniqueWithoutLanguageInput: ProjectTagUpsertWithWhereUniqueWithoutLanguageInputInputObject
      ProjectTagLngUpdateManyMutationInput: ProjectTagLngUpdateManyMutationInputInputObject
      ProjectCategoryCreateInput: ProjectCategoryCreateInputInputObject
      ProjectCreateManyWithoutCategoryInput: ProjectCreateManyWithoutCategoryInputInputObject
      ProjectCreateWithoutCategoryInput: ProjectCreateWithoutCategoryInputInputObject
      ProjectCategoryUpdateInput: ProjectCategoryUpdateInputInputObject
      ProjectUpdateManyWithoutCategoryInput: ProjectUpdateManyWithoutCategoryInputInputObject
      ProjectUpdateWithWhereUniqueWithoutCategoryInput: ProjectUpdateWithWhereUniqueWithoutCategoryInputInputObject
      ProjectUpdateWithoutCategoryDataInput: ProjectUpdateWithoutCategoryDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutCategoryInput: ProjectUpsertWithWhereUniqueWithoutCategoryInputInputObject
      ProjectCategoryUpdateManyMutationInput: ProjectCategoryUpdateManyMutationInputInputObject
      ProjectCategoryContentCreateInput: ProjectCategoryContentCreateInputInputObject
      ProjectCategoryCreateOneWithoutContentsInput: ProjectCategoryCreateOneWithoutContentsInputInputObject
      ProjectCategoryCreateWithoutContentsInput: ProjectCategoryCreateWithoutContentsInputInputObject
      ProjectCategoryContentUpdateInput: ProjectCategoryContentUpdateInputInputObject
      ProjectCategoryUpdateOneRequiredWithoutContentsInput: ProjectCategoryUpdateOneRequiredWithoutContentsInputInputObject
      ProjectCategoryUpdateWithoutContentsDataInput: ProjectCategoryUpdateWithoutContentsDataInputInputObject
      ProjectCategoryUpsertWithoutContentsInput: ProjectCategoryUpsertWithoutContentsInputInputObject
      ProjectCategoryContentUpdateManyMutationInput: ProjectCategoryContentUpdateManyMutationInputInputObject
      ProjectCategoryLngCreateInput: ProjectCategoryLngCreateInputInputObject
      ProjectCategoryContentCreateManyWithoutLanguageInput: ProjectCategoryContentCreateManyWithoutLanguageInputInputObject
      ProjectCategoryContentCreateWithoutLanguageInput: ProjectCategoryContentCreateWithoutLanguageInputInputObject
      ProjectCategoryLngUpdateInput: ProjectCategoryLngUpdateInputInputObject
      ProjectCategoryContentUpdateManyWithoutLanguageInput: ProjectCategoryContentUpdateManyWithoutLanguageInputInputObject
      ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInput: ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInputInputObject
      ProjectCategoryContentUpdateWithoutLanguageDataInput: ProjectCategoryContentUpdateWithoutLanguageDataInputInputObject
      ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInput: ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInputInputObject
      ProjectCategoryLngUpdateManyMutationInput: ProjectCategoryLngUpdateManyMutationInputInputObject
      ProjectAlbumCreateInput: ProjectAlbumCreateInputInputObject
      ProjectCreateOneWithoutAlbumInput: ProjectCreateOneWithoutAlbumInputInputObject
      ProjectCreateWithoutAlbumInput: ProjectCreateWithoutAlbumInputInputObject
      ProjectAlbumUpdateInput: ProjectAlbumUpdateInputInputObject
      ProjectUpdateOneRequiredWithoutAlbumInput: ProjectUpdateOneRequiredWithoutAlbumInputInputObject
      ProjectUpdateWithoutAlbumDataInput: ProjectUpdateWithoutAlbumDataInputInputObject
      ProjectUpsertWithoutAlbumInput: ProjectUpsertWithoutAlbumInputInputObject
      ProjectImageCreateInput: ProjectImageCreateInputInputObject
      ProjectAlbumCreateOneWithoutImagesInput: ProjectAlbumCreateOneWithoutImagesInputInputObject
      ProjectAlbumCreateWithoutImagesInput: ProjectAlbumCreateWithoutImagesInputInputObject
      ProjectImageUpdateInput: ProjectImageUpdateInputInputObject
      ProjectAlbumUpdateOneRequiredWithoutImagesInput: ProjectAlbumUpdateOneRequiredWithoutImagesInputInputObject
      ProjectAlbumUpdateWithoutImagesDataInput: ProjectAlbumUpdateWithoutImagesDataInputInputObject
      ProjectAlbumUpsertWithoutImagesInput: ProjectAlbumUpsertWithoutImagesInputInputObject
      ProjectImageUpdateManyMutationInput: ProjectImageUpdateManyMutationInputInputObject
      ProjectImageContentCreateInput: ProjectImageContentCreateInputInputObject
      ProjectImageCreateOneWithoutContentsInput: ProjectImageCreateOneWithoutContentsInputInputObject
      ProjectImageCreateWithoutContentsInput: ProjectImageCreateWithoutContentsInputInputObject
      ProjectImageContentUpdateInput: ProjectImageContentUpdateInputInputObject
      ProjectImageUpdateOneRequiredWithoutContentsInput: ProjectImageUpdateOneRequiredWithoutContentsInputInputObject
      ProjectImageUpdateWithoutContentsDataInput: ProjectImageUpdateWithoutContentsDataInputInputObject
      ProjectImageUpsertWithoutContentsInput: ProjectImageUpsertWithoutContentsInputInputObject
      ProjectImageContentUpdateManyMutationInput: ProjectImageContentUpdateManyMutationInputInputObject
      ProjectImageLngCreateInput: ProjectImageLngCreateInputInputObject
      ProjectImageContentCreateManyWithoutLanguageInput: ProjectImageContentCreateManyWithoutLanguageInputInputObject
      ProjectImageContentCreateWithoutLanguageInput: ProjectImageContentCreateWithoutLanguageInputInputObject
      ProjectImageLngUpdateInput: ProjectImageLngUpdateInputInputObject
      ProjectImageContentUpdateManyWithoutLanguageInput: ProjectImageContentUpdateManyWithoutLanguageInputInputObject
      ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInput: ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInputInputObject
      ProjectImageContentUpdateWithoutLanguageDataInput: ProjectImageContentUpdateWithoutLanguageDataInputInputObject
      ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInput: ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInputInputObject
      ProjectImageContentScalarWhereInput: ProjectImageContentScalarWhereInputInputObject
      ProjectImageContentUpdateManyWithWhereNestedInput: ProjectImageContentUpdateManyWithWhereNestedInputInputObject
      ProjectImageContentUpdateManyDataInput: ProjectImageContentUpdateManyDataInputInputObject
      ProjectImageLngUpdateManyMutationInput: ProjectImageLngUpdateManyMutationInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      PostContentSubscriptionWhereInput: PostContentSubscriptionWhereInputInputObject
      PostLngSubscriptionWhereInput: PostLngSubscriptionWhereInputInputObject
      CommentSubscriptionWhereInput: CommentSubscriptionWhereInputInputObject
      PostTagSubscriptionWhereInput: PostTagSubscriptionWhereInputInputObject
      PostTagContentSubscriptionWhereInput: PostTagContentSubscriptionWhereInputInputObject
      PostTagLngSubscriptionWhereInput: PostTagLngSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ProfileSubscriptionWhereInput: ProfileSubscriptionWhereInputInputObject
      AvatarSubscriptionWhereInput: AvatarSubscriptionWhereInputInputObject
      ProjectSubscriptionWhereInput: ProjectSubscriptionWhereInputInputObject
      ProjectContentSubscriptionWhereInput: ProjectContentSubscriptionWhereInputInputObject
      ProjectLngSubscriptionWhereInput: ProjectLngSubscriptionWhereInputInputObject
      ProjectTagSubscriptionWhereInput: ProjectTagSubscriptionWhereInputInputObject
      ProjectTagContentSubscriptionWhereInput: ProjectTagContentSubscriptionWhereInputInputObject
      ProjectTagLngSubscriptionWhereInput: ProjectTagLngSubscriptionWhereInputInputObject
      ProjectCategorySubscriptionWhereInput: ProjectCategorySubscriptionWhereInputInputObject
      ProjectCategoryContentSubscriptionWhereInput: ProjectCategoryContentSubscriptionWhereInputInputObject
      ProjectCategoryLngSubscriptionWhereInput: ProjectCategoryLngSubscriptionWhereInputInputObject
      ProjectAlbumSubscriptionWhereInput: ProjectAlbumSubscriptionWhereInputInputObject
      ProjectImageSubscriptionWhereInput: ProjectImageSubscriptionWhereInputInputObject
      ProjectImageContentSubscriptionWhereInput: ProjectImageContentSubscriptionWhereInputInputObject
      ProjectImageLngSubscriptionWhereInput: ProjectImageLngSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Role: RoleValues,
    PostOrderByInput: PostOrderByInputValues,
    ProjectOrderByInput: ProjectOrderByInputValues,
    ProjectCategoryContentOrderByInput: ProjectCategoryContentOrderByInputValues,
    ProjectImageOrderByInput: ProjectImageOrderByInputValues,
    ProjectImageContentOrderByInput: ProjectImageContentOrderByInputValues,
    ProjectContentOrderByInput: ProjectContentOrderByInputValues,
    ProjectTagOrderByInput: ProjectTagOrderByInputValues,
    CommentOrderByInput: CommentOrderByInputValues,
    PostContentOrderByInput: PostContentOrderByInputValues,
    PostTagOrderByInput: PostTagOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    PostLngOrderByInput: PostLngOrderByInputValues,
    PostTagContentOrderByInput: PostTagContentOrderByInputValues,
    PostTagLngOrderByInput: PostTagLngOrderByInputValues,
    ProfileOrderByInput: ProfileOrderByInputValues,
    AvatarOrderByInput: AvatarOrderByInputValues,
    ProjectLngOrderByInput: ProjectLngOrderByInputValues,
    ProjectTagContentOrderByInput: ProjectTagContentOrderByInputValues,
    ProjectTagLngOrderByInput: ProjectTagLngOrderByInputValues,
    ProjectCategoryOrderByInput: ProjectCategoryOrderByInputValues,
    ProjectCategoryLngOrderByInput: ProjectCategoryLngOrderByInputValues,
    ProjectAlbumOrderByInput: ProjectAlbumOrderByInputValues,
    ProjectImageLngOrderByInput: ProjectImageLngOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'postContent', args?: QueryPostContentArgs[] | false, alias?: string  } 
  | { name: 'postContents', args?: QueryPostContentsArgs[] | false, alias?: string  } 
  | { name: 'postContentsConnection', args?: QueryPostContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'postLng', args?: QueryPostLngArgs[] | false, alias?: string  } 
  | { name: 'postLngs', args?: QueryPostLngsArgs[] | false, alias?: string  } 
  | { name: 'postLngsConnection', args?: QueryPostLngsConnectionArgs[] | false, alias?: string  } 
  | { name: 'comment', args?: QueryCommentArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: QueryCommentsArgs[] | false, alias?: string  } 
  | { name: 'commentsConnection', args?: QueryCommentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'postTag', args?: QueryPostTagArgs[] | false, alias?: string  } 
  | { name: 'postTags', args?: QueryPostTagsArgs[] | false, alias?: string  } 
  | { name: 'postTagsConnection', args?: QueryPostTagsConnectionArgs[] | false, alias?: string  } 
  | { name: 'postTagContent', args?: QueryPostTagContentArgs[] | false, alias?: string  } 
  | { name: 'postTagContents', args?: QueryPostTagContentsArgs[] | false, alias?: string  } 
  | { name: 'postTagContentsConnection', args?: QueryPostTagContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'postTagLng', args?: QueryPostTagLngArgs[] | false, alias?: string  } 
  | { name: 'postTagLngs', args?: QueryPostTagLngsArgs[] | false, alias?: string  } 
  | { name: 'postTagLngsConnection', args?: QueryPostTagLngsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'profile', args?: QueryProfileArgs[] | false, alias?: string  } 
  | { name: 'profiles', args?: QueryProfilesArgs[] | false, alias?: string  } 
  | { name: 'profilesConnection', args?: QueryProfilesConnectionArgs[] | false, alias?: string  } 
  | { name: 'avatar', args?: QueryAvatarArgs[] | false, alias?: string  } 
  | { name: 'avatars', args?: QueryAvatarsArgs[] | false, alias?: string  } 
  | { name: 'avatarsConnection', args?: QueryAvatarsConnectionArgs[] | false, alias?: string  } 
  | { name: 'project', args?: QueryProjectArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: QueryProjectsArgs[] | false, alias?: string  } 
  | { name: 'projectsConnection', args?: QueryProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectContent', args?: QueryProjectContentArgs[] | false, alias?: string  } 
  | { name: 'projectContents', args?: QueryProjectContentsArgs[] | false, alias?: string  } 
  | { name: 'projectContentsConnection', args?: QueryProjectContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectLng', args?: QueryProjectLngArgs[] | false, alias?: string  } 
  | { name: 'projectLngs', args?: QueryProjectLngsArgs[] | false, alias?: string  } 
  | { name: 'projectLngsConnection', args?: QueryProjectLngsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectTag', args?: QueryProjectTagArgs[] | false, alias?: string  } 
  | { name: 'projectTags', args?: QueryProjectTagsArgs[] | false, alias?: string  } 
  | { name: 'projectTagsConnection', args?: QueryProjectTagsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectTagContent', args?: QueryProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'projectTagContents', args?: QueryProjectTagContentsArgs[] | false, alias?: string  } 
  | { name: 'projectTagContentsConnection', args?: QueryProjectTagContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectTagLng', args?: QueryProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'projectTagLngs', args?: QueryProjectTagLngsArgs[] | false, alias?: string  } 
  | { name: 'projectTagLngsConnection', args?: QueryProjectTagLngsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectCategory', args?: QueryProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'projectCategories', args?: QueryProjectCategoriesArgs[] | false, alias?: string  } 
  | { name: 'projectCategoriesConnection', args?: QueryProjectCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryContent', args?: QueryProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryContents', args?: QueryProjectCategoryContentsArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryContentsConnection', args?: QueryProjectCategoryContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryLng', args?: QueryProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryLngs', args?: QueryProjectCategoryLngsArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryLngsConnection', args?: QueryProjectCategoryLngsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectAlbum', args?: QueryProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'projectAlbums', args?: QueryProjectAlbumsArgs[] | false, alias?: string  } 
  | { name: 'projectAlbumsConnection', args?: QueryProjectAlbumsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectImage', args?: QueryProjectImageArgs[] | false, alias?: string  } 
  | { name: 'projectImages', args?: QueryProjectImagesArgs[] | false, alias?: string  } 
  | { name: 'projectImagesConnection', args?: QueryProjectImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectImageContent', args?: QueryProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'projectImageContents', args?: QueryProjectImageContentsArgs[] | false, alias?: string  } 
  | { name: 'projectImageContentsConnection', args?: QueryProjectImageContentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectImageLng', args?: QueryProjectImageLngArgs[] | false, alias?: string  } 
  | { name: 'projectImageLngs', args?: QueryProjectImageLngsArgs[] | false, alias?: string  } 
  | { name: 'projectImageLngsConnection', args?: QueryProjectImageLngsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'postContent'
  | 'postContents'
  | 'postContentsConnection'
  | 'postLng'
  | 'postLngs'
  | 'postLngsConnection'
  | 'comment'
  | 'comments'
  | 'commentsConnection'
  | 'postTag'
  | 'postTags'
  | 'postTagsConnection'
  | 'postTagContent'
  | 'postTagContents'
  | 'postTagContentsConnection'
  | 'postTagLng'
  | 'postTagLngs'
  | 'postTagLngsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'profile'
  | 'profiles'
  | 'profilesConnection'
  | 'avatar'
  | 'avatars'
  | 'avatarsConnection'
  | 'project'
  | 'projects'
  | 'projectsConnection'
  | 'projectContent'
  | 'projectContents'
  | 'projectContentsConnection'
  | 'projectLng'
  | 'projectLngs'
  | 'projectLngsConnection'
  | 'projectTag'
  | 'projectTags'
  | 'projectTagsConnection'
  | 'projectTagContent'
  | 'projectTagContents'
  | 'projectTagContentsConnection'
  | 'projectTagLng'
  | 'projectTagLngs'
  | 'projectTagLngsConnection'
  | 'projectCategory'
  | 'projectCategories'
  | 'projectCategoriesConnection'
  | 'projectCategoryContent'
  | 'projectCategoryContents'
  | 'projectCategoryContentsConnection'
  | 'projectCategoryLng'
  | 'projectCategoryLngs'
  | 'projectCategoryLngsConnection'
  | 'projectAlbum'
  | 'projectAlbums'
  | 'projectAlbumsConnection'
  | 'projectImage'
  | 'projectImages'
  | 'projectImagesConnection'
  | 'projectImageContent'
  | 'projectImageContents'
  | 'projectImageContentsConnection'
  | 'projectImageLng'
  | 'projectImageLngs'
  | 'projectImageLngsConnection'


type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostContentArgs =
  | 'where'
type QueryPostContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostLngArgs =
  | 'where'
type QueryPostLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCommentArgs =
  | 'where'
type QueryCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCommentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagArgs =
  | 'where'
type QueryPostTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagContentArgs =
  | 'where'
type QueryPostTagContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagLngArgs =
  | 'where'
type QueryPostTagLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostTagLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProfileArgs =
  | 'where'
type QueryProfilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProfilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAvatarArgs =
  | 'where'
type QueryAvatarsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAvatarsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectArgs =
  | 'where'
type QueryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectContentArgs =
  | 'where'
type QueryProjectContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectLngArgs =
  | 'where'
type QueryProjectLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagArgs =
  | 'where'
type QueryProjectTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagContentArgs =
  | 'where'
type QueryProjectTagContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagLngArgs =
  | 'where'
type QueryProjectTagLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectTagLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoryArgs =
  | 'where'
type QueryProjectCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoryContentArgs =
  | 'where'
type QueryProjectCategoryContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoryContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoryLngArgs =
  | 'where'
type QueryProjectCategoryLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectCategoryLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectAlbumArgs =
  | 'where'
type QueryProjectAlbumsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectAlbumsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImageArgs =
  | 'where'
type QueryProjectImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImageContentArgs =
  | 'where'
type QueryProjectImageContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImageContentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImageLngArgs =
  | 'where'
type QueryProjectImageLngsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectImageLngsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  postContent: {
    type: 'PostContent'
    args: Record<QueryPostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent | null> | prisma.PostContent | null
  }
  postContents: {
    type: 'PostContent'
    args: Record<QueryPostContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostContentWhereInput | null, orderBy?: prisma.PostContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent[]> | prisma.PostContent[]
  }
  postContentsConnection: {
    type: 'PostContentConnection'
    args: Record<QueryPostContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostContentWhereInput | null, orderBy?: prisma.PostContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContentConnection> | prisma.PostContentConnection
  }
  postLng: {
    type: 'PostLng'
    args: Record<QueryPostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng | null> | prisma.PostLng | null
  }
  postLngs: {
    type: 'PostLng'
    args: Record<QueryPostLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostLngWhereInput | null, orderBy?: prisma.PostLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng[]> | prisma.PostLng[]
  }
  postLngsConnection: {
    type: 'PostLngConnection'
    args: Record<QueryPostLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostLngWhereInput | null, orderBy?: prisma.PostLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLngConnection> | prisma.PostLngConnection
  }
  comment: {
    type: 'Comment'
    args: Record<QueryCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  comments: {
    type: 'Comment'
    args: Record<QueryCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  commentsConnection: {
    type: 'CommentConnection'
    args: Record<QueryCommentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentConnection> | prisma.CommentConnection
  }
  postTag: {
    type: 'PostTag'
    args: Record<QueryPostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag | null> | prisma.PostTag | null
  }
  postTags: {
    type: 'PostTag'
    args: Record<QueryPostTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagWhereInput | null, orderBy?: prisma.PostTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag[]> | prisma.PostTag[]
  }
  postTagsConnection: {
    type: 'PostTagConnection'
    args: Record<QueryPostTagsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagWhereInput | null, orderBy?: prisma.PostTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagConnection> | prisma.PostTagConnection
  }
  postTagContent: {
    type: 'PostTagContent'
    args: Record<QueryPostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent | null> | prisma.PostTagContent | null
  }
  postTagContents: {
    type: 'PostTagContent'
    args: Record<QueryPostTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagContentWhereInput | null, orderBy?: prisma.PostTagContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent[]> | prisma.PostTagContent[]
  }
  postTagContentsConnection: {
    type: 'PostTagContentConnection'
    args: Record<QueryPostTagContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagContentWhereInput | null, orderBy?: prisma.PostTagContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContentConnection> | prisma.PostTagContentConnection
  }
  postTagLng: {
    type: 'PostTagLng'
    args: Record<QueryPostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng | null> | prisma.PostTagLng | null
  }
  postTagLngs: {
    type: 'PostTagLng'
    args: Record<QueryPostTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagLngWhereInput | null, orderBy?: prisma.PostTagLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng[]> | prisma.PostTagLng[]
  }
  postTagLngsConnection: {
    type: 'PostTagLngConnection'
    args: Record<QueryPostTagLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostTagLngWhereInput | null, orderBy?: prisma.PostTagLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLngConnection> | prisma.PostTagLngConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  profile: {
    type: 'Profile'
    args: Record<QueryProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  profiles: {
    type: 'Profile'
    args: Record<QueryProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProfileWhereInput | null, orderBy?: prisma.ProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile[]> | prisma.Profile[]
  }
  profilesConnection: {
    type: 'ProfileConnection'
    args: Record<QueryProfilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProfileWhereInput | null, orderBy?: prisma.ProfileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileConnection> | prisma.ProfileConnection
  }
  avatar: {
    type: 'Avatar'
    args: Record<QueryAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  avatars: {
    type: 'Avatar'
    args: Record<QueryAvatarsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AvatarWhereInput | null, orderBy?: prisma.AvatarOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar[]> | prisma.Avatar[]
  }
  avatarsConnection: {
    type: 'AvatarConnection'
    args: Record<QueryAvatarsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AvatarWhereInput | null, orderBy?: prisma.AvatarOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarConnection> | prisma.AvatarConnection
  }
  project: {
    type: 'Project'
    args: Record<QueryProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  projects: {
    type: 'Project'
    args: Record<QueryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  projectsConnection: {
    type: 'ProjectConnection'
    args: Record<QueryProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectConnection> | prisma.ProjectConnection
  }
  projectContent: {
    type: 'ProjectContent'
    args: Record<QueryProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent | null> | prisma.ProjectContent | null
  }
  projectContents: {
    type: 'ProjectContent'
    args: Record<QueryProjectContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectContentWhereInput | null, orderBy?: prisma.ProjectContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent[]> | prisma.ProjectContent[]
  }
  projectContentsConnection: {
    type: 'ProjectContentConnection'
    args: Record<QueryProjectContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectContentWhereInput | null, orderBy?: prisma.ProjectContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContentConnection> | prisma.ProjectContentConnection
  }
  projectLng: {
    type: 'ProjectLng'
    args: Record<QueryProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng | null> | prisma.ProjectLng | null
  }
  projectLngs: {
    type: 'ProjectLng'
    args: Record<QueryProjectLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectLngWhereInput | null, orderBy?: prisma.ProjectLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng[]> | prisma.ProjectLng[]
  }
  projectLngsConnection: {
    type: 'ProjectLngConnection'
    args: Record<QueryProjectLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectLngWhereInput | null, orderBy?: prisma.ProjectLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLngConnection> | prisma.ProjectLngConnection
  }
  projectTag: {
    type: 'ProjectTag'
    args: Record<QueryProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag | null> | prisma.ProjectTag | null
  }
  projectTags: {
    type: 'ProjectTag'
    args: Record<QueryProjectTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagWhereInput | null, orderBy?: prisma.ProjectTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag[]> | prisma.ProjectTag[]
  }
  projectTagsConnection: {
    type: 'ProjectTagConnection'
    args: Record<QueryProjectTagsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagWhereInput | null, orderBy?: prisma.ProjectTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagConnection> | prisma.ProjectTagConnection
  }
  projectTagContent: {
    type: 'ProjectTagContent'
    args: Record<QueryProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent | null> | prisma.ProjectTagContent | null
  }
  projectTagContents: {
    type: 'ProjectTagContent'
    args: Record<QueryProjectTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagContentWhereInput | null, orderBy?: prisma.ProjectTagContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent[]> | prisma.ProjectTagContent[]
  }
  projectTagContentsConnection: {
    type: 'ProjectTagContentConnection'
    args: Record<QueryProjectTagContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagContentWhereInput | null, orderBy?: prisma.ProjectTagContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContentConnection> | prisma.ProjectTagContentConnection
  }
  projectTagLng: {
    type: 'ProjectTagLng'
    args: Record<QueryProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng | null> | prisma.ProjectTagLng | null
  }
  projectTagLngs: {
    type: 'ProjectTagLng'
    args: Record<QueryProjectTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagLngWhereInput | null, orderBy?: prisma.ProjectTagLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng[]> | prisma.ProjectTagLng[]
  }
  projectTagLngsConnection: {
    type: 'ProjectTagLngConnection'
    args: Record<QueryProjectTagLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectTagLngWhereInput | null, orderBy?: prisma.ProjectTagLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLngConnection> | prisma.ProjectTagLngConnection
  }
  projectCategory: {
    type: 'ProjectCategory'
    args: Record<QueryProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory | null> | prisma.ProjectCategory | null
  }
  projectCategories: {
    type: 'ProjectCategory'
    args: Record<QueryProjectCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryWhereInput | null, orderBy?: prisma.ProjectCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory[]> | prisma.ProjectCategory[]
  }
  projectCategoriesConnection: {
    type: 'ProjectCategoryConnection'
    args: Record<QueryProjectCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryWhereInput | null, orderBy?: prisma.ProjectCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryConnection> | prisma.ProjectCategoryConnection
  }
  projectCategoryContent: {
    type: 'ProjectCategoryContent'
    args: Record<QueryProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectCategoryContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent | null> | prisma.ProjectCategoryContent | null
  }
  projectCategoryContents: {
    type: 'ProjectCategoryContent'
    args: Record<QueryProjectCategoryContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryContentWhereInput | null, orderBy?: prisma.ProjectCategoryContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent[]> | prisma.ProjectCategoryContent[]
  }
  projectCategoryContentsConnection: {
    type: 'ProjectCategoryContentConnection'
    args: Record<QueryProjectCategoryContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryContentWhereInput | null, orderBy?: prisma.ProjectCategoryContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContentConnection> | prisma.ProjectCategoryContentConnection
  }
  projectCategoryLng: {
    type: 'ProjectCategoryLng'
    args: Record<QueryProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectCategoryLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng | null> | prisma.ProjectCategoryLng | null
  }
  projectCategoryLngs: {
    type: 'ProjectCategoryLng'
    args: Record<QueryProjectCategoryLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryLngWhereInput | null, orderBy?: prisma.ProjectCategoryLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng[]> | prisma.ProjectCategoryLng[]
  }
  projectCategoryLngsConnection: {
    type: 'ProjectCategoryLngConnection'
    args: Record<QueryProjectCategoryLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectCategoryLngWhereInput | null, orderBy?: prisma.ProjectCategoryLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLngConnection> | prisma.ProjectCategoryLngConnection
  }
  projectAlbum: {
    type: 'ProjectAlbum'
    args: Record<QueryProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectAlbumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum | null> | prisma.ProjectAlbum | null
  }
  projectAlbums: {
    type: 'ProjectAlbum'
    args: Record<QueryProjectAlbumsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectAlbumWhereInput | null, orderBy?: prisma.ProjectAlbumOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum[]> | prisma.ProjectAlbum[]
  }
  projectAlbumsConnection: {
    type: 'ProjectAlbumConnection'
    args: Record<QueryProjectAlbumsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectAlbumWhereInput | null, orderBy?: prisma.ProjectAlbumOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbumConnection> | prisma.ProjectAlbumConnection
  }
  projectImage: {
    type: 'ProjectImage'
    args: Record<QueryProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage | null> | prisma.ProjectImage | null
  }
  projectImages: {
    type: 'ProjectImage'
    args: Record<QueryProjectImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageWhereInput | null, orderBy?: prisma.ProjectImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage[]> | prisma.ProjectImage[]
  }
  projectImagesConnection: {
    type: 'ProjectImageConnection'
    args: Record<QueryProjectImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageWhereInput | null, orderBy?: prisma.ProjectImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageConnection> | prisma.ProjectImageConnection
  }
  projectImageContent: {
    type: 'ProjectImageContent'
    args: Record<QueryProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectImageContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent | null> | prisma.ProjectImageContent | null
  }
  projectImageContents: {
    type: 'ProjectImageContent'
    args: Record<QueryProjectImageContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageContentWhereInput | null, orderBy?: prisma.ProjectImageContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent[]> | prisma.ProjectImageContent[]
  }
  projectImageContentsConnection: {
    type: 'ProjectImageContentConnection'
    args: Record<QueryProjectImageContentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageContentWhereInput | null, orderBy?: prisma.ProjectImageContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContentConnection> | prisma.ProjectImageContentConnection
  }
  projectImageLng: {
    type: 'ProjectImageLng'
    args: Record<QueryProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectImageLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng | null> | prisma.ProjectImageLng | null
  }
  projectImageLngs: {
    type: 'ProjectImageLng'
    args: Record<QueryProjectImageLngsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageLngWhereInput | null, orderBy?: prisma.ProjectImageLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng[]> | prisma.ProjectImageLng[]
  }
  projectImageLngsConnection: {
    type: 'ProjectImageLngConnection'
    args: Record<QueryProjectImageLngsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectImageLngWhereInput | null, orderBy?: prisma.ProjectImageLngOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLngConnection> | prisma.ProjectImageLngConnection
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'isPublished', args?: [] | false, alias?: string  } 
  | { name: 'imageSrc', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: PostContentsArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: PostTagsArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: PostCommentsArgs[] | false, alias?: string  } 
  | { name: 'likes', args?: [] | false, alias?: string  } 
  | { name: 'likedBy', args?: PostLikedByArgs[] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'author'
  | 'slug'
  | 'isPublished'
  | 'imageSrc'
  | 'contents'
  | 'tags'
  | 'comments'
  | 'likes'
  | 'likedBy'


type PostContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PostTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PostCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PostLikedByArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PostFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPublished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageSrc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contents: {
    type: 'PostContent'
    args: Record<PostContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: { where?: PostContentWhereInput | null, orderBy?: prisma.PostContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent[]> | prisma.PostContent[]
  }
  tags: {
    type: 'PostTag'
    args: Record<PostTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: { where?: PostTagWhereInput | null, orderBy?: prisma.PostTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag[]> | prisma.PostTag[]
  }
  comments: {
    type: 'Comment'
    args: Record<PostCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  likes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  likedBy: {
    type: 'User'
    args: Record<PostLikedByArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 
  | { name: 'postLikes', args?: UserPostLikesArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: UserProjectsArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: UserCommentsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'
  | 'role'
  | 'profile'
  | 'posts'
  | 'postLikes'
  | 'projects'
  | 'comments'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserPostLikesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  profile: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postLikes: {
    type: 'Post'
    args: Record<UserPostLikesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  projects: {
    type: 'Project'
    args: Record<UserProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  comments: {
    type: 'Comment'
    args: Record<UserCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
}
  

// Types for Profile

type ProfileObject =
  | ProfileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 
  | { name: 'avatar', args?: [] | false, alias?: string  } 

type ProfileFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'user'
  | 'bio'
  | 'avatar'



  

export interface ProfileFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Profile">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  avatar: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Profile">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
}
  

// Types for Avatar

type AvatarObject =
  | AvatarFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publicId', args?: [] | false, alias?: string  } 
  | { name: 'src', args?: [] | false, alias?: string  } 

type AvatarFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publicId'
  | 'src'



  

export interface AvatarFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  src: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Project

type ProjectObject =
  | ProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'album', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: ProjectContentsArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: ProjectTagsArgs[] | false, alias?: string  } 

type ProjectFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'slug'
  | 'category'
  | 'author'
  | 'album'
  | 'contents'
  | 'tags'


type ProjectContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProjectTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'ProjectCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory> | prisma.ProjectCategory
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  album: {
    type: 'ProjectAlbum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum> | prisma.ProjectAlbum
  }
  contents: {
    type: 'ProjectContent'
    args: Record<ProjectContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: ProjectContentWhereInput | null, orderBy?: prisma.ProjectContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent[]> | prisma.ProjectContent[]
  }
  tags: {
    type: 'ProjectTag'
    args: Record<ProjectTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: ProjectTagWhereInput | null, orderBy?: prisma.ProjectTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag[]> | prisma.ProjectTag[]
  }
}
  

// Types for ProjectCategory

type ProjectCategoryObject =
  | ProjectCategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: ProjectCategoryContentsArgs[] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: ProjectCategoryProjectsArgs[] | false, alias?: string  } 

type ProjectCategoryFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'contents'
  | 'slug'
  | 'image'
  | 'projects'


type ProjectCategoryContentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProjectCategoryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectCategoryFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contents: {
    type: 'ProjectCategoryContent'
    args: Record<ProjectCategoryContentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategory">,
      args: { where?: ProjectCategoryContentWhereInput | null, orderBy?: prisma.ProjectCategoryContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent[]> | prisma.ProjectCategoryContent[]
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'Project'
    args: Record<ProjectCategoryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategory">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
}
  

// Types for ProjectCategoryContent

type ProjectCategoryContentObject =
  | ProjectCategoryContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'imageAlt', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 

type ProjectCategoryContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'category'
  | 'language'
  | 'title'
  | 'text'
  | 'imageAlt'
  | 'metaTitle'
  | 'metaDescription'



  

export interface ProjectCategoryContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'ProjectCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory> | prisma.ProjectCategory
  }
  language: {
    type: 'ProjectCategoryLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng> | prisma.ProjectCategoryLng
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageAlt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectCategoryLng

type ProjectCategoryLngObject =
  | ProjectCategoryLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'categories', args?: ProjectCategoryLngCategoriesArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectCategoryLngFields =
  | 'id'
  | 'categories'
  | 'country'
  | 'locale'


type ProjectCategoryLngCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectCategoryLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  categories: {
    type: 'ProjectCategoryContent'
    args: Record<ProjectCategoryLngCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLng">,
      args: { where?: ProjectCategoryContentWhereInput | null, orderBy?: prisma.ProjectCategoryContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent[]> | prisma.ProjectCategoryContent[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectAlbum

type ProjectAlbumObject =
  | ProjectAlbumFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: ProjectAlbumImagesArgs[] | false, alias?: string  } 

type ProjectAlbumFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'project'
  | 'images'


type ProjectAlbumImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectAlbumFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbum">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  images: {
    type: 'ProjectImage'
    args: Record<ProjectAlbumImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbum">,
      args: { where?: ProjectImageWhereInput | null, orderBy?: prisma.ProjectImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage[]> | prisma.ProjectImage[]
  }
}
  

// Types for ProjectImage

type ProjectImageObject =
  | ProjectImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'album', args?: [] | false, alias?: string  } 
  | { name: 'publicId', args?: [] | false, alias?: string  } 
  | { name: 'src', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: [] | false, alias?: string  } 

type ProjectImageFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'album'
  | 'publicId'
  | 'src'
  | 'contents'



  

export interface ProjectImageFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  album: {
    type: 'ProjectAlbum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImage">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum> | prisma.ProjectAlbum
  }
  publicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  src: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contents: {
    type: 'ProjectImageContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImage">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent> | prisma.ProjectImageContent
  }
}
  

// Types for ProjectImageContent

type ProjectImageContentObject =
  | ProjectImageContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'alt', args?: [] | false, alias?: string  } 

type ProjectImageContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'image'
  | 'language'
  | 'alt'



  

export interface ProjectImageContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'ProjectImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage> | prisma.ProjectImage
  }
  language: {
    type: 'ProjectImageLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng> | prisma.ProjectImageLng
  }
  alt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageLng

type ProjectImageLngObject =
  | ProjectImageLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: ProjectImageLngImagesArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectImageLngFields =
  | 'id'
  | 'images'
  | 'country'
  | 'locale'


type ProjectImageLngImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectImageLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  images: {
    type: 'ProjectImageContent'
    args: Record<ProjectImageLngImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLng">,
      args: { where?: ProjectImageContentWhereInput | null, orderBy?: prisma.ProjectImageContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent[]> | prisma.ProjectImageContent[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectContent

type ProjectContentObject =
  | ProjectContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 

type ProjectContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'project'
  | 'language'
  | 'title'
  | 'text'
  | 'metaTitle'
  | 'metaDescription'
  | 'isActive'



  

export interface ProjectContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  language: {
    type: 'ProjectLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng> | prisma.ProjectLng
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectLng

type ProjectLngObject =
  | ProjectLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: ProjectLngProjectsArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectLngFields =
  | 'id'
  | 'projects'
  | 'country'
  | 'locale'


type ProjectLngProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'ProjectContent'
    args: Record<ProjectLngProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLng">,
      args: { where?: ProjectContentWhereInput | null, orderBy?: prisma.ProjectContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent[]> | prisma.ProjectContent[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectTag

type ProjectTagObject =
  | ProjectTagFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 

type ProjectTagFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'language'
  | 'contents'
  | 'title'
  | 'color'



  

export interface ProjectTagFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  language: {
    type: 'ProjectTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTag">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng> | prisma.ProjectTagLng
  }
  contents: {
    type: 'ProjectTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTag">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent> | prisma.ProjectTagContent
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectTagLng

type ProjectTagLngObject =
  | ProjectTagLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: ProjectTagLngTagsArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectTagLngFields =
  | 'id'
  | 'tags'
  | 'country'
  | 'locale'


type ProjectTagLngTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectTagLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tags: {
    type: 'ProjectTag'
    args: Record<ProjectTagLngTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLng">,
      args: { where?: ProjectTagWhereInput | null, orderBy?: prisma.ProjectTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag[]> | prisma.ProjectTag[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectTagContent

type ProjectTagContentObject =
  | ProjectTagContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type ProjectTagContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'tag'
  | 'title'



  

export interface ProjectTagContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'ProjectTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag> | prisma.ProjectTag
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Comment

type CommentObject =
  | CommentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'post', args?: [] | false, alias?: string  } 

type CommentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'author'
  | 'post'



  

export interface CommentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  post: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
}
  

// Types for PostContent

type PostContentObject =
  | PostContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 
  | { name: 'imageAlt', args?: [] | false, alias?: string  } 
  | { name: 'post', args?: [] | false, alias?: string  } 

type PostContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'language'
  | 'title'
  | 'text'
  | 'metaTitle'
  | 'metaDescription'
  | 'imageAlt'
  | 'post'



  

export interface PostContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  language: {
    type: 'PostLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng> | prisma.PostLng
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  imageAlt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  post: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
}
  

// Types for PostLng

type PostLngObject =
  | PostLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: PostLngPostsArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type PostLngFields =
  | 'id'
  | 'posts'
  | 'country'
  | 'locale'


type PostLngPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PostLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posts: {
    type: 'PostContent'
    args: Record<PostLngPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostLng">,
      args: { where?: PostContentWhereInput | null, orderBy?: prisma.PostContentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent[]> | prisma.PostContent[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PostTag

type PostTagObject =
  | PostTagFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 
  | { name: 'language', args?: [] | false, alias?: string  } 
  | { name: 'contents', args?: [] | false, alias?: string  } 

type PostTagFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'color'
  | 'language'
  | 'contents'



  

export interface PostTagFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  language: {
    type: 'PostTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTag">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng> | prisma.PostTagLng
  }
  contents: {
    type: 'PostTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTag">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent> | prisma.PostTagContent
  }
}
  

// Types for PostTagLng

type PostTagLngObject =
  | PostTagLngFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: PostTagLngTagsArgs[] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type PostTagLngFields =
  | 'id'
  | 'tags'
  | 'country'
  | 'locale'


type PostTagLngTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PostTagLngFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tags: {
    type: 'PostTag'
    args: Record<PostTagLngTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLng">,
      args: { where?: PostTagWhereInput | null, orderBy?: prisma.PostTagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag[]> | prisma.PostTag[]
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagContent

type PostTagContentObject =
  | PostTagContentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type PostTagContentFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'tag'
  | 'title'



  

export interface PostTagContentFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'PostTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag> | prisma.PostTag
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostContentConnection

type PostContentConnectionObject =
  | PostContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContentEdge[]> | prisma.PostContentEdge[]
  }
  aggregate: {
    type: 'AggregatePostContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePostContent> | prisma.AggregatePostContent
  }
}
  

// Types for PostContentEdge

type PostContentEdgeObject =
  | PostContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostContentEdgeFieldDetails {
  node: {
    type: 'PostContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent> | prisma.PostContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePostContent

type AggregatePostContentObject =
  | AggregatePostContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostContentFields =
  | 'count'



  

export interface AggregatePostContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostLngConnection

type PostLngConnectionObject =
  | PostLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLngEdge[]> | prisma.PostLngEdge[]
  }
  aggregate: {
    type: 'AggregatePostLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePostLng> | prisma.AggregatePostLng
  }
}
  

// Types for PostLngEdge

type PostLngEdgeObject =
  | PostLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostLngEdgeFieldDetails {
  node: {
    type: 'PostLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng> | prisma.PostLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePostLng

type AggregatePostLngObject =
  | AggregatePostLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostLngFields =
  | 'count'



  

export interface AggregatePostLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CommentConnection

type CommentConnectionObject =
  | CommentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CommentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CommentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CommentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentEdge[]> | prisma.CommentEdge[]
  }
  aggregate: {
    type: 'AggregateComment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateComment> | prisma.AggregateComment
  }
}
  

// Types for CommentEdge

type CommentEdgeObject =
  | CommentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CommentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CommentEdgeFieldDetails {
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateComment

type AggregateCommentObject =
  | AggregateCommentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCommentFields =
  | 'count'



  

export interface AggregateCommentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagConnection

type PostTagConnectionObject =
  | PostTagConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostTagConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostTagConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostTagEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagEdge[]> | prisma.PostTagEdge[]
  }
  aggregate: {
    type: 'AggregatePostTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePostTag> | prisma.AggregatePostTag
  }
}
  

// Types for PostTagEdge

type PostTagEdgeObject =
  | PostTagEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostTagEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostTagEdgeFieldDetails {
  node: {
    type: 'PostTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag> | prisma.PostTag
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePostTag

type AggregatePostTagObject =
  | AggregatePostTagFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostTagFields =
  | 'count'



  

export interface AggregatePostTagFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagContentConnection

type PostTagContentConnectionObject =
  | PostTagContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostTagContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostTagContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostTagContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContentEdge[]> | prisma.PostTagContentEdge[]
  }
  aggregate: {
    type: 'AggregatePostTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePostTagContent> | prisma.AggregatePostTagContent
  }
}
  

// Types for PostTagContentEdge

type PostTagContentEdgeObject =
  | PostTagContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostTagContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostTagContentEdgeFieldDetails {
  node: {
    type: 'PostTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent> | prisma.PostTagContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePostTagContent

type AggregatePostTagContentObject =
  | AggregatePostTagContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostTagContentFields =
  | 'count'



  

export interface AggregatePostTagContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagLngConnection

type PostTagLngConnectionObject =
  | PostTagLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostTagLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostTagLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostTagLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLngEdge[]> | prisma.PostTagLngEdge[]
  }
  aggregate: {
    type: 'AggregatePostTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePostTagLng> | prisma.AggregatePostTagLng
  }
}
  

// Types for PostTagLngEdge

type PostTagLngEdgeObject =
  | PostTagLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostTagLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostTagLngEdgeFieldDetails {
  node: {
    type: 'PostTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng> | prisma.PostTagLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePostTagLng

type AggregatePostTagLngObject =
  | AggregatePostTagLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostTagLngFields =
  | 'count'



  

export interface AggregatePostTagLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProfileConnection

type ProfileConnectionObject =
  | ProfileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProfileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProfileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProfileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileEdge[]> | prisma.ProfileEdge[]
  }
  aggregate: {
    type: 'AggregateProfile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProfile> | prisma.AggregateProfile
  }
}
  

// Types for ProfileEdge

type ProfileEdgeObject =
  | ProfileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProfileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProfileEdgeFieldDetails {
  node: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProfile

type AggregateProfileObject =
  | AggregateProfileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProfileFields =
  | 'count'



  

export interface AggregateProfileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AvatarConnection

type AvatarConnectionObject =
  | AvatarConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AvatarConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AvatarConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AvatarEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarEdge[]> | prisma.AvatarEdge[]
  }
  aggregate: {
    type: 'AggregateAvatar'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAvatar> | prisma.AggregateAvatar
  }
}
  

// Types for AvatarEdge

type AvatarEdgeObject =
  | AvatarEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AvatarEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AvatarEdgeFieldDetails {
  node: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAvatar

type AggregateAvatarObject =
  | AggregateAvatarFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAvatarFields =
  | 'count'



  

export interface AggregateAvatarFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectConnection

type ProjectConnectionObject =
  | ProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectEdge[]> | prisma.ProjectEdge[]
  }
  aggregate: {
    type: 'AggregateProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProject> | prisma.AggregateProject
  }
}
  

// Types for ProjectEdge

type ProjectEdgeObject =
  | ProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectEdgeFieldDetails {
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProject

type AggregateProjectObject =
  | AggregateProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectFields =
  | 'count'



  

export interface AggregateProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectContentConnection

type ProjectContentConnectionObject =
  | ProjectContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContentEdge[]> | prisma.ProjectContentEdge[]
  }
  aggregate: {
    type: 'AggregateProjectContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectContent> | prisma.AggregateProjectContent
  }
}
  

// Types for ProjectContentEdge

type ProjectContentEdgeObject =
  | ProjectContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectContentEdgeFieldDetails {
  node: {
    type: 'ProjectContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent> | prisma.ProjectContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectContent

type AggregateProjectContentObject =
  | AggregateProjectContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectContentFields =
  | 'count'



  

export interface AggregateProjectContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectLngConnection

type ProjectLngConnectionObject =
  | ProjectLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLngEdge[]> | prisma.ProjectLngEdge[]
  }
  aggregate: {
    type: 'AggregateProjectLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectLng> | prisma.AggregateProjectLng
  }
}
  

// Types for ProjectLngEdge

type ProjectLngEdgeObject =
  | ProjectLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectLngEdgeFieldDetails {
  node: {
    type: 'ProjectLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng> | prisma.ProjectLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectLng

type AggregateProjectLngObject =
  | AggregateProjectLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectLngFields =
  | 'count'



  

export interface AggregateProjectLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectTagConnection

type ProjectTagConnectionObject =
  | ProjectTagConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectTagConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectTagConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectTagEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagEdge[]> | prisma.ProjectTagEdge[]
  }
  aggregate: {
    type: 'AggregateProjectTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectTag> | prisma.AggregateProjectTag
  }
}
  

// Types for ProjectTagEdge

type ProjectTagEdgeObject =
  | ProjectTagEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectTagEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectTagEdgeFieldDetails {
  node: {
    type: 'ProjectTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag> | prisma.ProjectTag
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectTag

type AggregateProjectTagObject =
  | AggregateProjectTagFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectTagFields =
  | 'count'



  

export interface AggregateProjectTagFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectTagContentConnection

type ProjectTagContentConnectionObject =
  | ProjectTagContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectTagContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectTagContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectTagContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContentEdge[]> | prisma.ProjectTagContentEdge[]
  }
  aggregate: {
    type: 'AggregateProjectTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectTagContent> | prisma.AggregateProjectTagContent
  }
}
  

// Types for ProjectTagContentEdge

type ProjectTagContentEdgeObject =
  | ProjectTagContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectTagContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectTagContentEdgeFieldDetails {
  node: {
    type: 'ProjectTagContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent> | prisma.ProjectTagContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectTagContent

type AggregateProjectTagContentObject =
  | AggregateProjectTagContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectTagContentFields =
  | 'count'



  

export interface AggregateProjectTagContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectTagLngConnection

type ProjectTagLngConnectionObject =
  | ProjectTagLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectTagLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectTagLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectTagLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLngEdge[]> | prisma.ProjectTagLngEdge[]
  }
  aggregate: {
    type: 'AggregateProjectTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectTagLng> | prisma.AggregateProjectTagLng
  }
}
  

// Types for ProjectTagLngEdge

type ProjectTagLngEdgeObject =
  | ProjectTagLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectTagLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectTagLngEdgeFieldDetails {
  node: {
    type: 'ProjectTagLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng> | prisma.ProjectTagLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectTagLng

type AggregateProjectTagLngObject =
  | AggregateProjectTagLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectTagLngFields =
  | 'count'



  

export interface AggregateProjectTagLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectCategoryConnection

type ProjectCategoryConnectionObject =
  | ProjectCategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectCategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectCategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectCategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryEdge[]> | prisma.ProjectCategoryEdge[]
  }
  aggregate: {
    type: 'AggregateProjectCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectCategory> | prisma.AggregateProjectCategory
  }
}
  

// Types for ProjectCategoryEdge

type ProjectCategoryEdgeObject =
  | ProjectCategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectCategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectCategoryEdgeFieldDetails {
  node: {
    type: 'ProjectCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory> | prisma.ProjectCategory
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectCategory

type AggregateProjectCategoryObject =
  | AggregateProjectCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectCategoryFields =
  | 'count'



  

export interface AggregateProjectCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectCategoryContentConnection

type ProjectCategoryContentConnectionObject =
  | ProjectCategoryContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectCategoryContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectCategoryContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectCategoryContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContentEdge[]> | prisma.ProjectCategoryContentEdge[]
  }
  aggregate: {
    type: 'AggregateProjectCategoryContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectCategoryContent> | prisma.AggregateProjectCategoryContent
  }
}
  

// Types for ProjectCategoryContentEdge

type ProjectCategoryContentEdgeObject =
  | ProjectCategoryContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectCategoryContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectCategoryContentEdgeFieldDetails {
  node: {
    type: 'ProjectCategoryContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent> | prisma.ProjectCategoryContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectCategoryContent

type AggregateProjectCategoryContentObject =
  | AggregateProjectCategoryContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectCategoryContentFields =
  | 'count'



  

export interface AggregateProjectCategoryContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectCategoryLngConnection

type ProjectCategoryLngConnectionObject =
  | ProjectCategoryLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectCategoryLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectCategoryLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectCategoryLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLngEdge[]> | prisma.ProjectCategoryLngEdge[]
  }
  aggregate: {
    type: 'AggregateProjectCategoryLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectCategoryLng> | prisma.AggregateProjectCategoryLng
  }
}
  

// Types for ProjectCategoryLngEdge

type ProjectCategoryLngEdgeObject =
  | ProjectCategoryLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectCategoryLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectCategoryLngEdgeFieldDetails {
  node: {
    type: 'ProjectCategoryLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng> | prisma.ProjectCategoryLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectCategoryLng

type AggregateProjectCategoryLngObject =
  | AggregateProjectCategoryLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectCategoryLngFields =
  | 'count'



  

export interface AggregateProjectCategoryLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectAlbumConnection

type ProjectAlbumConnectionObject =
  | ProjectAlbumConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectAlbumConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectAlbumConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectAlbumEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbumEdge[]> | prisma.ProjectAlbumEdge[]
  }
  aggregate: {
    type: 'AggregateProjectAlbum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbumConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectAlbum> | prisma.AggregateProjectAlbum
  }
}
  

// Types for ProjectAlbumEdge

type ProjectAlbumEdgeObject =
  | ProjectAlbumEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectAlbumEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectAlbumEdgeFieldDetails {
  node: {
    type: 'ProjectAlbum'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbumEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum> | prisma.ProjectAlbum
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectAlbum

type AggregateProjectAlbumObject =
  | AggregateProjectAlbumFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectAlbumFields =
  | 'count'



  

export interface AggregateProjectAlbumFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageConnection

type ProjectImageConnectionObject =
  | ProjectImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageEdge[]> | prisma.ProjectImageEdge[]
  }
  aggregate: {
    type: 'AggregateProjectImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectImage> | prisma.AggregateProjectImage
  }
}
  

// Types for ProjectImageEdge

type ProjectImageEdgeObject =
  | ProjectImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectImageEdgeFieldDetails {
  node: {
    type: 'ProjectImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage> | prisma.ProjectImage
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectImage

type AggregateProjectImageObject =
  | AggregateProjectImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectImageFields =
  | 'count'



  

export interface AggregateProjectImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageContentConnection

type ProjectImageContentConnectionObject =
  | ProjectImageContentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectImageContentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectImageContentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectImageContentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContentEdge[]> | prisma.ProjectImageContentEdge[]
  }
  aggregate: {
    type: 'AggregateProjectImageContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectImageContent> | prisma.AggregateProjectImageContent
  }
}
  

// Types for ProjectImageContentEdge

type ProjectImageContentEdgeObject =
  | ProjectImageContentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectImageContentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectImageContentEdgeFieldDetails {
  node: {
    type: 'ProjectImageContent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent> | prisma.ProjectImageContent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectImageContent

type AggregateProjectImageContentObject =
  | AggregateProjectImageContentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectImageContentFields =
  | 'count'



  

export interface AggregateProjectImageContentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageLngConnection

type ProjectImageLngConnectionObject =
  | ProjectImageLngConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectImageLngConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectImageLngConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectImageLngEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLngEdge[]> | prisma.ProjectImageLngEdge[]
  }
  aggregate: {
    type: 'AggregateProjectImageLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLngConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectImageLng> | prisma.AggregateProjectImageLng
  }
}
  

// Types for ProjectImageLngEdge

type ProjectImageLngEdgeObject =
  | ProjectImageLngEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectImageLngEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectImageLngEdgeFieldDetails {
  node: {
    type: 'ProjectImageLng'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLngEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng> | prisma.ProjectImageLng
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectImageLng

type AggregateProjectImageLngObject =
  | AggregateProjectImageLngFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectImageLngFields =
  | 'count'



  

export interface AggregateProjectImageLngFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createPostContent', args?: MutationCreatePostContentArgs[] | false, alias?: string  } 
  | { name: 'updatePostContent', args?: MutationUpdatePostContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyPostContents', args?: MutationUpdateManyPostContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertPostContent', args?: MutationUpsertPostContentArgs[] | false, alias?: string  } 
  | { name: 'deletePostContent', args?: MutationDeletePostContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPostContents', args?: MutationDeleteManyPostContentsArgs[] | false, alias?: string  } 
  | { name: 'createPostLng', args?: MutationCreatePostLngArgs[] | false, alias?: string  } 
  | { name: 'updatePostLng', args?: MutationUpdatePostLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyPostLngs', args?: MutationUpdateManyPostLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertPostLng', args?: MutationUpsertPostLngArgs[] | false, alias?: string  } 
  | { name: 'deletePostLng', args?: MutationDeletePostLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPostLngs', args?: MutationDeleteManyPostLngsArgs[] | false, alias?: string  } 
  | { name: 'createComment', args?: MutationCreateCommentArgs[] | false, alias?: string  } 
  | { name: 'updateComment', args?: MutationUpdateCommentArgs[] | false, alias?: string  } 
  | { name: 'upsertComment', args?: MutationUpsertCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteComment', args?: MutationDeleteCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyComments', args?: MutationDeleteManyCommentsArgs[] | false, alias?: string  } 
  | { name: 'createPostTag', args?: MutationCreatePostTagArgs[] | false, alias?: string  } 
  | { name: 'updatePostTag', args?: MutationUpdatePostTagArgs[] | false, alias?: string  } 
  | { name: 'updateManyPostTags', args?: MutationUpdateManyPostTagsArgs[] | false, alias?: string  } 
  | { name: 'upsertPostTag', args?: MutationUpsertPostTagArgs[] | false, alias?: string  } 
  | { name: 'deletePostTag', args?: MutationDeletePostTagArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPostTags', args?: MutationDeleteManyPostTagsArgs[] | false, alias?: string  } 
  | { name: 'createPostTagContent', args?: MutationCreatePostTagContentArgs[] | false, alias?: string  } 
  | { name: 'updatePostTagContent', args?: MutationUpdatePostTagContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyPostTagContents', args?: MutationUpdateManyPostTagContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertPostTagContent', args?: MutationUpsertPostTagContentArgs[] | false, alias?: string  } 
  | { name: 'deletePostTagContent', args?: MutationDeletePostTagContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPostTagContents', args?: MutationDeleteManyPostTagContentsArgs[] | false, alias?: string  } 
  | { name: 'createPostTagLng', args?: MutationCreatePostTagLngArgs[] | false, alias?: string  } 
  | { name: 'updatePostTagLng', args?: MutationUpdatePostTagLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyPostTagLngs', args?: MutationUpdateManyPostTagLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertPostTagLng', args?: MutationUpsertPostTagLngArgs[] | false, alias?: string  } 
  | { name: 'deletePostTagLng', args?: MutationDeletePostTagLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPostTagLngs', args?: MutationDeleteManyPostTagLngsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createProfile', args?: MutationCreateProfileArgs[] | false, alias?: string  } 
  | { name: 'updateProfile', args?: MutationUpdateProfileArgs[] | false, alias?: string  } 
  | { name: 'updateManyProfiles', args?: MutationUpdateManyProfilesArgs[] | false, alias?: string  } 
  | { name: 'upsertProfile', args?: MutationUpsertProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteProfile', args?: MutationDeleteProfileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProfiles', args?: MutationDeleteManyProfilesArgs[] | false, alias?: string  } 
  | { name: 'createAvatar', args?: MutationCreateAvatarArgs[] | false, alias?: string  } 
  | { name: 'updateAvatar', args?: MutationUpdateAvatarArgs[] | false, alias?: string  } 
  | { name: 'updateManyAvatars', args?: MutationUpdateManyAvatarsArgs[] | false, alias?: string  } 
  | { name: 'upsertAvatar', args?: MutationUpsertAvatarArgs[] | false, alias?: string  } 
  | { name: 'deleteAvatar', args?: MutationDeleteAvatarArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAvatars', args?: MutationDeleteManyAvatarsArgs[] | false, alias?: string  } 
  | { name: 'createProject', args?: MutationCreateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateProject', args?: MutationUpdateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjects', args?: MutationUpdateManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertProject', args?: MutationUpsertProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteProject', args?: MutationDeleteProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjects', args?: MutationDeleteManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'createProjectContent', args?: MutationCreateProjectContentArgs[] | false, alias?: string  } 
  | { name: 'updateProjectContent', args?: MutationUpdateProjectContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectContents', args?: MutationUpdateManyProjectContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectContent', args?: MutationUpsertProjectContentArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectContent', args?: MutationDeleteProjectContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectContents', args?: MutationDeleteManyProjectContentsArgs[] | false, alias?: string  } 
  | { name: 'createProjectLng', args?: MutationCreateProjectLngArgs[] | false, alias?: string  } 
  | { name: 'updateProjectLng', args?: MutationUpdateProjectLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectLngs', args?: MutationUpdateManyProjectLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectLng', args?: MutationUpsertProjectLngArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectLng', args?: MutationDeleteProjectLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectLngs', args?: MutationDeleteManyProjectLngsArgs[] | false, alias?: string  } 
  | { name: 'createProjectTag', args?: MutationCreateProjectTagArgs[] | false, alias?: string  } 
  | { name: 'updateProjectTag', args?: MutationUpdateProjectTagArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectTags', args?: MutationUpdateManyProjectTagsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectTag', args?: MutationUpsertProjectTagArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectTag', args?: MutationDeleteProjectTagArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectTags', args?: MutationDeleteManyProjectTagsArgs[] | false, alias?: string  } 
  | { name: 'createProjectTagContent', args?: MutationCreateProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'updateProjectTagContent', args?: MutationUpdateProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectTagContents', args?: MutationUpdateManyProjectTagContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectTagContent', args?: MutationUpsertProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectTagContent', args?: MutationDeleteProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectTagContents', args?: MutationDeleteManyProjectTagContentsArgs[] | false, alias?: string  } 
  | { name: 'createProjectTagLng', args?: MutationCreateProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'updateProjectTagLng', args?: MutationUpdateProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectTagLngs', args?: MutationUpdateManyProjectTagLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectTagLng', args?: MutationUpsertProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectTagLng', args?: MutationDeleteProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectTagLngs', args?: MutationDeleteManyProjectTagLngsArgs[] | false, alias?: string  } 
  | { name: 'createProjectCategory', args?: MutationCreateProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateProjectCategory', args?: MutationUpdateProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectCategories', args?: MutationUpdateManyProjectCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectCategory', args?: MutationUpsertProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectCategory', args?: MutationDeleteProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectCategories', args?: MutationDeleteManyProjectCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createProjectCategoryContent', args?: MutationCreateProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'updateProjectCategoryContent', args?: MutationUpdateProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectCategoryContents', args?: MutationUpdateManyProjectCategoryContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectCategoryContent', args?: MutationUpsertProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectCategoryContent', args?: MutationDeleteProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectCategoryContents', args?: MutationDeleteManyProjectCategoryContentsArgs[] | false, alias?: string  } 
  | { name: 'createProjectCategoryLng', args?: MutationCreateProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'updateProjectCategoryLng', args?: MutationUpdateProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectCategoryLngs', args?: MutationUpdateManyProjectCategoryLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectCategoryLng', args?: MutationUpsertProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectCategoryLng', args?: MutationDeleteProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectCategoryLngs', args?: MutationDeleteManyProjectCategoryLngsArgs[] | false, alias?: string  } 
  | { name: 'createProjectAlbum', args?: MutationCreateProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'updateProjectAlbum', args?: MutationUpdateProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectAlbum', args?: MutationUpsertProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectAlbum', args?: MutationDeleteProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectAlbums', args?: MutationDeleteManyProjectAlbumsArgs[] | false, alias?: string  } 
  | { name: 'createProjectImage', args?: MutationCreateProjectImageArgs[] | false, alias?: string  } 
  | { name: 'updateProjectImage', args?: MutationUpdateProjectImageArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectImages', args?: MutationUpdateManyProjectImagesArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectImage', args?: MutationUpsertProjectImageArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectImage', args?: MutationDeleteProjectImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectImages', args?: MutationDeleteManyProjectImagesArgs[] | false, alias?: string  } 
  | { name: 'createProjectImageContent', args?: MutationCreateProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'updateProjectImageContent', args?: MutationUpdateProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectImageContents', args?: MutationUpdateManyProjectImageContentsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectImageContent', args?: MutationUpsertProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectImageContent', args?: MutationDeleteProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectImageContents', args?: MutationDeleteManyProjectImageContentsArgs[] | false, alias?: string  } 
  | { name: 'createProjectImageLng', args?: MutationCreateProjectImageLngArgs[] | false, alias?: string  } 
  | { name: 'updateProjectImageLng', args?: MutationUpdateProjectImageLngArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectImageLngs', args?: MutationUpdateManyProjectImageLngsArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectImageLng', args?: MutationUpsertProjectImageLngArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectImageLng', args?: MutationDeleteProjectImageLngArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectImageLngs', args?: MutationDeleteManyProjectImageLngsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createPostContent'
  | 'updatePostContent'
  | 'updateManyPostContents'
  | 'upsertPostContent'
  | 'deletePostContent'
  | 'deleteManyPostContents'
  | 'createPostLng'
  | 'updatePostLng'
  | 'updateManyPostLngs'
  | 'upsertPostLng'
  | 'deletePostLng'
  | 'deleteManyPostLngs'
  | 'createComment'
  | 'updateComment'
  | 'upsertComment'
  | 'deleteComment'
  | 'deleteManyComments'
  | 'createPostTag'
  | 'updatePostTag'
  | 'updateManyPostTags'
  | 'upsertPostTag'
  | 'deletePostTag'
  | 'deleteManyPostTags'
  | 'createPostTagContent'
  | 'updatePostTagContent'
  | 'updateManyPostTagContents'
  | 'upsertPostTagContent'
  | 'deletePostTagContent'
  | 'deleteManyPostTagContents'
  | 'createPostTagLng'
  | 'updatePostTagLng'
  | 'updateManyPostTagLngs'
  | 'upsertPostTagLng'
  | 'deletePostTagLng'
  | 'deleteManyPostTagLngs'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createProfile'
  | 'updateProfile'
  | 'updateManyProfiles'
  | 'upsertProfile'
  | 'deleteProfile'
  | 'deleteManyProfiles'
  | 'createAvatar'
  | 'updateAvatar'
  | 'updateManyAvatars'
  | 'upsertAvatar'
  | 'deleteAvatar'
  | 'deleteManyAvatars'
  | 'createProject'
  | 'updateProject'
  | 'updateManyProjects'
  | 'upsertProject'
  | 'deleteProject'
  | 'deleteManyProjects'
  | 'createProjectContent'
  | 'updateProjectContent'
  | 'updateManyProjectContents'
  | 'upsertProjectContent'
  | 'deleteProjectContent'
  | 'deleteManyProjectContents'
  | 'createProjectLng'
  | 'updateProjectLng'
  | 'updateManyProjectLngs'
  | 'upsertProjectLng'
  | 'deleteProjectLng'
  | 'deleteManyProjectLngs'
  | 'createProjectTag'
  | 'updateProjectTag'
  | 'updateManyProjectTags'
  | 'upsertProjectTag'
  | 'deleteProjectTag'
  | 'deleteManyProjectTags'
  | 'createProjectTagContent'
  | 'updateProjectTagContent'
  | 'updateManyProjectTagContents'
  | 'upsertProjectTagContent'
  | 'deleteProjectTagContent'
  | 'deleteManyProjectTagContents'
  | 'createProjectTagLng'
  | 'updateProjectTagLng'
  | 'updateManyProjectTagLngs'
  | 'upsertProjectTagLng'
  | 'deleteProjectTagLng'
  | 'deleteManyProjectTagLngs'
  | 'createProjectCategory'
  | 'updateProjectCategory'
  | 'updateManyProjectCategories'
  | 'upsertProjectCategory'
  | 'deleteProjectCategory'
  | 'deleteManyProjectCategories'
  | 'createProjectCategoryContent'
  | 'updateProjectCategoryContent'
  | 'updateManyProjectCategoryContents'
  | 'upsertProjectCategoryContent'
  | 'deleteProjectCategoryContent'
  | 'deleteManyProjectCategoryContents'
  | 'createProjectCategoryLng'
  | 'updateProjectCategoryLng'
  | 'updateManyProjectCategoryLngs'
  | 'upsertProjectCategoryLng'
  | 'deleteProjectCategoryLng'
  | 'deleteManyProjectCategoryLngs'
  | 'createProjectAlbum'
  | 'updateProjectAlbum'
  | 'upsertProjectAlbum'
  | 'deleteProjectAlbum'
  | 'deleteManyProjectAlbums'
  | 'createProjectImage'
  | 'updateProjectImage'
  | 'updateManyProjectImages'
  | 'upsertProjectImage'
  | 'deleteProjectImage'
  | 'deleteManyProjectImages'
  | 'createProjectImageContent'
  | 'updateProjectImageContent'
  | 'updateManyProjectImageContents'
  | 'upsertProjectImageContent'
  | 'deleteProjectImageContent'
  | 'deleteManyProjectImageContents'
  | 'createProjectImageLng'
  | 'updateProjectImageLng'
  | 'updateManyProjectImageLngs'
  | 'upsertProjectImageLng'
  | 'deleteProjectImageLng'
  | 'deleteManyProjectImageLngs'


type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreatePostContentArgs =
  | 'data'
type MutationUpdatePostContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostContentArgs =
  | 'where'
type MutationDeleteManyPostContentsArgs =
  | 'where'
type MutationCreatePostLngArgs =
  | 'data'
type MutationUpdatePostLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostLngArgs =
  | 'where'
type MutationDeleteManyPostLngsArgs =
  | 'where'
type MutationCreateCommentArgs =
  | 'data'
type MutationUpdateCommentArgs =
  | 'data'
  | 'where'
type MutationUpsertCommentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCommentArgs =
  | 'where'
type MutationDeleteManyCommentsArgs =
  | 'where'
type MutationCreatePostTagArgs =
  | 'data'
type MutationUpdatePostTagArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostTagsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostTagArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostTagArgs =
  | 'where'
type MutationDeleteManyPostTagsArgs =
  | 'where'
type MutationCreatePostTagContentArgs =
  | 'data'
type MutationUpdatePostTagContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostTagContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostTagContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostTagContentArgs =
  | 'where'
type MutationDeleteManyPostTagContentsArgs =
  | 'where'
type MutationCreatePostTagLngArgs =
  | 'data'
type MutationUpdatePostTagLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostTagLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostTagLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostTagLngArgs =
  | 'where'
type MutationDeleteManyPostTagLngsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateProfileArgs =
  | 'data'
type MutationUpdateProfileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProfilesArgs =
  | 'data'
  | 'where'
type MutationUpsertProfileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProfileArgs =
  | 'where'
type MutationDeleteManyProfilesArgs =
  | 'where'
type MutationCreateAvatarArgs =
  | 'data'
type MutationUpdateAvatarArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAvatarsArgs =
  | 'data'
  | 'where'
type MutationUpsertAvatarArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAvatarArgs =
  | 'where'
type MutationDeleteManyAvatarsArgs =
  | 'where'
type MutationCreateProjectArgs =
  | 'data'
type MutationUpdateProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectArgs =
  | 'where'
type MutationDeleteManyProjectsArgs =
  | 'where'
type MutationCreateProjectContentArgs =
  | 'data'
type MutationUpdateProjectContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectContentArgs =
  | 'where'
type MutationDeleteManyProjectContentsArgs =
  | 'where'
type MutationCreateProjectLngArgs =
  | 'data'
type MutationUpdateProjectLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectLngArgs =
  | 'where'
type MutationDeleteManyProjectLngsArgs =
  | 'where'
type MutationCreateProjectTagArgs =
  | 'data'
type MutationUpdateProjectTagArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectTagsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectTagArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectTagArgs =
  | 'where'
type MutationDeleteManyProjectTagsArgs =
  | 'where'
type MutationCreateProjectTagContentArgs =
  | 'data'
type MutationUpdateProjectTagContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectTagContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectTagContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectTagContentArgs =
  | 'where'
type MutationDeleteManyProjectTagContentsArgs =
  | 'where'
type MutationCreateProjectTagLngArgs =
  | 'data'
type MutationUpdateProjectTagLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectTagLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectTagLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectTagLngArgs =
  | 'where'
type MutationDeleteManyProjectTagLngsArgs =
  | 'where'
type MutationCreateProjectCategoryArgs =
  | 'data'
type MutationUpdateProjectCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectCategoryArgs =
  | 'where'
type MutationDeleteManyProjectCategoriesArgs =
  | 'where'
type MutationCreateProjectCategoryContentArgs =
  | 'data'
type MutationUpdateProjectCategoryContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectCategoryContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectCategoryContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectCategoryContentArgs =
  | 'where'
type MutationDeleteManyProjectCategoryContentsArgs =
  | 'where'
type MutationCreateProjectCategoryLngArgs =
  | 'data'
type MutationUpdateProjectCategoryLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectCategoryLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectCategoryLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectCategoryLngArgs =
  | 'where'
type MutationDeleteManyProjectCategoryLngsArgs =
  | 'where'
type MutationCreateProjectAlbumArgs =
  | 'data'
type MutationUpdateProjectAlbumArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectAlbumArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectAlbumArgs =
  | 'where'
type MutationDeleteManyProjectAlbumsArgs =
  | 'where'
type MutationCreateProjectImageArgs =
  | 'data'
type MutationUpdateProjectImageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectImagesArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectImageArgs =
  | 'where'
type MutationDeleteManyProjectImagesArgs =
  | 'where'
type MutationCreateProjectImageContentArgs =
  | 'data'
type MutationUpdateProjectImageContentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectImageContentsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectImageContentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectImageContentArgs =
  | 'where'
type MutationDeleteManyProjectImageContentsArgs =
  | 'where'
type MutationCreateProjectImageLngArgs =
  | 'data'
type MutationUpdateProjectImageLngArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectImageLngsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectImageLngArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectImageLngArgs =
  | 'where'
type MutationDeleteManyProjectImageLngsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPostContent: {
    type: 'PostContent'
    args: Record<MutationCreatePostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent> | prisma.PostContent
  }
  updatePostContent: {
    type: 'PostContent'
    args: Record<MutationUpdatePostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostContentUpdateInput, where: PostContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent | null> | prisma.PostContent | null
  }
  updateManyPostContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostContentUpdateManyMutationInput, where?: PostContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPostContent: {
    type: 'PostContent'
    args: Record<MutationUpsertPostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostContentWhereUniqueInput, create: PostContentCreateInput, update: PostContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent> | prisma.PostContent
  }
  deletePostContent: {
    type: 'PostContent'
    args: Record<MutationDeletePostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent | null> | prisma.PostContent | null
  }
  deleteManyPostContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPostLng: {
    type: 'PostLng'
    args: Record<MutationCreatePostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng> | prisma.PostLng
  }
  updatePostLng: {
    type: 'PostLng'
    args: Record<MutationUpdatePostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostLngUpdateInput, where: PostLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng | null> | prisma.PostLng | null
  }
  updateManyPostLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostLngUpdateManyMutationInput, where?: PostLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPostLng: {
    type: 'PostLng'
    args: Record<MutationUpsertPostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostLngWhereUniqueInput, create: PostLngCreateInput, update: PostLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng> | prisma.PostLng
  }
  deletePostLng: {
    type: 'PostLng'
    args: Record<MutationDeletePostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng | null> | prisma.PostLng | null
  }
  deleteManyPostLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createComment: {
    type: 'Comment'
    args: Record<MutationCreateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  updateComment: {
    type: 'Comment'
    args: Record<MutationUpdateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentUpdateInput, where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  upsertComment: {
    type: 'Comment'
    args: Record<MutationUpsertCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput, create: CommentCreateInput, update: CommentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  deleteComment: {
    type: 'Comment'
    args: Record<MutationDeleteCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  deleteManyComments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPostTag: {
    type: 'PostTag'
    args: Record<MutationCreatePostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag> | prisma.PostTag
  }
  updatePostTag: {
    type: 'PostTag'
    args: Record<MutationUpdatePostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagUpdateInput, where: PostTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag | null> | prisma.PostTag | null
  }
  updateManyPostTags: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagUpdateManyMutationInput, where?: PostTagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPostTag: {
    type: 'PostTag'
    args: Record<MutationUpsertPostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagWhereUniqueInput, create: PostTagCreateInput, update: PostTagUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag> | prisma.PostTag
  }
  deletePostTag: {
    type: 'PostTag'
    args: Record<MutationDeletePostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag | null> | prisma.PostTag | null
  }
  deleteManyPostTags: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostTagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPostTagContent: {
    type: 'PostTagContent'
    args: Record<MutationCreatePostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent> | prisma.PostTagContent
  }
  updatePostTagContent: {
    type: 'PostTagContent'
    args: Record<MutationUpdatePostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagContentUpdateInput, where: PostTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent | null> | prisma.PostTagContent | null
  }
  updateManyPostTagContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagContentUpdateManyMutationInput, where?: PostTagContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPostTagContent: {
    type: 'PostTagContent'
    args: Record<MutationUpsertPostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagContentWhereUniqueInput, create: PostTagContentCreateInput, update: PostTagContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent> | prisma.PostTagContent
  }
  deletePostTagContent: {
    type: 'PostTagContent'
    args: Record<MutationDeletePostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent | null> | prisma.PostTagContent | null
  }
  deleteManyPostTagContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostTagContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPostTagLng: {
    type: 'PostTagLng'
    args: Record<MutationCreatePostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng> | prisma.PostTagLng
  }
  updatePostTagLng: {
    type: 'PostTagLng'
    args: Record<MutationUpdatePostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagLngUpdateInput, where: PostTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng | null> | prisma.PostTagLng | null
  }
  updateManyPostTagLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostTagLngUpdateManyMutationInput, where?: PostTagLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPostTagLng: {
    type: 'PostTagLng'
    args: Record<MutationUpsertPostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagLngWhereUniqueInput, create: PostTagLngCreateInput, update: PostTagLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng> | prisma.PostTagLng
  }
  deletePostTagLng: {
    type: 'PostTagLng'
    args: Record<MutationDeletePostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng | null> | prisma.PostTagLng | null
  }
  deleteManyPostTagLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostTagLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProfile: {
    type: 'Profile'
    args: Record<MutationCreateProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  updateProfile: {
    type: 'Profile'
    args: Record<MutationUpdateProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileUpdateInput, where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  updateManyProfiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProfileUpdateManyMutationInput, where?: ProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProfile: {
    type: 'Profile'
    args: Record<MutationUpsertProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProfileWhereUniqueInput, create: ProfileCreateInput, update: ProfileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile> | prisma.Profile
  }
  deleteProfile: {
    type: 'Profile'
    args: Record<MutationDeleteProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProfileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  deleteManyProfiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProfilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProfileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAvatar: {
    type: 'Avatar'
    args: Record<MutationCreateAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AvatarCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  updateAvatar: {
    type: 'Avatar'
    args: Record<MutationUpdateAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AvatarUpdateInput, where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  updateManyAvatars: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAvatarsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AvatarUpdateManyMutationInput, where?: AvatarWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAvatar: {
    type: 'Avatar'
    args: Record<MutationUpsertAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AvatarWhereUniqueInput, create: AvatarCreateInput, update: AvatarUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar> | prisma.Avatar
  }
  deleteAvatar: {
    type: 'Avatar'
    args: Record<MutationDeleteAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AvatarWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  deleteManyAvatars: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAvatarsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AvatarWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProject: {
    type: 'Project'
    args: Record<MutationCreateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  updateProject: {
    type: 'Project'
    args: Record<MutationUpdateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updateManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateManyMutationInput, where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProject: {
    type: 'Project'
    args: Record<MutationUpsertProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  deleteProject: {
    type: 'Project'
    args: Record<MutationDeleteProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  deleteManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectContent: {
    type: 'ProjectContent'
    args: Record<MutationCreateProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent> | prisma.ProjectContent
  }
  updateProjectContent: {
    type: 'ProjectContent'
    args: Record<MutationUpdateProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectContentUpdateInput, where: ProjectContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent | null> | prisma.ProjectContent | null
  }
  updateManyProjectContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectContentUpdateManyMutationInput, where?: ProjectContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectContent: {
    type: 'ProjectContent'
    args: Record<MutationUpsertProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectContentWhereUniqueInput, create: ProjectContentCreateInput, update: ProjectContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent> | prisma.ProjectContent
  }
  deleteProjectContent: {
    type: 'ProjectContent'
    args: Record<MutationDeleteProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent | null> | prisma.ProjectContent | null
  }
  deleteManyProjectContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectLng: {
    type: 'ProjectLng'
    args: Record<MutationCreateProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng> | prisma.ProjectLng
  }
  updateProjectLng: {
    type: 'ProjectLng'
    args: Record<MutationUpdateProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectLngUpdateInput, where: ProjectLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng | null> | prisma.ProjectLng | null
  }
  updateManyProjectLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectLngUpdateManyMutationInput, where?: ProjectLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectLng: {
    type: 'ProjectLng'
    args: Record<MutationUpsertProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectLngWhereUniqueInput, create: ProjectLngCreateInput, update: ProjectLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng> | prisma.ProjectLng
  }
  deleteProjectLng: {
    type: 'ProjectLng'
    args: Record<MutationDeleteProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng | null> | prisma.ProjectLng | null
  }
  deleteManyProjectLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectTag: {
    type: 'ProjectTag'
    args: Record<MutationCreateProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag> | prisma.ProjectTag
  }
  updateProjectTag: {
    type: 'ProjectTag'
    args: Record<MutationUpdateProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagUpdateInput, where: ProjectTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag | null> | prisma.ProjectTag | null
  }
  updateManyProjectTags: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagUpdateManyMutationInput, where?: ProjectTagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectTag: {
    type: 'ProjectTag'
    args: Record<MutationUpsertProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagWhereUniqueInput, create: ProjectTagCreateInput, update: ProjectTagUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag> | prisma.ProjectTag
  }
  deleteProjectTag: {
    type: 'ProjectTag'
    args: Record<MutationDeleteProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag | null> | prisma.ProjectTag | null
  }
  deleteManyProjectTags: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectTagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectTagContent: {
    type: 'ProjectTagContent'
    args: Record<MutationCreateProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent> | prisma.ProjectTagContent
  }
  updateProjectTagContent: {
    type: 'ProjectTagContent'
    args: Record<MutationUpdateProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagContentUpdateInput, where: ProjectTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent | null> | prisma.ProjectTagContent | null
  }
  updateManyProjectTagContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagContentUpdateManyMutationInput, where?: ProjectTagContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectTagContent: {
    type: 'ProjectTagContent'
    args: Record<MutationUpsertProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagContentWhereUniqueInput, create: ProjectTagContentCreateInput, update: ProjectTagContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent> | prisma.ProjectTagContent
  }
  deleteProjectTagContent: {
    type: 'ProjectTagContent'
    args: Record<MutationDeleteProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent | null> | prisma.ProjectTagContent | null
  }
  deleteManyProjectTagContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectTagContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectTagContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectTagLng: {
    type: 'ProjectTagLng'
    args: Record<MutationCreateProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng> | prisma.ProjectTagLng
  }
  updateProjectTagLng: {
    type: 'ProjectTagLng'
    args: Record<MutationUpdateProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagLngUpdateInput, where: ProjectTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng | null> | prisma.ProjectTagLng | null
  }
  updateManyProjectTagLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectTagLngUpdateManyMutationInput, where?: ProjectTagLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectTagLng: {
    type: 'ProjectTagLng'
    args: Record<MutationUpsertProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagLngWhereUniqueInput, create: ProjectTagLngCreateInput, update: ProjectTagLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng> | prisma.ProjectTagLng
  }
  deleteProjectTagLng: {
    type: 'ProjectTagLng'
    args: Record<MutationDeleteProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectTagLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng | null> | prisma.ProjectTagLng | null
  }
  deleteManyProjectTagLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectTagLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectTagLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectCategory: {
    type: 'ProjectCategory'
    args: Record<MutationCreateProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory> | prisma.ProjectCategory
  }
  updateProjectCategory: {
    type: 'ProjectCategory'
    args: Record<MutationUpdateProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryUpdateInput, where: ProjectCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory | null> | prisma.ProjectCategory | null
  }
  updateManyProjectCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryUpdateManyMutationInput, where?: ProjectCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectCategory: {
    type: 'ProjectCategory'
    args: Record<MutationUpsertProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryWhereUniqueInput, create: ProjectCategoryCreateInput, update: ProjectCategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory> | prisma.ProjectCategory
  }
  deleteProjectCategory: {
    type: 'ProjectCategory'
    args: Record<MutationDeleteProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory | null> | prisma.ProjectCategory | null
  }
  deleteManyProjectCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectCategoryContent: {
    type: 'ProjectCategoryContent'
    args: Record<MutationCreateProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent> | prisma.ProjectCategoryContent
  }
  updateProjectCategoryContent: {
    type: 'ProjectCategoryContent'
    args: Record<MutationUpdateProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryContentUpdateInput, where: ProjectCategoryContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent | null> | prisma.ProjectCategoryContent | null
  }
  updateManyProjectCategoryContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectCategoryContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryContentUpdateManyMutationInput, where?: ProjectCategoryContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectCategoryContent: {
    type: 'ProjectCategoryContent'
    args: Record<MutationUpsertProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryContentWhereUniqueInput, create: ProjectCategoryContentCreateInput, update: ProjectCategoryContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent> | prisma.ProjectCategoryContent
  }
  deleteProjectCategoryContent: {
    type: 'ProjectCategoryContent'
    args: Record<MutationDeleteProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent | null> | prisma.ProjectCategoryContent | null
  }
  deleteManyProjectCategoryContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectCategoryContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectCategoryContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectCategoryLng: {
    type: 'ProjectCategoryLng'
    args: Record<MutationCreateProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng> | prisma.ProjectCategoryLng
  }
  updateProjectCategoryLng: {
    type: 'ProjectCategoryLng'
    args: Record<MutationUpdateProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryLngUpdateInput, where: ProjectCategoryLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng | null> | prisma.ProjectCategoryLng | null
  }
  updateManyProjectCategoryLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectCategoryLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCategoryLngUpdateManyMutationInput, where?: ProjectCategoryLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectCategoryLng: {
    type: 'ProjectCategoryLng'
    args: Record<MutationUpsertProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryLngWhereUniqueInput, create: ProjectCategoryLngCreateInput, update: ProjectCategoryLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng> | prisma.ProjectCategoryLng
  }
  deleteProjectCategoryLng: {
    type: 'ProjectCategoryLng'
    args: Record<MutationDeleteProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectCategoryLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng | null> | prisma.ProjectCategoryLng | null
  }
  deleteManyProjectCategoryLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectCategoryLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectCategoryLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectAlbum: {
    type: 'ProjectAlbum'
    args: Record<MutationCreateProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectAlbumCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum> | prisma.ProjectAlbum
  }
  updateProjectAlbum: {
    type: 'ProjectAlbum'
    args: Record<MutationUpdateProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectAlbumUpdateInput, where: ProjectAlbumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum | null> | prisma.ProjectAlbum | null
  }
  upsertProjectAlbum: {
    type: 'ProjectAlbum'
    args: Record<MutationUpsertProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectAlbumWhereUniqueInput, create: ProjectAlbumCreateInput, update: ProjectAlbumUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum> | prisma.ProjectAlbum
  }
  deleteProjectAlbum: {
    type: 'ProjectAlbum'
    args: Record<MutationDeleteProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectAlbumWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum | null> | prisma.ProjectAlbum | null
  }
  deleteManyProjectAlbums: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectAlbumsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectAlbumWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectImage: {
    type: 'ProjectImage'
    args: Record<MutationCreateProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage> | prisma.ProjectImage
  }
  updateProjectImage: {
    type: 'ProjectImage'
    args: Record<MutationUpdateProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageUpdateInput, where: ProjectImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage | null> | prisma.ProjectImage | null
  }
  updateManyProjectImages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageUpdateManyMutationInput, where?: ProjectImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectImage: {
    type: 'ProjectImage'
    args: Record<MutationUpsertProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageWhereUniqueInput, create: ProjectImageCreateInput, update: ProjectImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage> | prisma.ProjectImage
  }
  deleteProjectImage: {
    type: 'ProjectImage'
    args: Record<MutationDeleteProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage | null> | prisma.ProjectImage | null
  }
  deleteManyProjectImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectImageContent: {
    type: 'ProjectImageContent'
    args: Record<MutationCreateProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageContentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent> | prisma.ProjectImageContent
  }
  updateProjectImageContent: {
    type: 'ProjectImageContent'
    args: Record<MutationUpdateProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageContentUpdateInput, where: ProjectImageContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent | null> | prisma.ProjectImageContent | null
  }
  updateManyProjectImageContents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectImageContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageContentUpdateManyMutationInput, where?: ProjectImageContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectImageContent: {
    type: 'ProjectImageContent'
    args: Record<MutationUpsertProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageContentWhereUniqueInput, create: ProjectImageContentCreateInput, update: ProjectImageContentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent> | prisma.ProjectImageContent
  }
  deleteProjectImageContent: {
    type: 'ProjectImageContent'
    args: Record<MutationDeleteProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageContentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent | null> | prisma.ProjectImageContent | null
  }
  deleteManyProjectImageContents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectImageContentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectImageContentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectImageLng: {
    type: 'ProjectImageLng'
    args: Record<MutationCreateProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageLngCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng> | prisma.ProjectImageLng
  }
  updateProjectImageLng: {
    type: 'ProjectImageLng'
    args: Record<MutationUpdateProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageLngUpdateInput, where: ProjectImageLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng | null> | prisma.ProjectImageLng | null
  }
  updateManyProjectImageLngs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectImageLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectImageLngUpdateManyMutationInput, where?: ProjectImageLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectImageLng: {
    type: 'ProjectImageLng'
    args: Record<MutationUpsertProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageLngWhereUniqueInput, create: ProjectImageLngCreateInput, update: ProjectImageLngUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng> | prisma.ProjectImageLng
  }
  deleteProjectImageLng: {
    type: 'ProjectImageLng'
    args: Record<MutationDeleteProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectImageLngWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng | null> | prisma.ProjectImageLng | null
  }
  deleteManyProjectImageLngs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectImageLngsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectImageLngWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'postContent', args?: SubscriptionPostContentArgs[] | false, alias?: string  } 
  | { name: 'postLng', args?: SubscriptionPostLngArgs[] | false, alias?: string  } 
  | { name: 'comment', args?: SubscriptionCommentArgs[] | false, alias?: string  } 
  | { name: 'postTag', args?: SubscriptionPostTagArgs[] | false, alias?: string  } 
  | { name: 'postTagContent', args?: SubscriptionPostTagContentArgs[] | false, alias?: string  } 
  | { name: 'postTagLng', args?: SubscriptionPostTagLngArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'profile', args?: SubscriptionProfileArgs[] | false, alias?: string  } 
  | { name: 'avatar', args?: SubscriptionAvatarArgs[] | false, alias?: string  } 
  | { name: 'project', args?: SubscriptionProjectArgs[] | false, alias?: string  } 
  | { name: 'projectContent', args?: SubscriptionProjectContentArgs[] | false, alias?: string  } 
  | { name: 'projectLng', args?: SubscriptionProjectLngArgs[] | false, alias?: string  } 
  | { name: 'projectTag', args?: SubscriptionProjectTagArgs[] | false, alias?: string  } 
  | { name: 'projectTagContent', args?: SubscriptionProjectTagContentArgs[] | false, alias?: string  } 
  | { name: 'projectTagLng', args?: SubscriptionProjectTagLngArgs[] | false, alias?: string  } 
  | { name: 'projectCategory', args?: SubscriptionProjectCategoryArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryContent', args?: SubscriptionProjectCategoryContentArgs[] | false, alias?: string  } 
  | { name: 'projectCategoryLng', args?: SubscriptionProjectCategoryLngArgs[] | false, alias?: string  } 
  | { name: 'projectAlbum', args?: SubscriptionProjectAlbumArgs[] | false, alias?: string  } 
  | { name: 'projectImage', args?: SubscriptionProjectImageArgs[] | false, alias?: string  } 
  | { name: 'projectImageContent', args?: SubscriptionProjectImageContentArgs[] | false, alias?: string  } 
  | { name: 'projectImageLng', args?: SubscriptionProjectImageLngArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'post'
  | 'postContent'
  | 'postLng'
  | 'comment'
  | 'postTag'
  | 'postTagContent'
  | 'postTagLng'
  | 'user'
  | 'profile'
  | 'avatar'
  | 'project'
  | 'projectContent'
  | 'projectLng'
  | 'projectTag'
  | 'projectTagContent'
  | 'projectTagLng'
  | 'projectCategory'
  | 'projectCategoryContent'
  | 'projectCategoryLng'
  | 'projectAlbum'
  | 'projectImage'
  | 'projectImageContent'
  | 'projectImageLng'


type SubscriptionPostArgs =
  | 'where'
type SubscriptionPostContentArgs =
  | 'where'
type SubscriptionPostLngArgs =
  | 'where'
type SubscriptionCommentArgs =
  | 'where'
type SubscriptionPostTagArgs =
  | 'where'
type SubscriptionPostTagContentArgs =
  | 'where'
type SubscriptionPostTagLngArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionProfileArgs =
  | 'where'
type SubscriptionAvatarArgs =
  | 'where'
type SubscriptionProjectArgs =
  | 'where'
type SubscriptionProjectContentArgs =
  | 'where'
type SubscriptionProjectLngArgs =
  | 'where'
type SubscriptionProjectTagArgs =
  | 'where'
type SubscriptionProjectTagContentArgs =
  | 'where'
type SubscriptionProjectTagLngArgs =
  | 'where'
type SubscriptionProjectCategoryArgs =
  | 'where'
type SubscriptionProjectCategoryContentArgs =
  | 'where'
type SubscriptionProjectCategoryLngArgs =
  | 'where'
type SubscriptionProjectAlbumArgs =
  | 'where'
type SubscriptionProjectImageArgs =
  | 'where'
type SubscriptionProjectImageContentArgs =
  | 'where'
type SubscriptionProjectImageLngArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  postContent: {
    type: 'PostContentSubscriptionPayload'
    args: Record<SubscriptionPostContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContentSubscriptionPayload | null> | prisma.PostContentSubscriptionPayload | null
  }
  postLng: {
    type: 'PostLngSubscriptionPayload'
    args: Record<SubscriptionPostLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLngSubscriptionPayload | null> | prisma.PostLngSubscriptionPayload | null
  }
  comment: {
    type: 'CommentSubscriptionPayload'
    args: Record<SubscriptionCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CommentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentSubscriptionPayload | null> | prisma.CommentSubscriptionPayload | null
  }
  postTag: {
    type: 'PostTagSubscriptionPayload'
    args: Record<SubscriptionPostTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostTagSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagSubscriptionPayload | null> | prisma.PostTagSubscriptionPayload | null
  }
  postTagContent: {
    type: 'PostTagContentSubscriptionPayload'
    args: Record<SubscriptionPostTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostTagContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContentSubscriptionPayload | null> | prisma.PostTagContentSubscriptionPayload | null
  }
  postTagLng: {
    type: 'PostTagLngSubscriptionPayload'
    args: Record<SubscriptionPostTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostTagLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLngSubscriptionPayload | null> | prisma.PostTagLngSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  profile: {
    type: 'ProfileSubscriptionPayload'
    args: Record<SubscriptionProfileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProfileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfileSubscriptionPayload | null> | prisma.ProfileSubscriptionPayload | null
  }
  avatar: {
    type: 'AvatarSubscriptionPayload'
    args: Record<SubscriptionAvatarArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AvatarSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarSubscriptionPayload | null> | prisma.AvatarSubscriptionPayload | null
  }
  project: {
    type: 'ProjectSubscriptionPayload'
    args: Record<SubscriptionProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectSubscriptionPayload | null> | prisma.ProjectSubscriptionPayload | null
  }
  projectContent: {
    type: 'ProjectContentSubscriptionPayload'
    args: Record<SubscriptionProjectContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContentSubscriptionPayload | null> | prisma.ProjectContentSubscriptionPayload | null
  }
  projectLng: {
    type: 'ProjectLngSubscriptionPayload'
    args: Record<SubscriptionProjectLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLngSubscriptionPayload | null> | prisma.ProjectLngSubscriptionPayload | null
  }
  projectTag: {
    type: 'ProjectTagSubscriptionPayload'
    args: Record<SubscriptionProjectTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectTagSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagSubscriptionPayload | null> | prisma.ProjectTagSubscriptionPayload | null
  }
  projectTagContent: {
    type: 'ProjectTagContentSubscriptionPayload'
    args: Record<SubscriptionProjectTagContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectTagContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContentSubscriptionPayload | null> | prisma.ProjectTagContentSubscriptionPayload | null
  }
  projectTagLng: {
    type: 'ProjectTagLngSubscriptionPayload'
    args: Record<SubscriptionProjectTagLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectTagLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLngSubscriptionPayload | null> | prisma.ProjectTagLngSubscriptionPayload | null
  }
  projectCategory: {
    type: 'ProjectCategorySubscriptionPayload'
    args: Record<SubscriptionProjectCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectCategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategorySubscriptionPayload | null> | prisma.ProjectCategorySubscriptionPayload | null
  }
  projectCategoryContent: {
    type: 'ProjectCategoryContentSubscriptionPayload'
    args: Record<SubscriptionProjectCategoryContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectCategoryContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContentSubscriptionPayload | null> | prisma.ProjectCategoryContentSubscriptionPayload | null
  }
  projectCategoryLng: {
    type: 'ProjectCategoryLngSubscriptionPayload'
    args: Record<SubscriptionProjectCategoryLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectCategoryLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLngSubscriptionPayload | null> | prisma.ProjectCategoryLngSubscriptionPayload | null
  }
  projectAlbum: {
    type: 'ProjectAlbumSubscriptionPayload'
    args: Record<SubscriptionProjectAlbumArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectAlbumSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbumSubscriptionPayload | null> | prisma.ProjectAlbumSubscriptionPayload | null
  }
  projectImage: {
    type: 'ProjectImageSubscriptionPayload'
    args: Record<SubscriptionProjectImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageSubscriptionPayload | null> | prisma.ProjectImageSubscriptionPayload | null
  }
  projectImageContent: {
    type: 'ProjectImageContentSubscriptionPayload'
    args: Record<SubscriptionProjectImageContentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectImageContentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContentSubscriptionPayload | null> | prisma.ProjectImageContentSubscriptionPayload | null
  }
  projectImageLng: {
    type: 'ProjectImageLngSubscriptionPayload'
    args: Record<SubscriptionProjectImageLngArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectImageLngSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLngSubscriptionPayload | null> | prisma.ProjectImageLngSubscriptionPayload | null
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'isPublished', args?: [] | false, alias?: string  } 
  | { name: 'imageSrc', args?: [] | false, alias?: string  } 
  | { name: 'likes', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'slug'
  | 'isPublished'
  | 'imageSrc'
  | 'likes'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isPublished: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageSrc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  likes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PostContentSubscriptionPayload

type PostContentSubscriptionPayloadObject =
  | PostContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PostContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContent | null> | prisma.PostContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostContentPreviousValues | null> | prisma.PostContentPreviousValues | null
  }
}
  

// Types for PostContentPreviousValues

type PostContentPreviousValuesObject =
  | PostContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 
  | { name: 'imageAlt', args?: [] | false, alias?: string  } 

type PostContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'text'
  | 'metaTitle'
  | 'metaDescription'
  | 'imageAlt'



  

export interface PostContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  imageAlt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostLngSubscriptionPayload

type PostLngSubscriptionPayloadObject =
  | PostLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PostLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLng | null> | prisma.PostLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostLngPreviousValues | null> | prisma.PostLngPreviousValues | null
  }
}
  

// Types for PostLngPreviousValues

type PostLngPreviousValuesObject =
  | PostLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type PostLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface PostLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CommentSubscriptionPayload

type CommentSubscriptionPayloadObject =
  | CommentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CommentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CommentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CommentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentPreviousValues | null> | prisma.CommentPreviousValues | null
  }
}
  

// Types for CommentPreviousValues

type CommentPreviousValuesObject =
  | CommentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CommentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'



  

export interface CommentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagSubscriptionPayload

type PostTagSubscriptionPayloadObject =
  | PostTagSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostTagSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostTagSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PostTag'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTag | null> | prisma.PostTag | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostTagPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagPreviousValues | null> | prisma.PostTagPreviousValues | null
  }
}
  

// Types for PostTagPreviousValues

type PostTagPreviousValuesObject =
  | PostTagPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 

type PostTagPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'color'



  

export interface PostTagPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagContentSubscriptionPayload

type PostTagContentSubscriptionPayloadObject =
  | PostTagContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostTagContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostTagContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PostTagContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContent | null> | prisma.PostTagContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostTagContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagContentPreviousValues | null> | prisma.PostTagContentPreviousValues | null
  }
}
  

// Types for PostTagContentPreviousValues

type PostTagContentPreviousValuesObject =
  | PostTagContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type PostTagContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'



  

export interface PostTagContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostTagLngSubscriptionPayload

type PostTagLngSubscriptionPayloadObject =
  | PostTagLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostTagLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostTagLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PostTagLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLng | null> | prisma.PostTagLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostTagLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostTagLngPreviousValues | null> | prisma.PostTagLngPreviousValues | null
  }
}
  

// Types for PostTagLngPreviousValues

type PostTagLngPreviousValuesObject =
  | PostTagLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type PostTagLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface PostTagLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'
  | 'role'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
}
  

// Types for ProfileSubscriptionPayload

type ProfileSubscriptionPayloadObject =
  | ProfileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProfileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProfileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Profile'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Profile | null> | prisma.Profile | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProfilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProfileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProfilePreviousValues | null> | prisma.ProfilePreviousValues | null
  }
}
  

// Types for ProfilePreviousValues

type ProfilePreviousValuesObject =
  | ProfilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'bio', args?: [] | false, alias?: string  } 

type ProfilePreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'bio'



  

export interface ProfilePreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AvatarSubscriptionPayload

type AvatarSubscriptionPayloadObject =
  | AvatarSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AvatarSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AvatarSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Avatar'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Avatar | null> | prisma.Avatar | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AvatarPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AvatarSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AvatarPreviousValues | null> | prisma.AvatarPreviousValues | null
  }
}
  

// Types for AvatarPreviousValues

type AvatarPreviousValuesObject =
  | AvatarPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publicId', args?: [] | false, alias?: string  } 
  | { name: 'src', args?: [] | false, alias?: string  } 

type AvatarPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publicId'
  | 'src'



  

export interface AvatarPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  src: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectSubscriptionPayload

type ProjectSubscriptionPayloadObject =
  | ProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectPreviousValues | null> | prisma.ProjectPreviousValues | null
  }
}
  

// Types for ProjectPreviousValues

type ProjectPreviousValuesObject =
  | ProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 

type ProjectPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'slug'



  

export interface ProjectPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectContentSubscriptionPayload

type ProjectContentSubscriptionPayloadObject =
  | ProjectContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContent | null> | prisma.ProjectContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectContentPreviousValues | null> | prisma.ProjectContentPreviousValues | null
  }
}
  

// Types for ProjectContentPreviousValues

type ProjectContentPreviousValuesObject =
  | ProjectContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 

type ProjectContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'text'
  | 'metaTitle'
  | 'metaDescription'
  | 'isActive'



  

export interface ProjectContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectLngSubscriptionPayload

type ProjectLngSubscriptionPayloadObject =
  | ProjectLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLng | null> | prisma.ProjectLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectLngPreviousValues | null> | prisma.ProjectLngPreviousValues | null
  }
}
  

// Types for ProjectLngPreviousValues

type ProjectLngPreviousValuesObject =
  | ProjectLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface ProjectLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectTagSubscriptionPayload

type ProjectTagSubscriptionPayloadObject =
  | ProjectTagSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectTagSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectTagSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectTag'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTag | null> | prisma.ProjectTag | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectTagPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagPreviousValues | null> | prisma.ProjectTagPreviousValues | null
  }
}
  

// Types for ProjectTagPreviousValues

type ProjectTagPreviousValuesObject =
  | ProjectTagPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 

type ProjectTagPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'color'



  

export interface ProjectTagPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectTagContentSubscriptionPayload

type ProjectTagContentSubscriptionPayloadObject =
  | ProjectTagContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectTagContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectTagContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectTagContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContent | null> | prisma.ProjectTagContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectTagContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagContentPreviousValues | null> | prisma.ProjectTagContentPreviousValues | null
  }
}
  

// Types for ProjectTagContentPreviousValues

type ProjectTagContentPreviousValuesObject =
  | ProjectTagContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type ProjectTagContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'



  

export interface ProjectTagContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectTagLngSubscriptionPayload

type ProjectTagLngSubscriptionPayloadObject =
  | ProjectTagLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectTagLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectTagLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectTagLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLng | null> | prisma.ProjectTagLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectTagLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectTagLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectTagLngPreviousValues | null> | prisma.ProjectTagLngPreviousValues | null
  }
}
  

// Types for ProjectTagLngPreviousValues

type ProjectTagLngPreviousValuesObject =
  | ProjectTagLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectTagLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface ProjectTagLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectCategorySubscriptionPayload

type ProjectCategorySubscriptionPayloadObject =
  | ProjectCategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectCategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectCategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectCategory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategory | null> | prisma.ProjectCategory | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectCategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryPreviousValues | null> | prisma.ProjectCategoryPreviousValues | null
  }
}
  

// Types for ProjectCategoryPreviousValues

type ProjectCategoryPreviousValuesObject =
  | ProjectCategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 

type ProjectCategoryPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'slug'
  | 'image'



  

export interface ProjectCategoryPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectCategoryContentSubscriptionPayload

type ProjectCategoryContentSubscriptionPayloadObject =
  | ProjectCategoryContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectCategoryContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectCategoryContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectCategoryContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategoryContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContent | null> | prisma.ProjectCategoryContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectCategoryContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategoryContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryContentPreviousValues | null> | prisma.ProjectCategoryContentPreviousValues | null
  }
}
  

// Types for ProjectCategoryContentPreviousValues

type ProjectCategoryContentPreviousValuesObject =
  | ProjectCategoryContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'imageAlt', args?: [] | false, alias?: string  } 
  | { name: 'metaTitle', args?: [] | false, alias?: string  } 
  | { name: 'metaDescription', args?: [] | false, alias?: string  } 

type ProjectCategoryContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'title'
  | 'text'
  | 'imageAlt'
  | 'metaTitle'
  | 'metaDescription'



  

export interface ProjectCategoryContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imageAlt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  metaTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  metaDescription: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectCategoryLngSubscriptionPayload

type ProjectCategoryLngSubscriptionPayloadObject =
  | ProjectCategoryLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectCategoryLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectCategoryLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectCategoryLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectCategoryLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategoryLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLng | null> | prisma.ProjectCategoryLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectCategoryLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectCategoryLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectCategoryLngPreviousValues | null> | prisma.ProjectCategoryLngPreviousValues | null
  }
}
  

// Types for ProjectCategoryLngPreviousValues

type ProjectCategoryLngPreviousValuesObject =
  | ProjectCategoryLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectCategoryLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface ProjectCategoryLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProjectAlbumSubscriptionPayload

type ProjectAlbumSubscriptionPayloadObject =
  | ProjectAlbumSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectAlbumSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectAlbumSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectAlbumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectAlbum'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectAlbumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbum | null> | prisma.ProjectAlbum | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectAlbumPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectAlbumSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectAlbumPreviousValues | null> | prisma.ProjectAlbumPreviousValues | null
  }
}
  

// Types for ProjectAlbumPreviousValues

type ProjectAlbumPreviousValuesObject =
  | ProjectAlbumPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectAlbumPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectAlbumPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageSubscriptionPayload

type ProjectImageSubscriptionPayloadObject =
  | ProjectImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectImage'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImage | null> | prisma.ProjectImage | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImagePreviousValues | null> | prisma.ProjectImagePreviousValues | null
  }
}
  

// Types for ProjectImagePreviousValues

type ProjectImagePreviousValuesObject =
  | ProjectImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'publicId', args?: [] | false, alias?: string  } 
  | { name: 'src', args?: [] | false, alias?: string  } 

type ProjectImagePreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'publicId'
  | 'src'



  

export interface ProjectImagePreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  publicId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  src: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageContentSubscriptionPayload

type ProjectImageContentSubscriptionPayloadObject =
  | ProjectImageContentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectImageContentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectImageContentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectImageContent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContent | null> | prisma.ProjectImageContent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectImageContentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageContentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageContentPreviousValues | null> | prisma.ProjectImageContentPreviousValues | null
  }
}
  

// Types for ProjectImageContentPreviousValues

type ProjectImageContentPreviousValuesObject =
  | ProjectImageContentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'alt', args?: [] | false, alias?: string  } 

type ProjectImageContentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'alt'



  

export interface ProjectImageContentPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  alt: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectImageLngSubscriptionPayload

type ProjectImageLngSubscriptionPayloadObject =
  | ProjectImageLngSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectImageLngSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectImageLngSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectImageLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectImageLng'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLng | null> | prisma.ProjectImageLng | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectImageLngPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectImageLngSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectImageLngPreviousValues | null> | prisma.ProjectImageLngPreviousValues | null
  }
}
  

// Types for ProjectImageLngPreviousValues

type ProjectImageLngPreviousValuesObject =
  | ProjectImageLngPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'locale', args?: [] | false, alias?: string  } 

type ProjectImageLngPreviousValuesFields =
  | 'id'
  | 'country'
  | 'locale'



  

export interface ProjectImageLngPreviousValuesFieldDetails {
  id: {
    type: 'UUID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  locale: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface PostWhereUniqueInput {
  id?: undefined | null
  slug?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  
export interface PostWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  author?: UserWhereInput | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  isPublished?: boolean | null
  isPublished_not?: boolean | null
  imageSrc?: string | null
  imageSrc_not?: string | null
  imageSrc_in?: string[]
  imageSrc_not_in?: string[]
  imageSrc_lt?: string | null
  imageSrc_lte?: string | null
  imageSrc_gt?: string | null
  imageSrc_gte?: string | null
  imageSrc_contains?: string | null
  imageSrc_not_contains?: string | null
  imageSrc_starts_with?: string | null
  imageSrc_not_starts_with?: string | null
  imageSrc_ends_with?: string | null
  imageSrc_not_ends_with?: string | null
  contents_every?: PostContentWhereInput | null
  contents_some?: PostContentWhereInput | null
  contents_none?: PostContentWhereInput | null
  tags_every?: PostTagWhereInput | null
  tags_some?: PostTagWhereInput | null
  tags_none?: PostTagWhereInput | null
  comments_every?: CommentWhereInput | null
  comments_some?: CommentWhereInput | null
  comments_none?: CommentWhereInput | null
  likes?: number | null
  likes_not?: number | null
  likes_in?: number[]
  likes_not_in?: number[]
  likes_lt?: number | null
  likes_lte?: number | null
  likes_gt?: number | null
  likes_gte?: number | null
  likedBy_every?: UserWhereInput | null
  likedBy_some?: UserWhereInput | null
  likedBy_none?: UserWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'isPublished_not', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'imageSrc_not', alias?: string  } 
  | { name: 'imageSrc_in', alias?: string  } 
  | { name: 'imageSrc_not_in', alias?: string  } 
  | { name: 'imageSrc_lt', alias?: string  } 
  | { name: 'imageSrc_lte', alias?: string  } 
  | { name: 'imageSrc_gt', alias?: string  } 
  | { name: 'imageSrc_gte', alias?: string  } 
  | { name: 'imageSrc_contains', alias?: string  } 
  | { name: 'imageSrc_not_contains', alias?: string  } 
  | { name: 'imageSrc_starts_with', alias?: string  } 
  | { name: 'imageSrc_not_starts_with', alias?: string  } 
  | { name: 'imageSrc_ends_with', alias?: string  } 
  | { name: 'imageSrc_not_ends_with', alias?: string  } 
  | { name: 'contents_every', alias?: string  } 
  | { name: 'contents_some', alias?: string  } 
  | { name: 'contents_none', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'comments_every', alias?: string  } 
  | { name: 'comments_some', alias?: string  } 
  | { name: 'comments_none', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likes_not', alias?: string  } 
  | { name: 'likes_in', alias?: string  } 
  | { name: 'likes_not_in', alias?: string  } 
  | { name: 'likes_lt', alias?: string  } 
  | { name: 'likes_lte', alias?: string  } 
  | { name: 'likes_gt', alias?: string  } 
  | { name: 'likes_gte', alias?: string  } 
  | { name: 'likedBy_every', alias?: string  } 
  | { name: 'likedBy_some', alias?: string  } 
  | { name: 'likedBy_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  profile?: ProfileWhereInput | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  postLikes_every?: PostWhereInput | null
  postLikes_some?: PostWhereInput | null
  postLikes_none?: PostWhereInput | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  comments_every?: CommentWhereInput | null
  comments_some?: CommentWhereInput | null
  comments_none?: CommentWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'postLikes_every', alias?: string  } 
  | { name: 'postLikes_some', alias?: string  } 
  | { name: 'postLikes_none', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'comments_every', alias?: string  } 
  | { name: 'comments_some', alias?: string  } 
  | { name: 'comments_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProfileWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  user?: UserWhereInput | null
  bio?: string | null
  bio_not?: string | null
  bio_in?: string[]
  bio_not_in?: string[]
  bio_lt?: string | null
  bio_lte?: string | null
  bio_gt?: string | null
  bio_gte?: string | null
  bio_contains?: string | null
  bio_not_contains?: string | null
  bio_starts_with?: string | null
  bio_not_starts_with?: string | null
  bio_ends_with?: string | null
  bio_not_ends_with?: string | null
  avatar?: AvatarWhereInput | null
  AND?: ProfileWhereInput[]
  OR?: ProfileWhereInput[]
  NOT?: ProfileWhereInput[]
}
export type ProfileWhereInputInputObject =
  | Extract<keyof ProfileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'bio_not', alias?: string  } 
  | { name: 'bio_in', alias?: string  } 
  | { name: 'bio_not_in', alias?: string  } 
  | { name: 'bio_lt', alias?: string  } 
  | { name: 'bio_lte', alias?: string  } 
  | { name: 'bio_gt', alias?: string  } 
  | { name: 'bio_gte', alias?: string  } 
  | { name: 'bio_contains', alias?: string  } 
  | { name: 'bio_not_contains', alias?: string  } 
  | { name: 'bio_starts_with', alias?: string  } 
  | { name: 'bio_not_starts_with', alias?: string  } 
  | { name: 'bio_ends_with', alias?: string  } 
  | { name: 'bio_not_ends_with', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AvatarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  publicId?: string | null
  publicId_not?: string | null
  publicId_in?: string[]
  publicId_not_in?: string[]
  publicId_lt?: string | null
  publicId_lte?: string | null
  publicId_gt?: string | null
  publicId_gte?: string | null
  publicId_contains?: string | null
  publicId_not_contains?: string | null
  publicId_starts_with?: string | null
  publicId_not_starts_with?: string | null
  publicId_ends_with?: string | null
  publicId_not_ends_with?: string | null
  src?: string | null
  src_not?: string | null
  src_in?: string[]
  src_not_in?: string[]
  src_lt?: string | null
  src_lte?: string | null
  src_gt?: string | null
  src_gte?: string | null
  src_contains?: string | null
  src_not_contains?: string | null
  src_starts_with?: string | null
  src_not_starts_with?: string | null
  src_ends_with?: string | null
  src_not_ends_with?: string | null
  AND?: AvatarWhereInput[]
  OR?: AvatarWhereInput[]
  NOT?: AvatarWhereInput[]
}
export type AvatarWhereInputInputObject =
  | Extract<keyof AvatarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'publicId_not', alias?: string  } 
  | { name: 'publicId_in', alias?: string  } 
  | { name: 'publicId_not_in', alias?: string  } 
  | { name: 'publicId_lt', alias?: string  } 
  | { name: 'publicId_lte', alias?: string  } 
  | { name: 'publicId_gt', alias?: string  } 
  | { name: 'publicId_gte', alias?: string  } 
  | { name: 'publicId_contains', alias?: string  } 
  | { name: 'publicId_not_contains', alias?: string  } 
  | { name: 'publicId_starts_with', alias?: string  } 
  | { name: 'publicId_not_starts_with', alias?: string  } 
  | { name: 'publicId_ends_with', alias?: string  } 
  | { name: 'publicId_not_ends_with', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'src_not', alias?: string  } 
  | { name: 'src_in', alias?: string  } 
  | { name: 'src_not_in', alias?: string  } 
  | { name: 'src_lt', alias?: string  } 
  | { name: 'src_lte', alias?: string  } 
  | { name: 'src_gt', alias?: string  } 
  | { name: 'src_gte', alias?: string  } 
  | { name: 'src_contains', alias?: string  } 
  | { name: 'src_not_contains', alias?: string  } 
  | { name: 'src_starts_with', alias?: string  } 
  | { name: 'src_not_starts_with', alias?: string  } 
  | { name: 'src_ends_with', alias?: string  } 
  | { name: 'src_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  category?: ProjectCategoryWhereInput | null
  author?: UserWhereInput | null
  album?: ProjectAlbumWhereInput | null
  contents_every?: ProjectContentWhereInput | null
  contents_some?: ProjectContentWhereInput | null
  contents_none?: ProjectContentWhereInput | null
  tags_every?: ProjectTagWhereInput | null
  tags_some?: ProjectTagWhereInput | null
  tags_none?: ProjectTagWhereInput | null
  AND?: ProjectWhereInput[]
  OR?: ProjectWhereInput[]
  NOT?: ProjectWhereInput[]
}
export type ProjectWhereInputInputObject =
  | Extract<keyof ProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents_every', alias?: string  } 
  | { name: 'contents_some', alias?: string  } 
  | { name: 'contents_none', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  contents_every?: ProjectCategoryContentWhereInput | null
  contents_some?: ProjectCategoryContentWhereInput | null
  contents_none?: ProjectCategoryContentWhereInput | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  AND?: ProjectCategoryWhereInput[]
  OR?: ProjectCategoryWhereInput[]
  NOT?: ProjectCategoryWhereInput[]
}
export type ProjectCategoryWhereInputInputObject =
  | Extract<keyof ProjectCategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'contents_every', alias?: string  } 
  | { name: 'contents_some', alias?: string  } 
  | { name: 'contents_none', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  category?: ProjectCategoryWhereInput | null
  language?: ProjectCategoryLngWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  imageAlt?: string | null
  imageAlt_not?: string | null
  imageAlt_in?: string[]
  imageAlt_not_in?: string[]
  imageAlt_lt?: string | null
  imageAlt_lte?: string | null
  imageAlt_gt?: string | null
  imageAlt_gte?: string | null
  imageAlt_contains?: string | null
  imageAlt_not_contains?: string | null
  imageAlt_starts_with?: string | null
  imageAlt_not_starts_with?: string | null
  imageAlt_ends_with?: string | null
  imageAlt_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  AND?: ProjectCategoryContentWhereInput[]
  OR?: ProjectCategoryContentWhereInput[]
  NOT?: ProjectCategoryContentWhereInput[]
}
export type ProjectCategoryContentWhereInputInputObject =
  | Extract<keyof ProjectCategoryContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'imageAlt_not', alias?: string  } 
  | { name: 'imageAlt_in', alias?: string  } 
  | { name: 'imageAlt_not_in', alias?: string  } 
  | { name: 'imageAlt_lt', alias?: string  } 
  | { name: 'imageAlt_lte', alias?: string  } 
  | { name: 'imageAlt_gt', alias?: string  } 
  | { name: 'imageAlt_gte', alias?: string  } 
  | { name: 'imageAlt_contains', alias?: string  } 
  | { name: 'imageAlt_not_contains', alias?: string  } 
  | { name: 'imageAlt_starts_with', alias?: string  } 
  | { name: 'imageAlt_not_starts_with', alias?: string  } 
  | { name: 'imageAlt_ends_with', alias?: string  } 
  | { name: 'imageAlt_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  categories_every?: ProjectCategoryContentWhereInput | null
  categories_some?: ProjectCategoryContentWhereInput | null
  categories_none?: ProjectCategoryContentWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: ProjectCategoryLngWhereInput[]
  OR?: ProjectCategoryLngWhereInput[]
  NOT?: ProjectCategoryLngWhereInput[]
}
export type ProjectCategoryLngWhereInputInputObject =
  | Extract<keyof ProjectCategoryLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'categories_every', alias?: string  } 
  | { name: 'categories_some', alias?: string  } 
  | { name: 'categories_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectAlbumWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  project?: ProjectWhereInput | null
  images_every?: ProjectImageWhereInput | null
  images_some?: ProjectImageWhereInput | null
  images_none?: ProjectImageWhereInput | null
  AND?: ProjectAlbumWhereInput[]
  OR?: ProjectAlbumWhereInput[]
  NOT?: ProjectAlbumWhereInput[]
}
export type ProjectAlbumWhereInputInputObject =
  | Extract<keyof ProjectAlbumWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  album?: ProjectAlbumWhereInput | null
  publicId?: string | null
  publicId_not?: string | null
  publicId_in?: string[]
  publicId_not_in?: string[]
  publicId_lt?: string | null
  publicId_lte?: string | null
  publicId_gt?: string | null
  publicId_gte?: string | null
  publicId_contains?: string | null
  publicId_not_contains?: string | null
  publicId_starts_with?: string | null
  publicId_not_starts_with?: string | null
  publicId_ends_with?: string | null
  publicId_not_ends_with?: string | null
  src?: string | null
  src_not?: string | null
  src_in?: string[]
  src_not_in?: string[]
  src_lt?: string | null
  src_lte?: string | null
  src_gt?: string | null
  src_gte?: string | null
  src_contains?: string | null
  src_not_contains?: string | null
  src_starts_with?: string | null
  src_not_starts_with?: string | null
  src_ends_with?: string | null
  src_not_ends_with?: string | null
  contents?: ProjectImageContentWhereInput | null
  AND?: ProjectImageWhereInput[]
  OR?: ProjectImageWhereInput[]
  NOT?: ProjectImageWhereInput[]
}
export type ProjectImageWhereInputInputObject =
  | Extract<keyof ProjectImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'publicId_not', alias?: string  } 
  | { name: 'publicId_in', alias?: string  } 
  | { name: 'publicId_not_in', alias?: string  } 
  | { name: 'publicId_lt', alias?: string  } 
  | { name: 'publicId_lte', alias?: string  } 
  | { name: 'publicId_gt', alias?: string  } 
  | { name: 'publicId_gte', alias?: string  } 
  | { name: 'publicId_contains', alias?: string  } 
  | { name: 'publicId_not_contains', alias?: string  } 
  | { name: 'publicId_starts_with', alias?: string  } 
  | { name: 'publicId_not_starts_with', alias?: string  } 
  | { name: 'publicId_ends_with', alias?: string  } 
  | { name: 'publicId_not_ends_with', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'src_not', alias?: string  } 
  | { name: 'src_in', alias?: string  } 
  | { name: 'src_not_in', alias?: string  } 
  | { name: 'src_lt', alias?: string  } 
  | { name: 'src_lte', alias?: string  } 
  | { name: 'src_gt', alias?: string  } 
  | { name: 'src_gte', alias?: string  } 
  | { name: 'src_contains', alias?: string  } 
  | { name: 'src_not_contains', alias?: string  } 
  | { name: 'src_starts_with', alias?: string  } 
  | { name: 'src_not_starts_with', alias?: string  } 
  | { name: 'src_ends_with', alias?: string  } 
  | { name: 'src_not_ends_with', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  image?: ProjectImageWhereInput | null
  language?: ProjectImageLngWhereInput | null
  alt?: string | null
  alt_not?: string | null
  alt_in?: string[]
  alt_not_in?: string[]
  alt_lt?: string | null
  alt_lte?: string | null
  alt_gt?: string | null
  alt_gte?: string | null
  alt_contains?: string | null
  alt_not_contains?: string | null
  alt_starts_with?: string | null
  alt_not_starts_with?: string | null
  alt_ends_with?: string | null
  alt_not_ends_with?: string | null
  AND?: ProjectImageContentWhereInput[]
  OR?: ProjectImageContentWhereInput[]
  NOT?: ProjectImageContentWhereInput[]
}
export type ProjectImageContentWhereInputInputObject =
  | Extract<keyof ProjectImageContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  | { name: 'alt_not', alias?: string  } 
  | { name: 'alt_in', alias?: string  } 
  | { name: 'alt_not_in', alias?: string  } 
  | { name: 'alt_lt', alias?: string  } 
  | { name: 'alt_lte', alias?: string  } 
  | { name: 'alt_gt', alias?: string  } 
  | { name: 'alt_gte', alias?: string  } 
  | { name: 'alt_contains', alias?: string  } 
  | { name: 'alt_not_contains', alias?: string  } 
  | { name: 'alt_starts_with', alias?: string  } 
  | { name: 'alt_not_starts_with', alias?: string  } 
  | { name: 'alt_ends_with', alias?: string  } 
  | { name: 'alt_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  images_every?: ProjectImageContentWhereInput | null
  images_some?: ProjectImageContentWhereInput | null
  images_none?: ProjectImageContentWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: ProjectImageLngWhereInput[]
  OR?: ProjectImageLngWhereInput[]
  NOT?: ProjectImageLngWhereInput[]
}
export type ProjectImageLngWhereInputInputObject =
  | Extract<keyof ProjectImageLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  project?: ProjectWhereInput | null
  language?: ProjectLngWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  AND?: ProjectContentWhereInput[]
  OR?: ProjectContentWhereInput[]
  NOT?: ProjectContentWhereInput[]
}
export type ProjectContentWhereInputInputObject =
  | Extract<keyof ProjectContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  projects_every?: ProjectContentWhereInput | null
  projects_some?: ProjectContentWhereInput | null
  projects_none?: ProjectContentWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: ProjectLngWhereInput[]
  OR?: ProjectLngWhereInput[]
  NOT?: ProjectLngWhereInput[]
}
export type ProjectLngWhereInputInputObject =
  | Extract<keyof ProjectLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  language?: ProjectTagLngWhereInput | null
  contents?: ProjectTagContentWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  AND?: ProjectTagWhereInput[]
  OR?: ProjectTagWhereInput[]
  NOT?: ProjectTagWhereInput[]
}
export type ProjectTagWhereInputInputObject =
  | Extract<keyof ProjectTagWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  tags_every?: ProjectTagWhereInput | null
  tags_some?: ProjectTagWhereInput | null
  tags_none?: ProjectTagWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: ProjectTagLngWhereInput[]
  OR?: ProjectTagLngWhereInput[]
  NOT?: ProjectTagLngWhereInput[]
}
export type ProjectTagLngWhereInputInputObject =
  | Extract<keyof ProjectTagLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  tag?: ProjectTagWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: ProjectTagContentWhereInput[]
  OR?: ProjectTagContentWhereInput[]
  NOT?: ProjectTagContentWhereInput[]
}
export type ProjectTagContentWhereInputInputObject =
  | Extract<keyof ProjectTagContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CommentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  author?: UserWhereInput | null
  post?: PostWhereInput | null
  AND?: CommentWhereInput[]
  OR?: CommentWhereInput[]
  NOT?: CommentWhereInput[]
}
export type CommentWhereInputInputObject =
  | Extract<keyof CommentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'post', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  language?: PostLngWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  imageAlt?: string | null
  imageAlt_not?: string | null
  imageAlt_in?: string[]
  imageAlt_not_in?: string[]
  imageAlt_lt?: string | null
  imageAlt_lte?: string | null
  imageAlt_gt?: string | null
  imageAlt_gte?: string | null
  imageAlt_contains?: string | null
  imageAlt_not_contains?: string | null
  imageAlt_starts_with?: string | null
  imageAlt_not_starts_with?: string | null
  imageAlt_ends_with?: string | null
  imageAlt_not_ends_with?: string | null
  post?: PostWhereInput | null
  AND?: PostContentWhereInput[]
  OR?: PostContentWhereInput[]
  NOT?: PostContentWhereInput[]
}
export type PostContentWhereInputInputObject =
  | Extract<keyof PostContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'imageAlt_not', alias?: string  } 
  | { name: 'imageAlt_in', alias?: string  } 
  | { name: 'imageAlt_not_in', alias?: string  } 
  | { name: 'imageAlt_lt', alias?: string  } 
  | { name: 'imageAlt_lte', alias?: string  } 
  | { name: 'imageAlt_gt', alias?: string  } 
  | { name: 'imageAlt_gte', alias?: string  } 
  | { name: 'imageAlt_contains', alias?: string  } 
  | { name: 'imageAlt_not_contains', alias?: string  } 
  | { name: 'imageAlt_starts_with', alias?: string  } 
  | { name: 'imageAlt_not_starts_with', alias?: string  } 
  | { name: 'imageAlt_ends_with', alias?: string  } 
  | { name: 'imageAlt_not_ends_with', alias?: string  } 
  | { name: 'post', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  posts_every?: PostContentWhereInput | null
  posts_some?: PostContentWhereInput | null
  posts_none?: PostContentWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: PostLngWhereInput[]
  OR?: PostLngWhereInput[]
  NOT?: PostLngWhereInput[]
}
export type PostLngWhereInputInputObject =
  | Extract<keyof PostLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  language?: PostTagLngWhereInput | null
  contents?: PostTagContentWhereInput | null
  AND?: PostTagWhereInput[]
  OR?: PostTagWhereInput[]
  NOT?: PostTagWhereInput[]
}
export type PostTagWhereInputInputObject =
  | Extract<keyof PostTagWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagLngWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  tags_every?: PostTagWhereInput | null
  tags_some?: PostTagWhereInput | null
  tags_none?: PostTagWhereInput | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  locale?: string | null
  locale_not?: string | null
  locale_in?: string[]
  locale_not_in?: string[]
  locale_lt?: string | null
  locale_lte?: string | null
  locale_gt?: string | null
  locale_gte?: string | null
  locale_contains?: string | null
  locale_not_contains?: string | null
  locale_starts_with?: string | null
  locale_not_starts_with?: string | null
  locale_ends_with?: string | null
  locale_not_ends_with?: string | null
  AND?: PostTagLngWhereInput[]
  OR?: PostTagLngWhereInput[]
  NOT?: PostTagLngWhereInput[]
}
export type PostTagLngWhereInputInputObject =
  | Extract<keyof PostTagLngWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  | { name: 'locale_not', alias?: string  } 
  | { name: 'locale_in', alias?: string  } 
  | { name: 'locale_not_in', alias?: string  } 
  | { name: 'locale_lt', alias?: string  } 
  | { name: 'locale_lte', alias?: string  } 
  | { name: 'locale_gt', alias?: string  } 
  | { name: 'locale_gte', alias?: string  } 
  | { name: 'locale_contains', alias?: string  } 
  | { name: 'locale_not_contains', alias?: string  } 
  | { name: 'locale_starts_with', alias?: string  } 
  | { name: 'locale_not_starts_with', alias?: string  } 
  | { name: 'locale_ends_with', alias?: string  } 
  | { name: 'locale_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagContentWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  tag?: PostTagWhereInput | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: PostTagContentWhereInput[]
  OR?: PostTagContentWhereInput[]
  NOT?: PostTagContentWhereInput[]
}
export type PostTagContentWhereInputInputObject =
  | Extract<keyof PostTagContentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostContentWhereUniqueInput {
  id?: undefined | null
}
export type PostContentWhereUniqueInputInputObject =
  | Extract<keyof PostContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostLngWhereUniqueInput {
  id?: undefined | null
  country?: string | null
  locale?: string | null
}
export type PostLngWhereUniqueInputInputObject =
  | Extract<keyof PostLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface CommentWhereUniqueInput {
  id?: undefined | null
}
export type CommentWhereUniqueInputInputObject =
  | Extract<keyof CommentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostTagWhereUniqueInput {
  id?: undefined | null
}
export type PostTagWhereUniqueInputInputObject =
  | Extract<keyof PostTagWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostTagContentWhereUniqueInput {
  id?: undefined | null
}
export type PostTagContentWhereUniqueInputInputObject =
  | Extract<keyof PostTagContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostTagLngWhereUniqueInput {
  id?: undefined | null
}
export type PostTagLngWhereUniqueInputInputObject =
  | Extract<keyof PostTagLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: undefined | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface ProfileWhereUniqueInput {
  id?: undefined | null
}
export type ProfileWhereUniqueInputInputObject =
  | Extract<keyof ProfileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AvatarWhereUniqueInput {
  id?: undefined | null
}
export type AvatarWhereUniqueInputInputObject =
  | Extract<keyof AvatarWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectWhereUniqueInput {
  id?: undefined | null
  slug?: string | null
}
export type ProjectWhereUniqueInputInputObject =
  | Extract<keyof ProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  
export interface ProjectContentWhereUniqueInput {
  id?: undefined | null
}
export type ProjectContentWhereUniqueInputInputObject =
  | Extract<keyof ProjectContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectLngWhereUniqueInput {
  id?: undefined | null
  country?: string | null
  locale?: string | null
}
export type ProjectLngWhereUniqueInputInputObject =
  | Extract<keyof ProjectLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagWhereUniqueInput {
  id?: undefined | null
}
export type ProjectTagWhereUniqueInputInputObject =
  | Extract<keyof ProjectTagWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectTagContentWhereUniqueInput {
  id?: undefined | null
}
export type ProjectTagContentWhereUniqueInputInputObject =
  | Extract<keyof ProjectTagContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectTagLngWhereUniqueInput {
  id?: undefined | null
}
export type ProjectTagLngWhereUniqueInputInputObject =
  | Extract<keyof ProjectTagLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectCategoryWhereUniqueInput {
  id?: undefined | null
  slug?: string | null
}
export type ProjectCategoryWhereUniqueInputInputObject =
  | Extract<keyof ProjectCategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  
export interface ProjectCategoryContentWhereUniqueInput {
  id?: undefined | null
}
export type ProjectCategoryContentWhereUniqueInputInputObject =
  | Extract<keyof ProjectCategoryContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectCategoryLngWhereUniqueInput {
  id?: undefined | null
  country?: string | null
  locale?: string | null
}
export type ProjectCategoryLngWhereUniqueInputInputObject =
  | Extract<keyof ProjectCategoryLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectAlbumWhereUniqueInput {
  id?: undefined | null
}
export type ProjectAlbumWhereUniqueInputInputObject =
  | Extract<keyof ProjectAlbumWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectImageWhereUniqueInput {
  id?: undefined | null
}
export type ProjectImageWhereUniqueInputInputObject =
  | Extract<keyof ProjectImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectImageContentWhereUniqueInput {
  id?: undefined | null
}
export type ProjectImageContentWhereUniqueInputInputObject =
  | Extract<keyof ProjectImageContentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectImageLngWhereUniqueInput {
  id?: undefined | null
  country?: string | null
  locale?: string | null
}
export type ProjectImageLngWhereUniqueInputInputObject =
  | Extract<keyof ProjectImageLngWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostCreateInput {
  author?: UserCreateOneWithoutPostsInput
  slug?: string
  isPublished?: boolean | null
  imageSrc?: string
  contents?: PostContentCreateManyWithoutPostInput | null
  tags?: PostTagCreateManyInput | null
  comments?: CommentCreateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserCreateManyWithoutPostLikesInput | null
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  profile?: ProfileCreateOneWithoutUserInput | null
  postLikes?: PostCreateManyWithoutLikedByInput | null
  projects?: ProjectCreateManyWithoutAuthorInput | null
  comments?: CommentCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProfileCreateOneWithoutUserInput {
  create?: ProfileCreateWithoutUserInput | null
  connect?: ProfileWhereUniqueInput | null
}
export type ProfileCreateOneWithoutUserInputInputObject =
  | Extract<keyof ProfileCreateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProfileCreateWithoutUserInput {
  bio?: string
  avatar?: AvatarCreateOneInput
}
export type ProfileCreateWithoutUserInputInputObject =
  | Extract<keyof ProfileCreateWithoutUserInput, string>
  | { name: 'bio', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface AvatarCreateOneInput {
  create?: AvatarCreateInput | null
  connect?: AvatarWhereUniqueInput | null
}
export type AvatarCreateOneInputInputObject =
  | Extract<keyof AvatarCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AvatarCreateInput {
  publicId?: string | null
  src?: string | null
}
export type AvatarCreateInputInputObject =
  | Extract<keyof AvatarCreateInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface PostCreateManyWithoutLikedByInput {
  create?: PostCreateWithoutLikedByInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutLikedByInputInputObject =
  | Extract<keyof PostCreateManyWithoutLikedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutLikedByInput {
  author?: UserCreateOneWithoutPostsInput
  slug?: string
  isPublished?: boolean | null
  imageSrc?: string
  contents?: PostContentCreateManyWithoutPostInput | null
  tags?: PostTagCreateManyInput | null
  comments?: CommentCreateManyWithoutPostInput | null
  likes?: number | null
}
export type PostCreateWithoutLikedByInputInputObject =
  | Extract<keyof PostCreateWithoutLikedByInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  
export interface PostContentCreateManyWithoutPostInput {
  create?: PostContentCreateWithoutPostInput[]
  connect?: PostContentWhereUniqueInput[]
}
export type PostContentCreateManyWithoutPostInputInputObject =
  | Extract<keyof PostContentCreateManyWithoutPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostContentCreateWithoutPostInput {
  language?: PostLngCreateOneWithoutPostsInput
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string
}
export type PostContentCreateWithoutPostInputInputObject =
  | Extract<keyof PostContentCreateWithoutPostInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  
export interface PostLngCreateOneWithoutPostsInput {
  create?: PostLngCreateWithoutPostsInput | null
  connect?: PostLngWhereUniqueInput | null
}
export type PostLngCreateOneWithoutPostsInputInputObject =
  | Extract<keyof PostLngCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostLngCreateWithoutPostsInput {
  country?: string
  locale?: string | null
}
export type PostLngCreateWithoutPostsInputInputObject =
  | Extract<keyof PostLngCreateWithoutPostsInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostTagCreateManyInput {
  create?: PostTagCreateInput[]
  connect?: PostTagWhereUniqueInput[]
}
export type PostTagCreateManyInputInputObject =
  | Extract<keyof PostTagCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagCreateInput {
  color?: string
  language?: PostTagLngCreateOneWithoutTagsInput
  contents?: PostTagContentCreateOneWithoutTagInput
}
export type PostTagCreateInputInputObject =
  | Extract<keyof PostTagCreateInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface PostTagLngCreateOneWithoutTagsInput {
  create?: PostTagLngCreateWithoutTagsInput | null
  connect?: PostTagLngWhereUniqueInput | null
}
export type PostTagLngCreateOneWithoutTagsInputInputObject =
  | Extract<keyof PostTagLngCreateOneWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagLngCreateWithoutTagsInput {
  country?: string
  locale?: string
}
export type PostTagLngCreateWithoutTagsInputInputObject =
  | Extract<keyof PostTagLngCreateWithoutTagsInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostTagContentCreateOneWithoutTagInput {
  create?: PostTagContentCreateWithoutTagInput | null
  connect?: PostTagContentWhereUniqueInput | null
}
export type PostTagContentCreateOneWithoutTagInputInputObject =
  | Extract<keyof PostTagContentCreateOneWithoutTagInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagContentCreateWithoutTagInput {
  title?: string
}
export type PostTagContentCreateWithoutTagInputInputObject =
  | Extract<keyof PostTagContentCreateWithoutTagInput, string>
  | { name: 'title', alias?: string  } 
  
export interface CommentCreateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[]
  connect?: CommentWhereUniqueInput[]
}
export type CommentCreateManyWithoutPostInputInputObject =
  | Extract<keyof CommentCreateManyWithoutPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CommentCreateWithoutPostInput {
  author?: UserCreateOneWithoutCommentsInput
}
export type CommentCreateWithoutPostInputInputObject =
  | Extract<keyof CommentCreateWithoutPostInput, string>
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCommentsInputInputObject =
  | Extract<keyof UserCreateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCommentsInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  profile?: ProfileCreateOneWithoutUserInput | null
  posts?: PostCreateManyWithoutAuthorInput | null
  postLikes?: PostCreateManyWithoutLikedByInput | null
  projects?: ProjectCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutCommentsInputInputObject =
  | Extract<keyof UserCreateWithoutCommentsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  slug?: string
  isPublished?: boolean | null
  imageSrc?: string
  contents?: PostContentCreateManyWithoutPostInput | null
  tags?: PostTagCreateManyInput | null
  comments?: CommentCreateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserCreateManyWithoutPostLikesInput | null
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface UserCreateManyWithoutPostLikesInput {
  create?: UserCreateWithoutPostLikesInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutPostLikesInputInputObject =
  | Extract<keyof UserCreateManyWithoutPostLikesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostLikesInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  profile?: ProfileCreateOneWithoutUserInput | null
  posts?: PostCreateManyWithoutAuthorInput | null
  projects?: ProjectCreateManyWithoutAuthorInput | null
  comments?: CommentCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutPostLikesInputInputObject =
  | Extract<keyof UserCreateWithoutPostLikesInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProjectCreateManyWithoutAuthorInput {
  create?: ProjectCreateWithoutAuthorInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutAuthorInput {
  slug?: string
  category?: ProjectCategoryCreateOneWithoutProjectsInput
  album?: ProjectAlbumCreateOneWithoutProjectInput
  contents?: ProjectContentCreateManyWithoutProjectInput | null
  tags?: ProjectTagCreateManyInput | null
}
export type ProjectCreateWithoutAuthorInputInputObject =
  | Extract<keyof ProjectCreateWithoutAuthorInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectCategoryCreateOneWithoutProjectsInput {
  create?: ProjectCategoryCreateWithoutProjectsInput | null
  connect?: ProjectCategoryWhereUniqueInput | null
}
export type ProjectCategoryCreateOneWithoutProjectsInputInputObject =
  | Extract<keyof ProjectCategoryCreateOneWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryCreateWithoutProjectsInput {
  contents?: ProjectCategoryContentCreateManyWithoutCategoryInput | null
  slug?: string
  image?: string
}
export type ProjectCategoryCreateWithoutProjectsInputInputObject =
  | Extract<keyof ProjectCategoryCreateWithoutProjectsInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface ProjectCategoryContentCreateManyWithoutCategoryInput {
  create?: ProjectCategoryContentCreateWithoutCategoryInput[]
  connect?: ProjectCategoryContentWhereUniqueInput[]
}
export type ProjectCategoryContentCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCategoryContentCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryContentCreateWithoutCategoryInput {
  language?: ProjectCategoryLngCreateOneWithoutCategoriesInput
  title?: string
  text?: string
  imageAlt?: string
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentCreateWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCategoryContentCreateWithoutCategoryInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryLngCreateOneWithoutCategoriesInput {
  create?: ProjectCategoryLngCreateWithoutCategoriesInput | null
  connect?: ProjectCategoryLngWhereUniqueInput | null
}
export type ProjectCategoryLngCreateOneWithoutCategoriesInputInputObject =
  | Extract<keyof ProjectCategoryLngCreateOneWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryLngCreateWithoutCategoriesInput {
  country?: string
  locale?: string | null
}
export type ProjectCategoryLngCreateWithoutCategoriesInputInputObject =
  | Extract<keyof ProjectCategoryLngCreateWithoutCategoriesInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectAlbumCreateOneWithoutProjectInput {
  create?: ProjectAlbumCreateWithoutProjectInput | null
  connect?: ProjectAlbumWhereUniqueInput | null
}
export type ProjectAlbumCreateOneWithoutProjectInputInputObject =
  | Extract<keyof ProjectAlbumCreateOneWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectAlbumCreateWithoutProjectInput {
  images?: ProjectImageCreateManyWithoutAlbumInput | null
}
export type ProjectAlbumCreateWithoutProjectInputInputObject =
  | Extract<keyof ProjectAlbumCreateWithoutProjectInput, string>
  | { name: 'images', alias?: string  } 
  
export interface ProjectImageCreateManyWithoutAlbumInput {
  create?: ProjectImageCreateWithoutAlbumInput[]
  connect?: ProjectImageWhereUniqueInput[]
}
export type ProjectImageCreateManyWithoutAlbumInputInputObject =
  | Extract<keyof ProjectImageCreateManyWithoutAlbumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageCreateWithoutAlbumInput {
  publicId?: string
  src?: string
  contents?: ProjectImageContentCreateOneWithoutImageInput
}
export type ProjectImageCreateWithoutAlbumInputInputObject =
  | Extract<keyof ProjectImageCreateWithoutAlbumInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface ProjectImageContentCreateOneWithoutImageInput {
  create?: ProjectImageContentCreateWithoutImageInput | null
  connect?: ProjectImageContentWhereUniqueInput | null
}
export type ProjectImageContentCreateOneWithoutImageInputInputObject =
  | Extract<keyof ProjectImageContentCreateOneWithoutImageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageContentCreateWithoutImageInput {
  language?: ProjectImageLngCreateOneWithoutImagesInput
  alt?: string
}
export type ProjectImageContentCreateWithoutImageInputInputObject =
  | Extract<keyof ProjectImageContentCreateWithoutImageInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageLngCreateOneWithoutImagesInput {
  create?: ProjectImageLngCreateWithoutImagesInput | null
  connect?: ProjectImageLngWhereUniqueInput | null
}
export type ProjectImageLngCreateOneWithoutImagesInputInputObject =
  | Extract<keyof ProjectImageLngCreateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageLngCreateWithoutImagesInput {
  country?: string
  locale?: string | null
}
export type ProjectImageLngCreateWithoutImagesInputInputObject =
  | Extract<keyof ProjectImageLngCreateWithoutImagesInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectContentCreateManyWithoutProjectInput {
  create?: ProjectContentCreateWithoutProjectInput[]
  connect?: ProjectContentWhereUniqueInput[]
}
export type ProjectContentCreateManyWithoutProjectInputInputObject =
  | Extract<keyof ProjectContentCreateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectContentCreateWithoutProjectInput {
  language?: ProjectLngCreateOneWithoutProjectsInput
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentCreateWithoutProjectInputInputObject =
  | Extract<keyof ProjectContentCreateWithoutProjectInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectLngCreateOneWithoutProjectsInput {
  create?: ProjectLngCreateWithoutProjectsInput | null
  connect?: ProjectLngWhereUniqueInput | null
}
export type ProjectLngCreateOneWithoutProjectsInputInputObject =
  | Extract<keyof ProjectLngCreateOneWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectLngCreateWithoutProjectsInput {
  country?: string
  locale?: string | null
}
export type ProjectLngCreateWithoutProjectsInputInputObject =
  | Extract<keyof ProjectLngCreateWithoutProjectsInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagCreateManyInput {
  create?: ProjectTagCreateInput[]
  connect?: ProjectTagWhereUniqueInput[]
}
export type ProjectTagCreateManyInputInputObject =
  | Extract<keyof ProjectTagCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagCreateInput {
  language?: ProjectTagLngCreateOneWithoutTagsInput
  contents?: ProjectTagContentCreateOneWithoutTagInput
  title?: string
  color?: string | null
}
export type ProjectTagCreateInputInputObject =
  | Extract<keyof ProjectTagCreateInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagLngCreateOneWithoutTagsInput {
  create?: ProjectTagLngCreateWithoutTagsInput | null
  connect?: ProjectTagLngWhereUniqueInput | null
}
export type ProjectTagLngCreateOneWithoutTagsInputInputObject =
  | Extract<keyof ProjectTagLngCreateOneWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagLngCreateWithoutTagsInput {
  country?: string
  locale?: string
}
export type ProjectTagLngCreateWithoutTagsInputInputObject =
  | Extract<keyof ProjectTagLngCreateWithoutTagsInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagContentCreateOneWithoutTagInput {
  create?: ProjectTagContentCreateWithoutTagInput | null
  connect?: ProjectTagContentWhereUniqueInput | null
}
export type ProjectTagContentCreateOneWithoutTagInputInputObject =
  | Extract<keyof ProjectTagContentCreateOneWithoutTagInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagContentCreateWithoutTagInput {
  title?: string | null
}
export type ProjectTagContentCreateWithoutTagInputInputObject =
  | Extract<keyof ProjectTagContentCreateWithoutTagInput, string>
  | { name: 'title', alias?: string  } 
  
export interface CommentCreateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[]
  connect?: CommentWhereUniqueInput[]
}
export type CommentCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof CommentCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CommentCreateWithoutAuthorInput {
  post?: PostCreateOneWithoutCommentsInput
}
export type CommentCreateWithoutAuthorInputInputObject =
  | Extract<keyof CommentCreateWithoutAuthorInput, string>
  | { name: 'post', alias?: string  } 
  
export interface PostCreateOneWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput | null
  connect?: PostWhereUniqueInput | null
}
export type PostCreateOneWithoutCommentsInputInputObject =
  | Extract<keyof PostCreateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutCommentsInput {
  author?: UserCreateOneWithoutPostsInput
  slug?: string
  isPublished?: boolean | null
  imageSrc?: string
  contents?: PostContentCreateManyWithoutPostInput | null
  tags?: PostTagCreateManyInput | null
  likes?: number | null
  likedBy?: UserCreateManyWithoutPostLikesInput | null
}
export type PostCreateWithoutCommentsInputInputObject =
  | Extract<keyof PostCreateWithoutCommentsInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface PostUpdateInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  contents?: PostContentUpdateManyWithoutPostInput | null
  tags?: PostTagUpdateManyInput | null
  comments?: CommentUpdateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserUpdateManyWithoutPostLikesInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  profile?: ProfileUpdateOneWithoutUserInput | null
  postLikes?: PostUpdateManyWithoutLikedByInput | null
  projects?: ProjectUpdateManyWithoutAuthorInput | null
  comments?: CommentUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProfileUpdateOneWithoutUserInput {
  create?: ProfileCreateWithoutUserInput | null
  update?: ProfileUpdateWithoutUserDataInput | null
  upsert?: ProfileUpsertWithoutUserInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProfileWhereUniqueInput | null
}
export type ProfileUpdateOneWithoutUserInputInputObject =
  | Extract<keyof ProfileUpdateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProfileUpdateWithoutUserDataInput {
  bio?: string | null
  avatar?: AvatarUpdateOneRequiredInput | null
}
export type ProfileUpdateWithoutUserDataInputInputObject =
  | Extract<keyof ProfileUpdateWithoutUserDataInput, string>
  | { name: 'bio', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface AvatarUpdateOneRequiredInput {
  create?: AvatarCreateInput | null
  update?: AvatarUpdateDataInput | null
  upsert?: AvatarUpsertNestedInput | null
  connect?: AvatarWhereUniqueInput | null
}
export type AvatarUpdateOneRequiredInputInputObject =
  | Extract<keyof AvatarUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AvatarUpdateDataInput {
  publicId?: string | null
  src?: string | null
}
export type AvatarUpdateDataInputInputObject =
  | Extract<keyof AvatarUpdateDataInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface AvatarUpsertNestedInput {
  update?: AvatarUpdateDataInput
  create?: AvatarCreateInput
}
export type AvatarUpsertNestedInputInputObject =
  | Extract<keyof AvatarUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProfileUpsertWithoutUserInput {
  update?: ProfileUpdateWithoutUserDataInput
  create?: ProfileCreateWithoutUserInput
}
export type ProfileUpsertWithoutUserInputInputObject =
  | Extract<keyof ProfileUpsertWithoutUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyWithoutLikedByInput {
  create?: PostCreateWithoutLikedByInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutLikedByInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutLikedByInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutLikedByInputInputObject =
  | Extract<keyof PostUpdateManyWithoutLikedByInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutLikedByInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutLikedByDataInput
}
export type PostUpdateWithWhereUniqueWithoutLikedByInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutLikedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutLikedByDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  contents?: PostContentUpdateManyWithoutPostInput | null
  tags?: PostTagUpdateManyInput | null
  comments?: CommentUpdateManyWithoutPostInput | null
  likes?: number | null
}
export type PostUpdateWithoutLikedByDataInputInputObject =
  | Extract<keyof PostUpdateWithoutLikedByDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  
export interface PostContentUpdateManyWithoutPostInput {
  create?: PostContentCreateWithoutPostInput[]
  delete?: PostContentWhereUniqueInput[]
  connect?: PostContentWhereUniqueInput[]
  set?: PostContentWhereUniqueInput[]
  disconnect?: PostContentWhereUniqueInput[]
  update?: PostContentUpdateWithWhereUniqueWithoutPostInput[]
  upsert?: PostContentUpsertWithWhereUniqueWithoutPostInput[]
  deleteMany?: PostContentScalarWhereInput[]
  updateMany?: PostContentUpdateManyWithWhereNestedInput[]
}
export type PostContentUpdateManyWithoutPostInputInputObject =
  | Extract<keyof PostContentUpdateManyWithoutPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostContentUpdateWithWhereUniqueWithoutPostInput {
  where?: PostContentWhereUniqueInput
  data?: PostContentUpdateWithoutPostDataInput
}
export type PostContentUpdateWithWhereUniqueWithoutPostInputInputObject =
  | Extract<keyof PostContentUpdateWithWhereUniqueWithoutPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostContentUpdateWithoutPostDataInput {
  language?: PostLngUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string | null
}
export type PostContentUpdateWithoutPostDataInputInputObject =
  | Extract<keyof PostContentUpdateWithoutPostDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  
export interface PostLngUpdateOneRequiredWithoutPostsInput {
  create?: PostLngCreateWithoutPostsInput | null
  update?: PostLngUpdateWithoutPostsDataInput | null
  upsert?: PostLngUpsertWithoutPostsInput | null
  connect?: PostLngWhereUniqueInput | null
}
export type PostLngUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof PostLngUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostLngUpdateWithoutPostsDataInput {
  country?: string | null
  locale?: string | null
}
export type PostLngUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof PostLngUpdateWithoutPostsDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostLngUpsertWithoutPostsInput {
  update?: PostLngUpdateWithoutPostsDataInput
  create?: PostLngCreateWithoutPostsInput
}
export type PostLngUpsertWithoutPostsInputInputObject =
  | Extract<keyof PostLngUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostContentUpsertWithWhereUniqueWithoutPostInput {
  where?: PostContentWhereUniqueInput
  update?: PostContentUpdateWithoutPostDataInput
  create?: PostContentCreateWithoutPostInput
}
export type PostContentUpsertWithWhereUniqueWithoutPostInputInputObject =
  | Extract<keyof PostContentUpsertWithWhereUniqueWithoutPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostContentScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  imageAlt?: string | null
  imageAlt_not?: string | null
  imageAlt_in?: string[]
  imageAlt_not_in?: string[]
  imageAlt_lt?: string | null
  imageAlt_lte?: string | null
  imageAlt_gt?: string | null
  imageAlt_gte?: string | null
  imageAlt_contains?: string | null
  imageAlt_not_contains?: string | null
  imageAlt_starts_with?: string | null
  imageAlt_not_starts_with?: string | null
  imageAlt_ends_with?: string | null
  imageAlt_not_ends_with?: string | null
  AND?: PostContentScalarWhereInput[]
  OR?: PostContentScalarWhereInput[]
  NOT?: PostContentScalarWhereInput[]
}
export type PostContentScalarWhereInputInputObject =
  | Extract<keyof PostContentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'imageAlt_not', alias?: string  } 
  | { name: 'imageAlt_in', alias?: string  } 
  | { name: 'imageAlt_not_in', alias?: string  } 
  | { name: 'imageAlt_lt', alias?: string  } 
  | { name: 'imageAlt_lte', alias?: string  } 
  | { name: 'imageAlt_gt', alias?: string  } 
  | { name: 'imageAlt_gte', alias?: string  } 
  | { name: 'imageAlt_contains', alias?: string  } 
  | { name: 'imageAlt_not_contains', alias?: string  } 
  | { name: 'imageAlt_starts_with', alias?: string  } 
  | { name: 'imageAlt_not_starts_with', alias?: string  } 
  | { name: 'imageAlt_ends_with', alias?: string  } 
  | { name: 'imageAlt_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostContentUpdateManyWithWhereNestedInput {
  where?: PostContentScalarWhereInput
  data?: PostContentUpdateManyDataInput
}
export type PostContentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostContentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostContentUpdateManyDataInput {
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string | null
}
export type PostContentUpdateManyDataInputInputObject =
  | Extract<keyof PostContentUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  
export interface PostTagUpdateManyInput {
  create?: PostTagCreateInput[]
  update?: PostTagUpdateWithWhereUniqueNestedInput[]
  upsert?: PostTagUpsertWithWhereUniqueNestedInput[]
  delete?: PostTagWhereUniqueInput[]
  connect?: PostTagWhereUniqueInput[]
  set?: PostTagWhereUniqueInput[]
  disconnect?: PostTagWhereUniqueInput[]
  deleteMany?: PostTagScalarWhereInput[]
  updateMany?: PostTagUpdateManyWithWhereNestedInput[]
}
export type PostTagUpdateManyInputInputObject =
  | Extract<keyof PostTagUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostTagUpdateWithWhereUniqueNestedInput {
  where?: PostTagWhereUniqueInput
  data?: PostTagUpdateDataInput
}
export type PostTagUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PostTagUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostTagUpdateDataInput {
  color?: string | null
  language?: PostTagLngUpdateOneRequiredWithoutTagsInput | null
  contents?: PostTagContentUpdateOneRequiredWithoutTagInput | null
}
export type PostTagUpdateDataInputInputObject =
  | Extract<keyof PostTagUpdateDataInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface PostTagLngUpdateOneRequiredWithoutTagsInput {
  create?: PostTagLngCreateWithoutTagsInput | null
  update?: PostTagLngUpdateWithoutTagsDataInput | null
  upsert?: PostTagLngUpsertWithoutTagsInput | null
  connect?: PostTagLngWhereUniqueInput | null
}
export type PostTagLngUpdateOneRequiredWithoutTagsInputInputObject =
  | Extract<keyof PostTagLngUpdateOneRequiredWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagLngUpdateWithoutTagsDataInput {
  country?: string | null
  locale?: string | null
}
export type PostTagLngUpdateWithoutTagsDataInputInputObject =
  | Extract<keyof PostTagLngUpdateWithoutTagsDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostTagLngUpsertWithoutTagsInput {
  update?: PostTagLngUpdateWithoutTagsDataInput
  create?: PostTagLngCreateWithoutTagsInput
}
export type PostTagLngUpsertWithoutTagsInputInputObject =
  | Extract<keyof PostTagLngUpsertWithoutTagsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostTagContentUpdateOneRequiredWithoutTagInput {
  create?: PostTagContentCreateWithoutTagInput | null
  update?: PostTagContentUpdateWithoutTagDataInput | null
  upsert?: PostTagContentUpsertWithoutTagInput | null
  connect?: PostTagContentWhereUniqueInput | null
}
export type PostTagContentUpdateOneRequiredWithoutTagInputInputObject =
  | Extract<keyof PostTagContentUpdateOneRequiredWithoutTagInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagContentUpdateWithoutTagDataInput {
  title?: string | null
}
export type PostTagContentUpdateWithoutTagDataInputInputObject =
  | Extract<keyof PostTagContentUpdateWithoutTagDataInput, string>
  | { name: 'title', alias?: string  } 
  
export interface PostTagContentUpsertWithoutTagInput {
  update?: PostTagContentUpdateWithoutTagDataInput
  create?: PostTagContentCreateWithoutTagInput
}
export type PostTagContentUpsertWithoutTagInputInputObject =
  | Extract<keyof PostTagContentUpsertWithoutTagInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostTagUpsertWithWhereUniqueNestedInput {
  where?: PostTagWhereUniqueInput
  update?: PostTagUpdateDataInput
  create?: PostTagCreateInput
}
export type PostTagUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof PostTagUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostTagScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  AND?: PostTagScalarWhereInput[]
  OR?: PostTagScalarWhereInput[]
  NOT?: PostTagScalarWhereInput[]
}
export type PostTagScalarWhereInputInputObject =
  | Extract<keyof PostTagScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagUpdateManyWithWhereNestedInput {
  where?: PostTagScalarWhereInput
  data?: PostTagUpdateManyDataInput
}
export type PostTagUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostTagUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostTagUpdateManyDataInput {
  color?: string | null
}
export type PostTagUpdateManyDataInputInputObject =
  | Extract<keyof PostTagUpdateManyDataInput, string>
  | { name: 'color', alias?: string  } 
  
export interface CommentUpdateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[]
  delete?: CommentWhereUniqueInput[]
  connect?: CommentWhereUniqueInput[]
  set?: CommentWhereUniqueInput[]
  disconnect?: CommentWhereUniqueInput[]
  update?: CommentUpdateWithWhereUniqueWithoutPostInput[]
  upsert?: CommentUpsertWithWhereUniqueWithoutPostInput[]
  deleteMany?: CommentScalarWhereInput[]
}
export type CommentUpdateManyWithoutPostInputInputObject =
  | Extract<keyof CommentUpdateManyWithoutPostInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where?: CommentWhereUniqueInput
  data?: CommentUpdateWithoutPostDataInput
}
export type CommentUpdateWithWhereUniqueWithoutPostInputInputObject =
  | Extract<keyof CommentUpdateWithWhereUniqueWithoutPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CommentUpdateWithoutPostDataInput {
  author?: UserUpdateOneRequiredWithoutCommentsInput | null
}
export type CommentUpdateWithoutPostDataInputInputObject =
  | Extract<keyof CommentUpdateWithoutPostDataInput, string>
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput | null
  update?: UserUpdateWithoutCommentsDataInput | null
  upsert?: UserUpsertWithoutCommentsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCommentsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCommentsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  profile?: ProfileUpdateOneWithoutUserInput | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  postLikes?: PostUpdateManyWithoutLikedByInput | null
  projects?: ProjectUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutCommentsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCommentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  contents?: PostContentUpdateManyWithoutPostInput | null
  tags?: PostTagUpdateManyInput | null
  comments?: CommentUpdateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserUpdateManyWithoutPostLikesInput | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface UserUpdateManyWithoutPostLikesInput {
  create?: UserCreateWithoutPostLikesInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutPostLikesInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutPostLikesInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutPostLikesInputInputObject =
  | Extract<keyof UserUpdateManyWithoutPostLikesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutPostLikesInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutPostLikesDataInput
}
export type UserUpdateWithWhereUniqueWithoutPostLikesInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutPostLikesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutPostLikesDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  profile?: ProfileUpdateOneWithoutUserInput | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  projects?: ProjectUpdateManyWithoutAuthorInput | null
  comments?: CommentUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutPostLikesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostLikesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProjectUpdateManyWithoutAuthorInput {
  create?: ProjectCreateWithoutAuthorInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutAuthorInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutAuthorDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutAuthorDataInput {
  slug?: string | null
  category?: ProjectCategoryUpdateOneRequiredWithoutProjectsInput | null
  album?: ProjectAlbumUpdateOneRequiredWithoutProjectInput | null
  contents?: ProjectContentUpdateManyWithoutProjectInput | null
  tags?: ProjectTagUpdateManyInput | null
}
export type ProjectUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutAuthorDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectCategoryUpdateOneRequiredWithoutProjectsInput {
  create?: ProjectCategoryCreateWithoutProjectsInput | null
  update?: ProjectCategoryUpdateWithoutProjectsDataInput | null
  upsert?: ProjectCategoryUpsertWithoutProjectsInput | null
  connect?: ProjectCategoryWhereUniqueInput | null
}
export type ProjectCategoryUpdateOneRequiredWithoutProjectsInputInputObject =
  | Extract<keyof ProjectCategoryUpdateOneRequiredWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryUpdateWithoutProjectsDataInput {
  contents?: ProjectCategoryContentUpdateManyWithoutCategoryInput | null
  slug?: string | null
  image?: string | null
}
export type ProjectCategoryUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof ProjectCategoryUpdateWithoutProjectsDataInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface ProjectCategoryContentUpdateManyWithoutCategoryInput {
  create?: ProjectCategoryContentCreateWithoutCategoryInput[]
  delete?: ProjectCategoryContentWhereUniqueInput[]
  connect?: ProjectCategoryContentWhereUniqueInput[]
  set?: ProjectCategoryContentWhereUniqueInput[]
  disconnect?: ProjectCategoryContentWhereUniqueInput[]
  update?: ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: ProjectCategoryContentScalarWhereInput[]
  updateMany?: ProjectCategoryContentUpdateManyWithWhereNestedInput[]
}
export type ProjectCategoryContentUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInput {
  where?: ProjectCategoryContentWhereUniqueInput
  data?: ProjectCategoryContentUpdateWithoutCategoryDataInput
}
export type ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectCategoryContentUpdateWithoutCategoryDataInput {
  language?: ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInput | null
  title?: string | null
  text?: string | null
  imageAlt?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateWithoutCategoryDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInput {
  create?: ProjectCategoryLngCreateWithoutCategoriesInput | null
  update?: ProjectCategoryLngUpdateWithoutCategoriesDataInput | null
  upsert?: ProjectCategoryLngUpsertWithoutCategoriesInput | null
  connect?: ProjectCategoryLngWhereUniqueInput | null
}
export type ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInputInputObject =
  | Extract<keyof ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryLngUpdateWithoutCategoriesDataInput {
  country?: string | null
  locale?: string | null
}
export type ProjectCategoryLngUpdateWithoutCategoriesDataInputInputObject =
  | Extract<keyof ProjectCategoryLngUpdateWithoutCategoriesDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectCategoryLngUpsertWithoutCategoriesInput {
  update?: ProjectCategoryLngUpdateWithoutCategoriesDataInput
  create?: ProjectCategoryLngCreateWithoutCategoriesInput
}
export type ProjectCategoryLngUpsertWithoutCategoriesInputInputObject =
  | Extract<keyof ProjectCategoryLngUpsertWithoutCategoriesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInput {
  where?: ProjectCategoryContentWhereUniqueInput
  update?: ProjectCategoryContentUpdateWithoutCategoryDataInput
  create?: ProjectCategoryContentCreateWithoutCategoryInput
}
export type ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCategoryContentUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectCategoryContentScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  imageAlt?: string | null
  imageAlt_not?: string | null
  imageAlt_in?: string[]
  imageAlt_not_in?: string[]
  imageAlt_lt?: string | null
  imageAlt_lte?: string | null
  imageAlt_gt?: string | null
  imageAlt_gte?: string | null
  imageAlt_contains?: string | null
  imageAlt_not_contains?: string | null
  imageAlt_starts_with?: string | null
  imageAlt_not_starts_with?: string | null
  imageAlt_ends_with?: string | null
  imageAlt_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  AND?: ProjectCategoryContentScalarWhereInput[]
  OR?: ProjectCategoryContentScalarWhereInput[]
  NOT?: ProjectCategoryContentScalarWhereInput[]
}
export type ProjectCategoryContentScalarWhereInputInputObject =
  | Extract<keyof ProjectCategoryContentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'imageAlt_not', alias?: string  } 
  | { name: 'imageAlt_in', alias?: string  } 
  | { name: 'imageAlt_not_in', alias?: string  } 
  | { name: 'imageAlt_lt', alias?: string  } 
  | { name: 'imageAlt_lte', alias?: string  } 
  | { name: 'imageAlt_gt', alias?: string  } 
  | { name: 'imageAlt_gte', alias?: string  } 
  | { name: 'imageAlt_contains', alias?: string  } 
  | { name: 'imageAlt_not_contains', alias?: string  } 
  | { name: 'imageAlt_starts_with', alias?: string  } 
  | { name: 'imageAlt_not_starts_with', alias?: string  } 
  | { name: 'imageAlt_ends_with', alias?: string  } 
  | { name: 'imageAlt_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryContentUpdateManyWithWhereNestedInput {
  where?: ProjectCategoryContentScalarWhereInput
  data?: ProjectCategoryContentUpdateManyDataInput
}
export type ProjectCategoryContentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectCategoryContentUpdateManyDataInput {
  title?: string | null
  text?: string | null
  imageAlt?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentUpdateManyDataInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryUpsertWithoutProjectsInput {
  update?: ProjectCategoryUpdateWithoutProjectsDataInput
  create?: ProjectCategoryCreateWithoutProjectsInput
}
export type ProjectCategoryUpsertWithoutProjectsInputInputObject =
  | Extract<keyof ProjectCategoryUpsertWithoutProjectsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectAlbumUpdateOneRequiredWithoutProjectInput {
  create?: ProjectAlbumCreateWithoutProjectInput | null
  update?: ProjectAlbumUpdateWithoutProjectDataInput | null
  upsert?: ProjectAlbumUpsertWithoutProjectInput | null
  connect?: ProjectAlbumWhereUniqueInput | null
}
export type ProjectAlbumUpdateOneRequiredWithoutProjectInputInputObject =
  | Extract<keyof ProjectAlbumUpdateOneRequiredWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectAlbumUpdateWithoutProjectDataInput {
  images?: ProjectImageUpdateManyWithoutAlbumInput | null
}
export type ProjectAlbumUpdateWithoutProjectDataInputInputObject =
  | Extract<keyof ProjectAlbumUpdateWithoutProjectDataInput, string>
  | { name: 'images', alias?: string  } 
  
export interface ProjectImageUpdateManyWithoutAlbumInput {
  create?: ProjectImageCreateWithoutAlbumInput[]
  delete?: ProjectImageWhereUniqueInput[]
  connect?: ProjectImageWhereUniqueInput[]
  set?: ProjectImageWhereUniqueInput[]
  disconnect?: ProjectImageWhereUniqueInput[]
  update?: ProjectImageUpdateWithWhereUniqueWithoutAlbumInput[]
  upsert?: ProjectImageUpsertWithWhereUniqueWithoutAlbumInput[]
  deleteMany?: ProjectImageScalarWhereInput[]
  updateMany?: ProjectImageUpdateManyWithWhereNestedInput[]
}
export type ProjectImageUpdateManyWithoutAlbumInputInputObject =
  | Extract<keyof ProjectImageUpdateManyWithoutAlbumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectImageUpdateWithWhereUniqueWithoutAlbumInput {
  where?: ProjectImageWhereUniqueInput
  data?: ProjectImageUpdateWithoutAlbumDataInput
}
export type ProjectImageUpdateWithWhereUniqueWithoutAlbumInputInputObject =
  | Extract<keyof ProjectImageUpdateWithWhereUniqueWithoutAlbumInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectImageUpdateWithoutAlbumDataInput {
  publicId?: string | null
  src?: string | null
  contents?: ProjectImageContentUpdateOneRequiredWithoutImageInput | null
}
export type ProjectImageUpdateWithoutAlbumDataInputInputObject =
  | Extract<keyof ProjectImageUpdateWithoutAlbumDataInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface ProjectImageContentUpdateOneRequiredWithoutImageInput {
  create?: ProjectImageContentCreateWithoutImageInput | null
  update?: ProjectImageContentUpdateWithoutImageDataInput | null
  upsert?: ProjectImageContentUpsertWithoutImageInput | null
  connect?: ProjectImageContentWhereUniqueInput | null
}
export type ProjectImageContentUpdateOneRequiredWithoutImageInputInputObject =
  | Extract<keyof ProjectImageContentUpdateOneRequiredWithoutImageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageContentUpdateWithoutImageDataInput {
  language?: ProjectImageLngUpdateOneRequiredWithoutImagesInput | null
  alt?: string | null
}
export type ProjectImageContentUpdateWithoutImageDataInputInputObject =
  | Extract<keyof ProjectImageContentUpdateWithoutImageDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageLngUpdateOneRequiredWithoutImagesInput {
  create?: ProjectImageLngCreateWithoutImagesInput | null
  update?: ProjectImageLngUpdateWithoutImagesDataInput | null
  upsert?: ProjectImageLngUpsertWithoutImagesInput | null
  connect?: ProjectImageLngWhereUniqueInput | null
}
export type ProjectImageLngUpdateOneRequiredWithoutImagesInputInputObject =
  | Extract<keyof ProjectImageLngUpdateOneRequiredWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageLngUpdateWithoutImagesDataInput {
  country?: string | null
  locale?: string | null
}
export type ProjectImageLngUpdateWithoutImagesDataInputInputObject =
  | Extract<keyof ProjectImageLngUpdateWithoutImagesDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectImageLngUpsertWithoutImagesInput {
  update?: ProjectImageLngUpdateWithoutImagesDataInput
  create?: ProjectImageLngCreateWithoutImagesInput
}
export type ProjectImageLngUpsertWithoutImagesInputInputObject =
  | Extract<keyof ProjectImageLngUpsertWithoutImagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageContentUpsertWithoutImageInput {
  update?: ProjectImageContentUpdateWithoutImageDataInput
  create?: ProjectImageContentCreateWithoutImageInput
}
export type ProjectImageContentUpsertWithoutImageInputInputObject =
  | Extract<keyof ProjectImageContentUpsertWithoutImageInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageUpsertWithWhereUniqueWithoutAlbumInput {
  where?: ProjectImageWhereUniqueInput
  update?: ProjectImageUpdateWithoutAlbumDataInput
  create?: ProjectImageCreateWithoutAlbumInput
}
export type ProjectImageUpsertWithWhereUniqueWithoutAlbumInputInputObject =
  | Extract<keyof ProjectImageUpsertWithWhereUniqueWithoutAlbumInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  publicId?: string | null
  publicId_not?: string | null
  publicId_in?: string[]
  publicId_not_in?: string[]
  publicId_lt?: string | null
  publicId_lte?: string | null
  publicId_gt?: string | null
  publicId_gte?: string | null
  publicId_contains?: string | null
  publicId_not_contains?: string | null
  publicId_starts_with?: string | null
  publicId_not_starts_with?: string | null
  publicId_ends_with?: string | null
  publicId_not_ends_with?: string | null
  src?: string | null
  src_not?: string | null
  src_in?: string[]
  src_not_in?: string[]
  src_lt?: string | null
  src_lte?: string | null
  src_gt?: string | null
  src_gte?: string | null
  src_contains?: string | null
  src_not_contains?: string | null
  src_starts_with?: string | null
  src_not_starts_with?: string | null
  src_ends_with?: string | null
  src_not_ends_with?: string | null
  AND?: ProjectImageScalarWhereInput[]
  OR?: ProjectImageScalarWhereInput[]
  NOT?: ProjectImageScalarWhereInput[]
}
export type ProjectImageScalarWhereInputInputObject =
  | Extract<keyof ProjectImageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'publicId_not', alias?: string  } 
  | { name: 'publicId_in', alias?: string  } 
  | { name: 'publicId_not_in', alias?: string  } 
  | { name: 'publicId_lt', alias?: string  } 
  | { name: 'publicId_lte', alias?: string  } 
  | { name: 'publicId_gt', alias?: string  } 
  | { name: 'publicId_gte', alias?: string  } 
  | { name: 'publicId_contains', alias?: string  } 
  | { name: 'publicId_not_contains', alias?: string  } 
  | { name: 'publicId_starts_with', alias?: string  } 
  | { name: 'publicId_not_starts_with', alias?: string  } 
  | { name: 'publicId_ends_with', alias?: string  } 
  | { name: 'publicId_not_ends_with', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'src_not', alias?: string  } 
  | { name: 'src_in', alias?: string  } 
  | { name: 'src_not_in', alias?: string  } 
  | { name: 'src_lt', alias?: string  } 
  | { name: 'src_lte', alias?: string  } 
  | { name: 'src_gt', alias?: string  } 
  | { name: 'src_gte', alias?: string  } 
  | { name: 'src_contains', alias?: string  } 
  | { name: 'src_not_contains', alias?: string  } 
  | { name: 'src_starts_with', alias?: string  } 
  | { name: 'src_not_starts_with', alias?: string  } 
  | { name: 'src_ends_with', alias?: string  } 
  | { name: 'src_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageUpdateManyWithWhereNestedInput {
  where?: ProjectImageScalarWhereInput
  data?: ProjectImageUpdateManyDataInput
}
export type ProjectImageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectImageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectImageUpdateManyDataInput {
  publicId?: string | null
  src?: string | null
}
export type ProjectImageUpdateManyDataInputInputObject =
  | Extract<keyof ProjectImageUpdateManyDataInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface ProjectAlbumUpsertWithoutProjectInput {
  update?: ProjectAlbumUpdateWithoutProjectDataInput
  create?: ProjectAlbumCreateWithoutProjectInput
}
export type ProjectAlbumUpsertWithoutProjectInputInputObject =
  | Extract<keyof ProjectAlbumUpsertWithoutProjectInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectContentUpdateManyWithoutProjectInput {
  create?: ProjectContentCreateWithoutProjectInput[]
  delete?: ProjectContentWhereUniqueInput[]
  connect?: ProjectContentWhereUniqueInput[]
  set?: ProjectContentWhereUniqueInput[]
  disconnect?: ProjectContentWhereUniqueInput[]
  update?: ProjectContentUpdateWithWhereUniqueWithoutProjectInput[]
  upsert?: ProjectContentUpsertWithWhereUniqueWithoutProjectInput[]
  deleteMany?: ProjectContentScalarWhereInput[]
  updateMany?: ProjectContentUpdateManyWithWhereNestedInput[]
}
export type ProjectContentUpdateManyWithoutProjectInputInputObject =
  | Extract<keyof ProjectContentUpdateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectContentUpdateWithWhereUniqueWithoutProjectInput {
  where?: ProjectContentWhereUniqueInput
  data?: ProjectContentUpdateWithoutProjectDataInput
}
export type ProjectContentUpdateWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof ProjectContentUpdateWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectContentUpdateWithoutProjectDataInput {
  language?: ProjectLngUpdateOneRequiredWithoutProjectsInput | null
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentUpdateWithoutProjectDataInputInputObject =
  | Extract<keyof ProjectContentUpdateWithoutProjectDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectLngUpdateOneRequiredWithoutProjectsInput {
  create?: ProjectLngCreateWithoutProjectsInput | null
  update?: ProjectLngUpdateWithoutProjectsDataInput | null
  upsert?: ProjectLngUpsertWithoutProjectsInput | null
  connect?: ProjectLngWhereUniqueInput | null
}
export type ProjectLngUpdateOneRequiredWithoutProjectsInputInputObject =
  | Extract<keyof ProjectLngUpdateOneRequiredWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectLngUpdateWithoutProjectsDataInput {
  country?: string | null
  locale?: string | null
}
export type ProjectLngUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof ProjectLngUpdateWithoutProjectsDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectLngUpsertWithoutProjectsInput {
  update?: ProjectLngUpdateWithoutProjectsDataInput
  create?: ProjectLngCreateWithoutProjectsInput
}
export type ProjectLngUpsertWithoutProjectsInputInputObject =
  | Extract<keyof ProjectLngUpsertWithoutProjectsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectContentUpsertWithWhereUniqueWithoutProjectInput {
  where?: ProjectContentWhereUniqueInput
  update?: ProjectContentUpdateWithoutProjectDataInput
  create?: ProjectContentCreateWithoutProjectInput
}
export type ProjectContentUpsertWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof ProjectContentUpsertWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectContentScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  metaTitle?: string | null
  metaTitle_not?: string | null
  metaTitle_in?: string[]
  metaTitle_not_in?: string[]
  metaTitle_lt?: string | null
  metaTitle_lte?: string | null
  metaTitle_gt?: string | null
  metaTitle_gte?: string | null
  metaTitle_contains?: string | null
  metaTitle_not_contains?: string | null
  metaTitle_starts_with?: string | null
  metaTitle_not_starts_with?: string | null
  metaTitle_ends_with?: string | null
  metaTitle_not_ends_with?: string | null
  metaDescription?: string | null
  metaDescription_not?: string | null
  metaDescription_in?: string[]
  metaDescription_not_in?: string[]
  metaDescription_lt?: string | null
  metaDescription_lte?: string | null
  metaDescription_gt?: string | null
  metaDescription_gte?: string | null
  metaDescription_contains?: string | null
  metaDescription_not_contains?: string | null
  metaDescription_starts_with?: string | null
  metaDescription_not_starts_with?: string | null
  metaDescription_ends_with?: string | null
  metaDescription_not_ends_with?: string | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  AND?: ProjectContentScalarWhereInput[]
  OR?: ProjectContentScalarWhereInput[]
  NOT?: ProjectContentScalarWhereInput[]
}
export type ProjectContentScalarWhereInputInputObject =
  | Extract<keyof ProjectContentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaTitle_not', alias?: string  } 
  | { name: 'metaTitle_in', alias?: string  } 
  | { name: 'metaTitle_not_in', alias?: string  } 
  | { name: 'metaTitle_lt', alias?: string  } 
  | { name: 'metaTitle_lte', alias?: string  } 
  | { name: 'metaTitle_gt', alias?: string  } 
  | { name: 'metaTitle_gte', alias?: string  } 
  | { name: 'metaTitle_contains', alias?: string  } 
  | { name: 'metaTitle_not_contains', alias?: string  } 
  | { name: 'metaTitle_starts_with', alias?: string  } 
  | { name: 'metaTitle_not_starts_with', alias?: string  } 
  | { name: 'metaTitle_ends_with', alias?: string  } 
  | { name: 'metaTitle_not_ends_with', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'metaDescription_not', alias?: string  } 
  | { name: 'metaDescription_in', alias?: string  } 
  | { name: 'metaDescription_not_in', alias?: string  } 
  | { name: 'metaDescription_lt', alias?: string  } 
  | { name: 'metaDescription_lte', alias?: string  } 
  | { name: 'metaDescription_gt', alias?: string  } 
  | { name: 'metaDescription_gte', alias?: string  } 
  | { name: 'metaDescription_contains', alias?: string  } 
  | { name: 'metaDescription_not_contains', alias?: string  } 
  | { name: 'metaDescription_starts_with', alias?: string  } 
  | { name: 'metaDescription_not_starts_with', alias?: string  } 
  | { name: 'metaDescription_ends_with', alias?: string  } 
  | { name: 'metaDescription_not_ends_with', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectContentUpdateManyWithWhereNestedInput {
  where?: ProjectContentScalarWhereInput
  data?: ProjectContentUpdateManyDataInput
}
export type ProjectContentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectContentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectContentUpdateManyDataInput {
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentUpdateManyDataInputInputObject =
  | Extract<keyof ProjectContentUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectTagUpdateManyInput {
  create?: ProjectTagCreateInput[]
  update?: ProjectTagUpdateWithWhereUniqueNestedInput[]
  upsert?: ProjectTagUpsertWithWhereUniqueNestedInput[]
  delete?: ProjectTagWhereUniqueInput[]
  connect?: ProjectTagWhereUniqueInput[]
  set?: ProjectTagWhereUniqueInput[]
  disconnect?: ProjectTagWhereUniqueInput[]
  deleteMany?: ProjectTagScalarWhereInput[]
  updateMany?: ProjectTagUpdateManyWithWhereNestedInput[]
}
export type ProjectTagUpdateManyInputInputObject =
  | Extract<keyof ProjectTagUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectTagUpdateWithWhereUniqueNestedInput {
  where?: ProjectTagWhereUniqueInput
  data?: ProjectTagUpdateDataInput
}
export type ProjectTagUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProjectTagUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectTagUpdateDataInput {
  language?: ProjectTagLngUpdateOneRequiredWithoutTagsInput | null
  contents?: ProjectTagContentUpdateOneRequiredWithoutTagInput | null
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateDataInputInputObject =
  | Extract<keyof ProjectTagUpdateDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagLngUpdateOneRequiredWithoutTagsInput {
  create?: ProjectTagLngCreateWithoutTagsInput | null
  update?: ProjectTagLngUpdateWithoutTagsDataInput | null
  upsert?: ProjectTagLngUpsertWithoutTagsInput | null
  connect?: ProjectTagLngWhereUniqueInput | null
}
export type ProjectTagLngUpdateOneRequiredWithoutTagsInputInputObject =
  | Extract<keyof ProjectTagLngUpdateOneRequiredWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagLngUpdateWithoutTagsDataInput {
  country?: string | null
  locale?: string | null
}
export type ProjectTagLngUpdateWithoutTagsDataInputInputObject =
  | Extract<keyof ProjectTagLngUpdateWithoutTagsDataInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagLngUpsertWithoutTagsInput {
  update?: ProjectTagLngUpdateWithoutTagsDataInput
  create?: ProjectTagLngCreateWithoutTagsInput
}
export type ProjectTagLngUpsertWithoutTagsInputInputObject =
  | Extract<keyof ProjectTagLngUpsertWithoutTagsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectTagContentUpdateOneRequiredWithoutTagInput {
  create?: ProjectTagContentCreateWithoutTagInput | null
  update?: ProjectTagContentUpdateWithoutTagDataInput | null
  upsert?: ProjectTagContentUpsertWithoutTagInput | null
  connect?: ProjectTagContentWhereUniqueInput | null
}
export type ProjectTagContentUpdateOneRequiredWithoutTagInputInputObject =
  | Extract<keyof ProjectTagContentUpdateOneRequiredWithoutTagInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagContentUpdateWithoutTagDataInput {
  title?: string | null
}
export type ProjectTagContentUpdateWithoutTagDataInputInputObject =
  | Extract<keyof ProjectTagContentUpdateWithoutTagDataInput, string>
  | { name: 'title', alias?: string  } 
  
export interface ProjectTagContentUpsertWithoutTagInput {
  update?: ProjectTagContentUpdateWithoutTagDataInput
  create?: ProjectTagContentCreateWithoutTagInput
}
export type ProjectTagContentUpsertWithoutTagInputInputObject =
  | Extract<keyof ProjectTagContentUpsertWithoutTagInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectTagUpsertWithWhereUniqueNestedInput {
  where?: ProjectTagWhereUniqueInput
  update?: ProjectTagUpdateDataInput
  create?: ProjectTagCreateInput
}
export type ProjectTagUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ProjectTagUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectTagScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  AND?: ProjectTagScalarWhereInput[]
  OR?: ProjectTagScalarWhereInput[]
  NOT?: ProjectTagScalarWhereInput[]
}
export type ProjectTagScalarWhereInputInputObject =
  | Extract<keyof ProjectTagScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagUpdateManyWithWhereNestedInput {
  where?: ProjectTagScalarWhereInput
  data?: ProjectTagUpdateManyDataInput
}
export type ProjectTagUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectTagUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectTagUpdateManyDataInput {
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateManyDataInputInputObject =
  | Extract<keyof ProjectTagUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutAuthorInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutAuthorDataInput
  create?: ProjectCreateWithoutAuthorInput
}
export type ProjectUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  AND?: ProjectScalarWhereInput[]
  OR?: ProjectScalarWhereInput[]
  NOT?: ProjectScalarWhereInput[]
}
export type ProjectScalarWhereInputInputObject =
  | Extract<keyof ProjectScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectUpdateManyWithWhereNestedInput {
  where?: ProjectScalarWhereInput
  data?: ProjectUpdateManyDataInput
}
export type ProjectUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateManyDataInput {
  slug?: string | null
}
export type ProjectUpdateManyDataInputInputObject =
  | Extract<keyof ProjectUpdateManyDataInput, string>
  | { name: 'slug', alias?: string  } 
  
export interface CommentUpdateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[]
  delete?: CommentWhereUniqueInput[]
  connect?: CommentWhereUniqueInput[]
  set?: CommentWhereUniqueInput[]
  disconnect?: CommentWhereUniqueInput[]
  update?: CommentUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: CommentScalarWhereInput[]
}
export type CommentUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof CommentUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  
export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where?: CommentWhereUniqueInput
  data?: CommentUpdateWithoutAuthorDataInput
}
export type CommentUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof CommentUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CommentUpdateWithoutAuthorDataInput {
  post?: PostUpdateOneRequiredWithoutCommentsInput | null
}
export type CommentUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof CommentUpdateWithoutAuthorDataInput, string>
  | { name: 'post', alias?: string  } 
  
export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput | null
  update?: PostUpdateWithoutCommentsDataInput | null
  upsert?: PostUpsertWithoutCommentsInput | null
  connect?: PostWhereUniqueInput | null
}
export type PostUpdateOneRequiredWithoutCommentsInputInputObject =
  | Extract<keyof PostUpdateOneRequiredWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostUpdateWithoutCommentsDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  contents?: PostContentUpdateManyWithoutPostInput | null
  tags?: PostTagUpdateManyInput | null
  likes?: number | null
  likedBy?: UserUpdateManyWithoutPostLikesInput | null
}
export type PostUpdateWithoutCommentsDataInputInputObject =
  | Extract<keyof PostUpdateWithoutCommentsDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface PostUpsertWithoutCommentsInput {
  update?: PostUpdateWithoutCommentsDataInput
  create?: PostCreateWithoutCommentsInput
}
export type PostUpsertWithoutCommentsInputInputObject =
  | Extract<keyof PostUpsertWithoutCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutAuthorDataInput
  create?: CommentCreateWithoutAuthorInput
}
export type CommentUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof CommentUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CommentScalarWhereInput[]
  OR?: CommentScalarWhereInput[]
  NOT?: CommentScalarWhereInput[]
}
export type CommentScalarWhereInputInputObject =
  | Extract<keyof CommentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutPostLikesInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutPostLikesDataInput
  create?: UserCreateWithoutPostLikesInput
}
export type UserUpsertWithWhereUniqueWithoutPostLikesInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutPostLikesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  isPublished?: boolean | null
  isPublished_not?: boolean | null
  imageSrc?: string | null
  imageSrc_not?: string | null
  imageSrc_in?: string[]
  imageSrc_not_in?: string[]
  imageSrc_lt?: string | null
  imageSrc_lte?: string | null
  imageSrc_gt?: string | null
  imageSrc_gte?: string | null
  imageSrc_contains?: string | null
  imageSrc_not_contains?: string | null
  imageSrc_starts_with?: string | null
  imageSrc_not_starts_with?: string | null
  imageSrc_ends_with?: string | null
  imageSrc_not_ends_with?: string | null
  likes?: number | null
  likes_not?: number | null
  likes_in?: number[]
  likes_not_in?: number[]
  likes_lt?: number | null
  likes_lte?: number | null
  likes_gt?: number | null
  likes_gte?: number | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'isPublished_not', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'imageSrc_not', alias?: string  } 
  | { name: 'imageSrc_in', alias?: string  } 
  | { name: 'imageSrc_not_in', alias?: string  } 
  | { name: 'imageSrc_lt', alias?: string  } 
  | { name: 'imageSrc_lte', alias?: string  } 
  | { name: 'imageSrc_gt', alias?: string  } 
  | { name: 'imageSrc_gte', alias?: string  } 
  | { name: 'imageSrc_contains', alias?: string  } 
  | { name: 'imageSrc_not_contains', alias?: string  } 
  | { name: 'imageSrc_starts_with', alias?: string  } 
  | { name: 'imageSrc_not_starts_with', alias?: string  } 
  | { name: 'imageSrc_ends_with', alias?: string  } 
  | { name: 'imageSrc_not_ends_with', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likes_not', alias?: string  } 
  | { name: 'likes_in', alias?: string  } 
  | { name: 'likes_not_in', alias?: string  } 
  | { name: 'likes_lt', alias?: string  } 
  | { name: 'likes_lte', alias?: string  } 
  | { name: 'likes_gt', alias?: string  } 
  | { name: 'likes_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  likes?: number | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  
export interface UserUpsertWithoutCommentsInput {
  update?: UserUpdateWithoutCommentsDataInput
  create?: UserCreateWithoutCommentsInput
}
export type UserUpsertWithoutCommentsInputInputObject =
  | Extract<keyof UserUpsertWithoutCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutPostDataInput
  create?: CommentCreateWithoutPostInput
}
export type CommentUpsertWithWhereUniqueWithoutPostInputInputObject =
  | Extract<keyof CommentUpsertWithWhereUniqueWithoutPostInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutLikedByInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutLikedByDataInput
  create?: PostCreateWithoutLikedByInput
}
export type PostUpsertWithWhereUniqueWithoutLikedByInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutLikedByInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  likes?: number | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  
export interface PostContentCreateInput {
  language?: PostLngCreateOneWithoutPostsInput
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string
  post?: PostCreateOneWithoutContentsInput
}
export type PostContentCreateInputInputObject =
  | Extract<keyof PostContentCreateInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface PostCreateOneWithoutContentsInput {
  create?: PostCreateWithoutContentsInput | null
  connect?: PostWhereUniqueInput | null
}
export type PostCreateOneWithoutContentsInputInputObject =
  | Extract<keyof PostCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutContentsInput {
  author?: UserCreateOneWithoutPostsInput
  slug?: string
  isPublished?: boolean | null
  imageSrc?: string
  tags?: PostTagCreateManyInput | null
  comments?: CommentCreateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserCreateManyWithoutPostLikesInput | null
}
export type PostCreateWithoutContentsInputInputObject =
  | Extract<keyof PostCreateWithoutContentsInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface PostContentUpdateInput {
  language?: PostLngUpdateOneRequiredWithoutPostsInput | null
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string | null
  post?: PostUpdateOneRequiredWithoutContentsInput | null
}
export type PostContentUpdateInputInputObject =
  | Extract<keyof PostContentUpdateInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface PostUpdateOneRequiredWithoutContentsInput {
  create?: PostCreateWithoutContentsInput | null
  update?: PostUpdateWithoutContentsDataInput | null
  upsert?: PostUpsertWithoutContentsInput | null
  connect?: PostWhereUniqueInput | null
}
export type PostUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof PostUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostUpdateWithoutContentsDataInput {
  author?: UserUpdateOneRequiredWithoutPostsInput | null
  slug?: string | null
  isPublished?: boolean | null
  imageSrc?: string | null
  tags?: PostTagUpdateManyInput | null
  comments?: CommentUpdateManyWithoutPostInput | null
  likes?: number | null
  likedBy?: UserUpdateManyWithoutPostLikesInput | null
}
export type PostUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof PostUpdateWithoutContentsDataInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'isPublished', alias?: string  } 
  | { name: 'imageSrc', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'likes', alias?: string  } 
  | { name: 'likedBy', alias?: string  } 
  
export interface PostUpsertWithoutContentsInput {
  update?: PostUpdateWithoutContentsDataInput
  create?: PostCreateWithoutContentsInput
}
export type PostUpsertWithoutContentsInputInputObject =
  | Extract<keyof PostUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostContentUpdateManyMutationInput {
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string | null
}
export type PostContentUpdateManyMutationInputInputObject =
  | Extract<keyof PostContentUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  
export interface PostLngCreateInput {
  posts?: PostContentCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string | null
}
export type PostLngCreateInputInputObject =
  | Extract<keyof PostLngCreateInput, string>
  | { name: 'posts', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostContentCreateManyWithoutLanguageInput {
  create?: PostContentCreateWithoutLanguageInput[]
  connect?: PostContentWhereUniqueInput[]
}
export type PostContentCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof PostContentCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostContentCreateWithoutLanguageInput {
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string
  post?: PostCreateOneWithoutContentsInput
}
export type PostContentCreateWithoutLanguageInputInputObject =
  | Extract<keyof PostContentCreateWithoutLanguageInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface PostLngUpdateInput {
  posts?: PostContentUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type PostLngUpdateInputInputObject =
  | Extract<keyof PostLngUpdateInput, string>
  | { name: 'posts', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostContentUpdateManyWithoutLanguageInput {
  create?: PostContentCreateWithoutLanguageInput[]
  delete?: PostContentWhereUniqueInput[]
  connect?: PostContentWhereUniqueInput[]
  set?: PostContentWhereUniqueInput[]
  disconnect?: PostContentWhereUniqueInput[]
  update?: PostContentUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: PostContentUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: PostContentScalarWhereInput[]
  updateMany?: PostContentUpdateManyWithWhereNestedInput[]
}
export type PostContentUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof PostContentUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostContentUpdateWithWhereUniqueWithoutLanguageInput {
  where?: PostContentWhereUniqueInput
  data?: PostContentUpdateWithoutLanguageDataInput
}
export type PostContentUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof PostContentUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostContentUpdateWithoutLanguageDataInput {
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  imageAlt?: string | null
  post?: PostUpdateOneRequiredWithoutContentsInput | null
}
export type PostContentUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof PostContentUpdateWithoutLanguageDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface PostContentUpsertWithWhereUniqueWithoutLanguageInput {
  where?: PostContentWhereUniqueInput
  update?: PostContentUpdateWithoutLanguageDataInput
  create?: PostContentCreateWithoutLanguageInput
}
export type PostContentUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof PostContentUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type PostLngUpdateManyMutationInputInputObject =
  | Extract<keyof PostLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface CommentCreateInput {
  author?: UserCreateOneWithoutCommentsInput
  post?: PostCreateOneWithoutCommentsInput
}
export type CommentCreateInputInputObject =
  | Extract<keyof CommentCreateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface CommentUpdateInput {
  author?: UserUpdateOneRequiredWithoutCommentsInput | null
  post?: PostUpdateOneRequiredWithoutCommentsInput | null
}
export type CommentUpdateInputInputObject =
  | Extract<keyof CommentUpdateInput, string>
  | { name: 'author', alias?: string  } 
  | { name: 'post', alias?: string  } 
  
export interface PostTagUpdateInput {
  color?: string | null
  language?: PostTagLngUpdateOneRequiredWithoutTagsInput | null
  contents?: PostTagContentUpdateOneRequiredWithoutTagInput | null
}
export type PostTagUpdateInputInputObject =
  | Extract<keyof PostTagUpdateInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface PostTagUpdateManyMutationInput {
  color?: string | null
}
export type PostTagUpdateManyMutationInputInputObject =
  | Extract<keyof PostTagUpdateManyMutationInput, string>
  | { name: 'color', alias?: string  } 
  
export interface PostTagContentCreateInput {
  tag?: PostTagCreateOneWithoutContentsInput
  title?: string
}
export type PostTagContentCreateInputInputObject =
  | Extract<keyof PostTagContentCreateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface PostTagCreateOneWithoutContentsInput {
  create?: PostTagCreateWithoutContentsInput | null
  connect?: PostTagWhereUniqueInput | null
}
export type PostTagCreateOneWithoutContentsInputInputObject =
  | Extract<keyof PostTagCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagCreateWithoutContentsInput {
  color?: string
  language?: PostTagLngCreateOneWithoutTagsInput
}
export type PostTagCreateWithoutContentsInputInputObject =
  | Extract<keyof PostTagCreateWithoutContentsInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'language', alias?: string  } 
  
export interface PostTagContentUpdateInput {
  tag?: PostTagUpdateOneRequiredWithoutContentsInput | null
  title?: string | null
}
export type PostTagContentUpdateInputInputObject =
  | Extract<keyof PostTagContentUpdateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface PostTagUpdateOneRequiredWithoutContentsInput {
  create?: PostTagCreateWithoutContentsInput | null
  update?: PostTagUpdateWithoutContentsDataInput | null
  upsert?: PostTagUpsertWithoutContentsInput | null
  connect?: PostTagWhereUniqueInput | null
}
export type PostTagUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof PostTagUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagUpdateWithoutContentsDataInput {
  color?: string | null
  language?: PostTagLngUpdateOneRequiredWithoutTagsInput | null
}
export type PostTagUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof PostTagUpdateWithoutContentsDataInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'language', alias?: string  } 
  
export interface PostTagUpsertWithoutContentsInput {
  update?: PostTagUpdateWithoutContentsDataInput
  create?: PostTagCreateWithoutContentsInput
}
export type PostTagUpsertWithoutContentsInputInputObject =
  | Extract<keyof PostTagUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostTagContentUpdateManyMutationInput {
  title?: string | null
}
export type PostTagContentUpdateManyMutationInputInputObject =
  | Extract<keyof PostTagContentUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  
export interface PostTagLngCreateInput {
  tags?: PostTagCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string
}
export type PostTagLngCreateInputInputObject =
  | Extract<keyof PostTagLngCreateInput, string>
  | { name: 'tags', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostTagCreateManyWithoutLanguageInput {
  create?: PostTagCreateWithoutLanguageInput[]
  connect?: PostTagWhereUniqueInput[]
}
export type PostTagCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof PostTagCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostTagCreateWithoutLanguageInput {
  color?: string
  contents?: PostTagContentCreateOneWithoutTagInput
}
export type PostTagCreateWithoutLanguageInputInputObject =
  | Extract<keyof PostTagCreateWithoutLanguageInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface PostTagLngUpdateInput {
  tags?: PostTagUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type PostTagLngUpdateInputInputObject =
  | Extract<keyof PostTagLngUpdateInput, string>
  | { name: 'tags', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostTagUpdateManyWithoutLanguageInput {
  create?: PostTagCreateWithoutLanguageInput[]
  delete?: PostTagWhereUniqueInput[]
  connect?: PostTagWhereUniqueInput[]
  set?: PostTagWhereUniqueInput[]
  disconnect?: PostTagWhereUniqueInput[]
  update?: PostTagUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: PostTagUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: PostTagScalarWhereInput[]
  updateMany?: PostTagUpdateManyWithWhereNestedInput[]
}
export type PostTagUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof PostTagUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostTagUpdateWithWhereUniqueWithoutLanguageInput {
  where?: PostTagWhereUniqueInput
  data?: PostTagUpdateWithoutLanguageDataInput
}
export type PostTagUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof PostTagUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostTagUpdateWithoutLanguageDataInput {
  color?: string | null
  contents?: PostTagContentUpdateOneRequiredWithoutTagInput | null
}
export type PostTagUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof PostTagUpdateWithoutLanguageDataInput, string>
  | { name: 'color', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface PostTagUpsertWithWhereUniqueWithoutLanguageInput {
  where?: PostTagWhereUniqueInput
  update?: PostTagUpdateWithoutLanguageDataInput
  create?: PostTagCreateWithoutLanguageInput
}
export type PostTagUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof PostTagUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostTagLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type PostTagLngUpdateManyMutationInputInputObject =
  | Extract<keyof PostTagLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface UserCreateInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  profile?: ProfileCreateOneWithoutUserInput | null
  posts?: PostCreateManyWithoutAuthorInput | null
  postLikes?: PostCreateManyWithoutLikedByInput | null
  projects?: ProjectCreateManyWithoutAuthorInput | null
  comments?: CommentCreateManyWithoutAuthorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  profile?: ProfileUpdateOneWithoutUserInput | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  postLikes?: PostUpdateManyWithoutLikedByInput | null
  projects?: ProjectUpdateManyWithoutAuthorInput | null
  comments?: CommentUpdateManyWithoutAuthorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface ProfileCreateInput {
  user?: UserCreateOneWithoutProfileInput
  bio?: string
  avatar?: AvatarCreateOneInput
}
export type ProfileCreateInputInputObject =
  | Extract<keyof ProfileCreateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface UserCreateOneWithoutProfileInput {
  create?: UserCreateWithoutProfileInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutProfileInputInputObject =
  | Extract<keyof UserCreateOneWithoutProfileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutProfileInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  posts?: PostCreateManyWithoutAuthorInput | null
  postLikes?: PostCreateManyWithoutLikedByInput | null
  projects?: ProjectCreateManyWithoutAuthorInput | null
  comments?: CommentCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutProfileInputInputObject =
  | Extract<keyof UserCreateWithoutProfileInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProfileUpdateInput {
  user?: UserUpdateOneRequiredWithoutProfileInput | null
  bio?: string | null
  avatar?: AvatarUpdateOneRequiredInput | null
}
export type ProfileUpdateInputInputObject =
  | Extract<keyof ProfileUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'bio', alias?: string  } 
  | { name: 'avatar', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: UserCreateWithoutProfileInput | null
  update?: UserUpdateWithoutProfileDataInput | null
  upsert?: UserUpsertWithoutProfileInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutProfileInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutProfileInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutProfileDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  postLikes?: PostUpdateManyWithoutLikedByInput | null
  projects?: ProjectUpdateManyWithoutAuthorInput | null
  comments?: CommentUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutProfileDataInputInputObject =
  | Extract<keyof UserUpdateWithoutProfileDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface UserUpsertWithoutProfileInput {
  update?: UserUpdateWithoutProfileDataInput
  create?: UserCreateWithoutProfileInput
}
export type UserUpsertWithoutProfileInputInputObject =
  | Extract<keyof UserUpsertWithoutProfileInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProfileUpdateManyMutationInput {
  bio?: string | null
}
export type ProfileUpdateManyMutationInputInputObject =
  | Extract<keyof ProfileUpdateManyMutationInput, string>
  | { name: 'bio', alias?: string  } 
  
export interface AvatarUpdateInput {
  publicId?: string | null
  src?: string | null
}
export type AvatarUpdateInputInputObject =
  | Extract<keyof AvatarUpdateInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface AvatarUpdateManyMutationInput {
  publicId?: string | null
  src?: string | null
}
export type AvatarUpdateManyMutationInputInputObject =
  | Extract<keyof AvatarUpdateManyMutationInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface ProjectCreateInput {
  slug?: string
  category?: ProjectCategoryCreateOneWithoutProjectsInput
  author?: UserCreateOneWithoutProjectsInput
  album?: ProjectAlbumCreateOneWithoutProjectInput
  contents?: ProjectContentCreateManyWithoutProjectInput | null
  tags?: ProjectTagCreateManyInput | null
}
export type ProjectCreateInputInputObject =
  | Extract<keyof ProjectCreateInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface UserCreateOneWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutProjectsInputInputObject =
  | Extract<keyof UserCreateOneWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutProjectsInput {
  name?: string
  email?: string | null
  password?: string
  role?: prisma.Role | null
  profile?: ProfileCreateOneWithoutUserInput | null
  posts?: PostCreateManyWithoutAuthorInput | null
  postLikes?: PostCreateManyWithoutLikedByInput | null
  comments?: CommentCreateManyWithoutAuthorInput | null
}
export type UserCreateWithoutProjectsInputInputObject =
  | Extract<keyof UserCreateWithoutProjectsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface ProjectUpdateInput {
  slug?: string | null
  category?: ProjectCategoryUpdateOneRequiredWithoutProjectsInput | null
  author?: UserUpdateOneRequiredWithoutProjectsInput | null
  album?: ProjectAlbumUpdateOneRequiredWithoutProjectInput | null
  contents?: ProjectContentUpdateManyWithoutProjectInput | null
  tags?: ProjectTagUpdateManyInput | null
}
export type ProjectUpdateInputInputObject =
  | Extract<keyof ProjectUpdateInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutProjectsInput {
  create?: UserCreateWithoutProjectsInput | null
  update?: UserUpdateWithoutProjectsDataInput | null
  upsert?: UserUpsertWithoutProjectsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutProjectsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutProjectsDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  profile?: ProfileUpdateOneWithoutUserInput | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  postLikes?: PostUpdateManyWithoutLikedByInput | null
  comments?: CommentUpdateManyWithoutAuthorInput | null
}
export type UserUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutProjectsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'postLikes', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface UserUpsertWithoutProjectsInput {
  update?: UserUpdateWithoutProjectsDataInput
  create?: UserCreateWithoutProjectsInput
}
export type UserUpsertWithoutProjectsInputInputObject =
  | Extract<keyof UserUpsertWithoutProjectsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectUpdateManyMutationInput {
  slug?: string | null
}
export type ProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectUpdateManyMutationInput, string>
  | { name: 'slug', alias?: string  } 
  
export interface ProjectContentCreateInput {
  project?: ProjectCreateOneWithoutContentsInput
  language?: ProjectLngCreateOneWithoutProjectsInput
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentCreateInputInputObject =
  | Extract<keyof ProjectContentCreateInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectCreateOneWithoutContentsInput {
  create?: ProjectCreateWithoutContentsInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneWithoutContentsInputInputObject =
  | Extract<keyof ProjectCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutContentsInput {
  slug?: string
  category?: ProjectCategoryCreateOneWithoutProjectsInput
  author?: UserCreateOneWithoutProjectsInput
  album?: ProjectAlbumCreateOneWithoutProjectInput
  tags?: ProjectTagCreateManyInput | null
}
export type ProjectCreateWithoutContentsInputInputObject =
  | Extract<keyof ProjectCreateWithoutContentsInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectContentUpdateInput {
  project?: ProjectUpdateOneRequiredWithoutContentsInput | null
  language?: ProjectLngUpdateOneRequiredWithoutProjectsInput | null
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentUpdateInputInputObject =
  | Extract<keyof ProjectContentUpdateInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectUpdateOneRequiredWithoutContentsInput {
  create?: ProjectCreateWithoutContentsInput | null
  update?: ProjectUpdateWithoutContentsDataInput | null
  upsert?: ProjectUpsertWithoutContentsInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof ProjectUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateWithoutContentsDataInput {
  slug?: string | null
  category?: ProjectCategoryUpdateOneRequiredWithoutProjectsInput | null
  author?: UserUpdateOneRequiredWithoutProjectsInput | null
  album?: ProjectAlbumUpdateOneRequiredWithoutProjectInput | null
  tags?: ProjectTagUpdateManyInput | null
}
export type ProjectUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutContentsDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectUpsertWithoutContentsInput {
  update?: ProjectUpdateWithoutContentsDataInput
  create?: ProjectCreateWithoutContentsInput
}
export type ProjectUpsertWithoutContentsInputInputObject =
  | Extract<keyof ProjectUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectContentUpdateManyMutationInput {
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectContentUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectLngCreateInput {
  projects?: ProjectContentCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string | null
}
export type ProjectLngCreateInputInputObject =
  | Extract<keyof ProjectLngCreateInput, string>
  | { name: 'projects', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectContentCreateManyWithoutLanguageInput {
  create?: ProjectContentCreateWithoutLanguageInput[]
  connect?: ProjectContentWhereUniqueInput[]
}
export type ProjectContentCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectContentCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectContentCreateWithoutLanguageInput {
  project?: ProjectCreateOneWithoutContentsInput
  title?: string
  text?: string
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentCreateWithoutLanguageInputInputObject =
  | Extract<keyof ProjectContentCreateWithoutLanguageInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectLngUpdateInput {
  projects?: ProjectContentUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type ProjectLngUpdateInputInputObject =
  | Extract<keyof ProjectLngUpdateInput, string>
  | { name: 'projects', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectContentUpdateManyWithoutLanguageInput {
  create?: ProjectContentCreateWithoutLanguageInput[]
  delete?: ProjectContentWhereUniqueInput[]
  connect?: ProjectContentWhereUniqueInput[]
  set?: ProjectContentWhereUniqueInput[]
  disconnect?: ProjectContentWhereUniqueInput[]
  update?: ProjectContentUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: ProjectContentUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: ProjectContentScalarWhereInput[]
  updateMany?: ProjectContentUpdateManyWithWhereNestedInput[]
}
export type ProjectContentUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectContentUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectContentUpdateWithWhereUniqueWithoutLanguageInput {
  where?: ProjectContentWhereUniqueInput
  data?: ProjectContentUpdateWithoutLanguageDataInput
}
export type ProjectContentUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectContentUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectContentUpdateWithoutLanguageDataInput {
  project?: ProjectUpdateOneRequiredWithoutContentsInput | null
  title?: string | null
  text?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
  isActive?: boolean | null
}
export type ProjectContentUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof ProjectContentUpdateWithoutLanguageDataInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  
export interface ProjectContentUpsertWithWhereUniqueWithoutLanguageInput {
  where?: ProjectContentWhereUniqueInput
  update?: ProjectContentUpdateWithoutLanguageDataInput
  create?: ProjectContentCreateWithoutLanguageInput
}
export type ProjectContentUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectContentUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type ProjectLngUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagUpdateInput {
  language?: ProjectTagLngUpdateOneRequiredWithoutTagsInput | null
  contents?: ProjectTagContentUpdateOneRequiredWithoutTagInput | null
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateInputInputObject =
  | Extract<keyof ProjectTagUpdateInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagUpdateManyMutationInput {
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectTagUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagContentCreateInput {
  tag?: ProjectTagCreateOneWithoutContentsInput
  title?: string | null
}
export type ProjectTagContentCreateInputInputObject =
  | Extract<keyof ProjectTagContentCreateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface ProjectTagCreateOneWithoutContentsInput {
  create?: ProjectTagCreateWithoutContentsInput | null
  connect?: ProjectTagWhereUniqueInput | null
}
export type ProjectTagCreateOneWithoutContentsInputInputObject =
  | Extract<keyof ProjectTagCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagCreateWithoutContentsInput {
  language?: ProjectTagLngCreateOneWithoutTagsInput
  title?: string
  color?: string | null
}
export type ProjectTagCreateWithoutContentsInputInputObject =
  | Extract<keyof ProjectTagCreateWithoutContentsInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagContentUpdateInput {
  tag?: ProjectTagUpdateOneRequiredWithoutContentsInput | null
  title?: string | null
}
export type ProjectTagContentUpdateInputInputObject =
  | Extract<keyof ProjectTagContentUpdateInput, string>
  | { name: 'tag', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface ProjectTagUpdateOneRequiredWithoutContentsInput {
  create?: ProjectTagCreateWithoutContentsInput | null
  update?: ProjectTagUpdateWithoutContentsDataInput | null
  upsert?: ProjectTagUpsertWithoutContentsInput | null
  connect?: ProjectTagWhereUniqueInput | null
}
export type ProjectTagUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof ProjectTagUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagUpdateWithoutContentsDataInput {
  language?: ProjectTagLngUpdateOneRequiredWithoutTagsInput | null
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof ProjectTagUpdateWithoutContentsDataInput, string>
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagUpsertWithoutContentsInput {
  update?: ProjectTagUpdateWithoutContentsDataInput
  create?: ProjectTagCreateWithoutContentsInput
}
export type ProjectTagUpsertWithoutContentsInputInputObject =
  | Extract<keyof ProjectTagUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectTagContentUpdateManyMutationInput {
  title?: string | null
}
export type ProjectTagContentUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectTagContentUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  
export interface ProjectTagLngCreateInput {
  tags?: ProjectTagCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string
}
export type ProjectTagLngCreateInputInputObject =
  | Extract<keyof ProjectTagLngCreateInput, string>
  | { name: 'tags', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagCreateManyWithoutLanguageInput {
  create?: ProjectTagCreateWithoutLanguageInput[]
  connect?: ProjectTagWhereUniqueInput[]
}
export type ProjectTagCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectTagCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectTagCreateWithoutLanguageInput {
  contents?: ProjectTagContentCreateOneWithoutTagInput
  title?: string
  color?: string | null
}
export type ProjectTagCreateWithoutLanguageInputInputObject =
  | Extract<keyof ProjectTagCreateWithoutLanguageInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagLngUpdateInput {
  tags?: ProjectTagUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type ProjectTagLngUpdateInputInputObject =
  | Extract<keyof ProjectTagLngUpdateInput, string>
  | { name: 'tags', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectTagUpdateManyWithoutLanguageInput {
  create?: ProjectTagCreateWithoutLanguageInput[]
  delete?: ProjectTagWhereUniqueInput[]
  connect?: ProjectTagWhereUniqueInput[]
  set?: ProjectTagWhereUniqueInput[]
  disconnect?: ProjectTagWhereUniqueInput[]
  update?: ProjectTagUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: ProjectTagUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: ProjectTagScalarWhereInput[]
  updateMany?: ProjectTagUpdateManyWithWhereNestedInput[]
}
export type ProjectTagUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectTagUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectTagUpdateWithWhereUniqueWithoutLanguageInput {
  where?: ProjectTagWhereUniqueInput
  data?: ProjectTagUpdateWithoutLanguageDataInput
}
export type ProjectTagUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectTagUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectTagUpdateWithoutLanguageDataInput {
  contents?: ProjectTagContentUpdateOneRequiredWithoutTagInput | null
  title?: string | null
  color?: string | null
}
export type ProjectTagUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof ProjectTagUpdateWithoutLanguageDataInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'color', alias?: string  } 
  
export interface ProjectTagUpsertWithWhereUniqueWithoutLanguageInput {
  where?: ProjectTagWhereUniqueInput
  update?: ProjectTagUpdateWithoutLanguageDataInput
  create?: ProjectTagCreateWithoutLanguageInput
}
export type ProjectTagUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectTagUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectTagLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type ProjectTagLngUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectTagLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectCategoryCreateInput {
  contents?: ProjectCategoryContentCreateManyWithoutCategoryInput | null
  slug?: string
  image?: string
  projects?: ProjectCreateManyWithoutCategoryInput | null
}
export type ProjectCategoryCreateInputInputObject =
  | Extract<keyof ProjectCategoryCreateInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCreateManyWithoutCategoryInput {
  create?: ProjectCreateWithoutCategoryInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutCategoryInput {
  slug?: string
  author?: UserCreateOneWithoutProjectsInput
  album?: ProjectAlbumCreateOneWithoutProjectInput
  contents?: ProjectContentCreateManyWithoutProjectInput | null
  tags?: ProjectTagCreateManyInput | null
}
export type ProjectCreateWithoutCategoryInputInputObject =
  | Extract<keyof ProjectCreateWithoutCategoryInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectCategoryUpdateInput {
  contents?: ProjectCategoryContentUpdateManyWithoutCategoryInput | null
  slug?: string | null
  image?: string | null
  projects?: ProjectUpdateManyWithoutCategoryInput | null
}
export type ProjectCategoryUpdateInputInputObject =
  | Extract<keyof ProjectCategoryUpdateInput, string>
  | { name: 'contents', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectUpdateManyWithoutCategoryInput {
  create?: ProjectCreateWithoutCategoryInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutCategoryInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutCategoryDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutCategoryDataInput {
  slug?: string | null
  author?: UserUpdateOneRequiredWithoutProjectsInput | null
  album?: ProjectAlbumUpdateOneRequiredWithoutProjectInput | null
  contents?: ProjectContentUpdateManyWithoutProjectInput | null
  tags?: ProjectTagUpdateManyInput | null
}
export type ProjectUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutCategoryDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'album', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutCategoryInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutCategoryDataInput
  create?: ProjectCreateWithoutCategoryInput
}
export type ProjectUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectCategoryUpdateManyMutationInput {
  slug?: string | null
  image?: string | null
}
export type ProjectCategoryUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectCategoryUpdateManyMutationInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface ProjectCategoryContentCreateInput {
  category?: ProjectCategoryCreateOneWithoutContentsInput
  language?: ProjectCategoryLngCreateOneWithoutCategoriesInput
  title?: string
  text?: string
  imageAlt?: string
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentCreateInputInputObject =
  | Extract<keyof ProjectCategoryContentCreateInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryCreateOneWithoutContentsInput {
  create?: ProjectCategoryCreateWithoutContentsInput | null
  connect?: ProjectCategoryWhereUniqueInput | null
}
export type ProjectCategoryCreateOneWithoutContentsInputInputObject =
  | Extract<keyof ProjectCategoryCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryCreateWithoutContentsInput {
  slug?: string
  image?: string
  projects?: ProjectCreateManyWithoutCategoryInput | null
}
export type ProjectCategoryCreateWithoutContentsInputInputObject =
  | Extract<keyof ProjectCategoryCreateWithoutContentsInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCategoryContentUpdateInput {
  category?: ProjectCategoryUpdateOneRequiredWithoutContentsInput | null
  language?: ProjectCategoryLngUpdateOneRequiredWithoutCategoriesInput | null
  title?: string | null
  text?: string | null
  imageAlt?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentUpdateInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryUpdateOneRequiredWithoutContentsInput {
  create?: ProjectCategoryCreateWithoutContentsInput | null
  update?: ProjectCategoryUpdateWithoutContentsDataInput | null
  upsert?: ProjectCategoryUpsertWithoutContentsInput | null
  connect?: ProjectCategoryWhereUniqueInput | null
}
export type ProjectCategoryUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof ProjectCategoryUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryUpdateWithoutContentsDataInput {
  slug?: string | null
  image?: string | null
  projects?: ProjectUpdateManyWithoutCategoryInput | null
}
export type ProjectCategoryUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof ProjectCategoryUpdateWithoutContentsDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCategoryUpsertWithoutContentsInput {
  update?: ProjectCategoryUpdateWithoutContentsDataInput
  create?: ProjectCategoryCreateWithoutContentsInput
}
export type ProjectCategoryUpsertWithoutContentsInputInputObject =
  | Extract<keyof ProjectCategoryUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectCategoryContentUpdateManyMutationInput {
  title?: string | null
  text?: string | null
  imageAlt?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryLngCreateInput {
  categories?: ProjectCategoryContentCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string | null
}
export type ProjectCategoryLngCreateInputInputObject =
  | Extract<keyof ProjectCategoryLngCreateInput, string>
  | { name: 'categories', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectCategoryContentCreateManyWithoutLanguageInput {
  create?: ProjectCategoryContentCreateWithoutLanguageInput[]
  connect?: ProjectCategoryContentWhereUniqueInput[]
}
export type ProjectCategoryContentCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectCategoryContentCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCategoryContentCreateWithoutLanguageInput {
  category?: ProjectCategoryCreateOneWithoutContentsInput
  title?: string
  text?: string
  imageAlt?: string
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentCreateWithoutLanguageInputInputObject =
  | Extract<keyof ProjectCategoryContentCreateWithoutLanguageInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryLngUpdateInput {
  categories?: ProjectCategoryContentUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type ProjectCategoryLngUpdateInputInputObject =
  | Extract<keyof ProjectCategoryLngUpdateInput, string>
  | { name: 'categories', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectCategoryContentUpdateManyWithoutLanguageInput {
  create?: ProjectCategoryContentCreateWithoutLanguageInput[]
  delete?: ProjectCategoryContentWhereUniqueInput[]
  connect?: ProjectCategoryContentWhereUniqueInput[]
  set?: ProjectCategoryContentWhereUniqueInput[]
  disconnect?: ProjectCategoryContentWhereUniqueInput[]
  update?: ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: ProjectCategoryContentScalarWhereInput[]
  updateMany?: ProjectCategoryContentUpdateManyWithWhereNestedInput[]
}
export type ProjectCategoryContentUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInput {
  where?: ProjectCategoryContentWhereUniqueInput
  data?: ProjectCategoryContentUpdateWithoutLanguageDataInput
}
export type ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectCategoryContentUpdateWithoutLanguageDataInput {
  category?: ProjectCategoryUpdateOneRequiredWithoutContentsInput | null
  title?: string | null
  text?: string | null
  imageAlt?: string | null
  metaTitle?: string | null
  metaDescription?: string | null
}
export type ProjectCategoryContentUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof ProjectCategoryContentUpdateWithoutLanguageDataInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'imageAlt', alias?: string  } 
  | { name: 'metaTitle', alias?: string  } 
  | { name: 'metaDescription', alias?: string  } 
  
export interface ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInput {
  where?: ProjectCategoryContentWhereUniqueInput
  update?: ProjectCategoryContentUpdateWithoutLanguageDataInput
  create?: ProjectCategoryContentCreateWithoutLanguageInput
}
export type ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectCategoryContentUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectCategoryLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type ProjectCategoryLngUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectCategoryLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectAlbumCreateInput {
  project?: ProjectCreateOneWithoutAlbumInput
  images?: ProjectImageCreateManyWithoutAlbumInput | null
}
export type ProjectAlbumCreateInputInputObject =
  | Extract<keyof ProjectAlbumCreateInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface ProjectCreateOneWithoutAlbumInput {
  create?: ProjectCreateWithoutAlbumInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneWithoutAlbumInputInputObject =
  | Extract<keyof ProjectCreateOneWithoutAlbumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutAlbumInput {
  slug?: string
  category?: ProjectCategoryCreateOneWithoutProjectsInput
  author?: UserCreateOneWithoutProjectsInput
  contents?: ProjectContentCreateManyWithoutProjectInput | null
  tags?: ProjectTagCreateManyInput | null
}
export type ProjectCreateWithoutAlbumInputInputObject =
  | Extract<keyof ProjectCreateWithoutAlbumInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectAlbumUpdateInput {
  project?: ProjectUpdateOneRequiredWithoutAlbumInput | null
  images?: ProjectImageUpdateManyWithoutAlbumInput | null
}
export type ProjectAlbumUpdateInputInputObject =
  | Extract<keyof ProjectAlbumUpdateInput, string>
  | { name: 'project', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface ProjectUpdateOneRequiredWithoutAlbumInput {
  create?: ProjectCreateWithoutAlbumInput | null
  update?: ProjectUpdateWithoutAlbumDataInput | null
  upsert?: ProjectUpsertWithoutAlbumInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneRequiredWithoutAlbumInputInputObject =
  | Extract<keyof ProjectUpdateOneRequiredWithoutAlbumInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateWithoutAlbumDataInput {
  slug?: string | null
  category?: ProjectCategoryUpdateOneRequiredWithoutProjectsInput | null
  author?: UserUpdateOneRequiredWithoutProjectsInput | null
  contents?: ProjectContentUpdateManyWithoutProjectInput | null
  tags?: ProjectTagUpdateManyInput | null
}
export type ProjectUpdateWithoutAlbumDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutAlbumDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ProjectUpsertWithoutAlbumInput {
  update?: ProjectUpdateWithoutAlbumDataInput
  create?: ProjectCreateWithoutAlbumInput
}
export type ProjectUpsertWithoutAlbumInputInputObject =
  | Extract<keyof ProjectUpsertWithoutAlbumInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageCreateInput {
  album?: ProjectAlbumCreateOneWithoutImagesInput
  publicId?: string
  src?: string
  contents?: ProjectImageContentCreateOneWithoutImageInput
}
export type ProjectImageCreateInputInputObject =
  | Extract<keyof ProjectImageCreateInput, string>
  | { name: 'album', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface ProjectAlbumCreateOneWithoutImagesInput {
  create?: ProjectAlbumCreateWithoutImagesInput | null
  connect?: ProjectAlbumWhereUniqueInput | null
}
export type ProjectAlbumCreateOneWithoutImagesInputInputObject =
  | Extract<keyof ProjectAlbumCreateOneWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectAlbumCreateWithoutImagesInput {
  project?: ProjectCreateOneWithoutAlbumInput
}
export type ProjectAlbumCreateWithoutImagesInputInputObject =
  | Extract<keyof ProjectAlbumCreateWithoutImagesInput, string>
  | { name: 'project', alias?: string  } 
  
export interface ProjectImageUpdateInput {
  album?: ProjectAlbumUpdateOneRequiredWithoutImagesInput | null
  publicId?: string | null
  src?: string | null
  contents?: ProjectImageContentUpdateOneRequiredWithoutImageInput | null
}
export type ProjectImageUpdateInputInputObject =
  | Extract<keyof ProjectImageUpdateInput, string>
  | { name: 'album', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  | { name: 'contents', alias?: string  } 
  
export interface ProjectAlbumUpdateOneRequiredWithoutImagesInput {
  create?: ProjectAlbumCreateWithoutImagesInput | null
  update?: ProjectAlbumUpdateWithoutImagesDataInput | null
  upsert?: ProjectAlbumUpsertWithoutImagesInput | null
  connect?: ProjectAlbumWhereUniqueInput | null
}
export type ProjectAlbumUpdateOneRequiredWithoutImagesInputInputObject =
  | Extract<keyof ProjectAlbumUpdateOneRequiredWithoutImagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectAlbumUpdateWithoutImagesDataInput {
  project?: ProjectUpdateOneRequiredWithoutAlbumInput | null
}
export type ProjectAlbumUpdateWithoutImagesDataInputInputObject =
  | Extract<keyof ProjectAlbumUpdateWithoutImagesDataInput, string>
  | { name: 'project', alias?: string  } 
  
export interface ProjectAlbumUpsertWithoutImagesInput {
  update?: ProjectAlbumUpdateWithoutImagesDataInput
  create?: ProjectAlbumCreateWithoutImagesInput
}
export type ProjectAlbumUpsertWithoutImagesInputInputObject =
  | Extract<keyof ProjectAlbumUpsertWithoutImagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageUpdateManyMutationInput {
  publicId?: string | null
  src?: string | null
}
export type ProjectImageUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectImageUpdateManyMutationInput, string>
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface ProjectImageContentCreateInput {
  image?: ProjectImageCreateOneWithoutContentsInput
  language?: ProjectImageLngCreateOneWithoutImagesInput
  alt?: string
}
export type ProjectImageContentCreateInputInputObject =
  | Extract<keyof ProjectImageContentCreateInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageCreateOneWithoutContentsInput {
  create?: ProjectImageCreateWithoutContentsInput | null
  connect?: ProjectImageWhereUniqueInput | null
}
export type ProjectImageCreateOneWithoutContentsInputInputObject =
  | Extract<keyof ProjectImageCreateOneWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageCreateWithoutContentsInput {
  album?: ProjectAlbumCreateOneWithoutImagesInput
  publicId?: string
  src?: string
}
export type ProjectImageCreateWithoutContentsInputInputObject =
  | Extract<keyof ProjectImageCreateWithoutContentsInput, string>
  | { name: 'album', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface ProjectImageContentUpdateInput {
  image?: ProjectImageUpdateOneRequiredWithoutContentsInput | null
  language?: ProjectImageLngUpdateOneRequiredWithoutImagesInput | null
  alt?: string | null
}
export type ProjectImageContentUpdateInputInputObject =
  | Extract<keyof ProjectImageContentUpdateInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'language', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageUpdateOneRequiredWithoutContentsInput {
  create?: ProjectImageCreateWithoutContentsInput | null
  update?: ProjectImageUpdateWithoutContentsDataInput | null
  upsert?: ProjectImageUpsertWithoutContentsInput | null
  connect?: ProjectImageWhereUniqueInput | null
}
export type ProjectImageUpdateOneRequiredWithoutContentsInputInputObject =
  | Extract<keyof ProjectImageUpdateOneRequiredWithoutContentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageUpdateWithoutContentsDataInput {
  album?: ProjectAlbumUpdateOneRequiredWithoutImagesInput | null
  publicId?: string | null
  src?: string | null
}
export type ProjectImageUpdateWithoutContentsDataInputInputObject =
  | Extract<keyof ProjectImageUpdateWithoutContentsDataInput, string>
  | { name: 'album', alias?: string  } 
  | { name: 'publicId', alias?: string  } 
  | { name: 'src', alias?: string  } 
  
export interface ProjectImageUpsertWithoutContentsInput {
  update?: ProjectImageUpdateWithoutContentsDataInput
  create?: ProjectImageCreateWithoutContentsInput
}
export type ProjectImageUpsertWithoutContentsInputInputObject =
  | Extract<keyof ProjectImageUpsertWithoutContentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageContentUpdateManyMutationInput {
  alt?: string | null
}
export type ProjectImageContentUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectImageContentUpdateManyMutationInput, string>
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageLngCreateInput {
  images?: ProjectImageContentCreateManyWithoutLanguageInput | null
  country?: string
  locale?: string | null
}
export type ProjectImageLngCreateInputInputObject =
  | Extract<keyof ProjectImageLngCreateInput, string>
  | { name: 'images', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectImageContentCreateManyWithoutLanguageInput {
  create?: ProjectImageContentCreateWithoutLanguageInput[]
  connect?: ProjectImageContentWhereUniqueInput[]
}
export type ProjectImageContentCreateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectImageContentCreateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectImageContentCreateWithoutLanguageInput {
  image?: ProjectImageCreateOneWithoutContentsInput
  alt?: string
}
export type ProjectImageContentCreateWithoutLanguageInputInputObject =
  | Extract<keyof ProjectImageContentCreateWithoutLanguageInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageLngUpdateInput {
  images?: ProjectImageContentUpdateManyWithoutLanguageInput | null
  country?: string | null
  locale?: string | null
}
export type ProjectImageLngUpdateInputInputObject =
  | Extract<keyof ProjectImageLngUpdateInput, string>
  | { name: 'images', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface ProjectImageContentUpdateManyWithoutLanguageInput {
  create?: ProjectImageContentCreateWithoutLanguageInput[]
  delete?: ProjectImageContentWhereUniqueInput[]
  connect?: ProjectImageContentWhereUniqueInput[]
  set?: ProjectImageContentWhereUniqueInput[]
  disconnect?: ProjectImageContentWhereUniqueInput[]
  update?: ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInput[]
  upsert?: ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInput[]
  deleteMany?: ProjectImageContentScalarWhereInput[]
  updateMany?: ProjectImageContentUpdateManyWithWhereNestedInput[]
}
export type ProjectImageContentUpdateManyWithoutLanguageInputInputObject =
  | Extract<keyof ProjectImageContentUpdateManyWithoutLanguageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInput {
  where?: ProjectImageContentWhereUniqueInput
  data?: ProjectImageContentUpdateWithoutLanguageDataInput
}
export type ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectImageContentUpdateWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectImageContentUpdateWithoutLanguageDataInput {
  image?: ProjectImageUpdateOneRequiredWithoutContentsInput | null
  alt?: string | null
}
export type ProjectImageContentUpdateWithoutLanguageDataInputInputObject =
  | Extract<keyof ProjectImageContentUpdateWithoutLanguageDataInput, string>
  | { name: 'image', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInput {
  where?: ProjectImageContentWhereUniqueInput
  update?: ProjectImageContentUpdateWithoutLanguageDataInput
  create?: ProjectImageContentCreateWithoutLanguageInput
}
export type ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInputInputObject =
  | Extract<keyof ProjectImageContentUpsertWithWhereUniqueWithoutLanguageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectImageContentScalarWhereInput {
  id?: undefined | null
  id_not?: undefined | null
  id_in?: undefined[]
  id_not_in?: undefined[]
  id_lt?: undefined | null
  id_lte?: undefined | null
  id_gt?: undefined | null
  id_gte?: undefined | null
  id_contains?: undefined | null
  id_not_contains?: undefined | null
  id_starts_with?: undefined | null
  id_not_starts_with?: undefined | null
  id_ends_with?: undefined | null
  id_not_ends_with?: undefined | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  alt?: string | null
  alt_not?: string | null
  alt_in?: string[]
  alt_not_in?: string[]
  alt_lt?: string | null
  alt_lte?: string | null
  alt_gt?: string | null
  alt_gte?: string | null
  alt_contains?: string | null
  alt_not_contains?: string | null
  alt_starts_with?: string | null
  alt_not_starts_with?: string | null
  alt_ends_with?: string | null
  alt_not_ends_with?: string | null
  AND?: ProjectImageContentScalarWhereInput[]
  OR?: ProjectImageContentScalarWhereInput[]
  NOT?: ProjectImageContentScalarWhereInput[]
}
export type ProjectImageContentScalarWhereInputInputObject =
  | Extract<keyof ProjectImageContentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'alt', alias?: string  } 
  | { name: 'alt_not', alias?: string  } 
  | { name: 'alt_in', alias?: string  } 
  | { name: 'alt_not_in', alias?: string  } 
  | { name: 'alt_lt', alias?: string  } 
  | { name: 'alt_lte', alias?: string  } 
  | { name: 'alt_gt', alias?: string  } 
  | { name: 'alt_gte', alias?: string  } 
  | { name: 'alt_contains', alias?: string  } 
  | { name: 'alt_not_contains', alias?: string  } 
  | { name: 'alt_starts_with', alias?: string  } 
  | { name: 'alt_not_starts_with', alias?: string  } 
  | { name: 'alt_ends_with', alias?: string  } 
  | { name: 'alt_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageContentUpdateManyWithWhereNestedInput {
  where?: ProjectImageContentScalarWhereInput
  data?: ProjectImageContentUpdateManyDataInput
}
export type ProjectImageContentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectImageContentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectImageContentUpdateManyDataInput {
  alt?: string | null
}
export type ProjectImageContentUpdateManyDataInputInputObject =
  | Extract<keyof ProjectImageContentUpdateManyDataInput, string>
  | { name: 'alt', alias?: string  } 
  
export interface ProjectImageLngUpdateManyMutationInput {
  country?: string | null
  locale?: string | null
}
export type ProjectImageLngUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectImageLngUpdateManyMutationInput, string>
  | { name: 'country', alias?: string  } 
  | { name: 'locale', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostContentWhereInput | null
  AND?: PostContentSubscriptionWhereInput[]
  OR?: PostContentSubscriptionWhereInput[]
  NOT?: PostContentSubscriptionWhereInput[]
}
export type PostContentSubscriptionWhereInputInputObject =
  | Extract<keyof PostContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostLngWhereInput | null
  AND?: PostLngSubscriptionWhereInput[]
  OR?: PostLngSubscriptionWhereInput[]
  NOT?: PostLngSubscriptionWhereInput[]
}
export type PostLngSubscriptionWhereInputInputObject =
  | Extract<keyof PostLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CommentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CommentWhereInput | null
  AND?: CommentSubscriptionWhereInput[]
  OR?: CommentSubscriptionWhereInput[]
  NOT?: CommentSubscriptionWhereInput[]
}
export type CommentSubscriptionWhereInputInputObject =
  | Extract<keyof CommentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostTagWhereInput | null
  AND?: PostTagSubscriptionWhereInput[]
  OR?: PostTagSubscriptionWhereInput[]
  NOT?: PostTagSubscriptionWhereInput[]
}
export type PostTagSubscriptionWhereInputInputObject =
  | Extract<keyof PostTagSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostTagContentWhereInput | null
  AND?: PostTagContentSubscriptionWhereInput[]
  OR?: PostTagContentSubscriptionWhereInput[]
  NOT?: PostTagContentSubscriptionWhereInput[]
}
export type PostTagContentSubscriptionWhereInputInputObject =
  | Extract<keyof PostTagContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostTagLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostTagLngWhereInput | null
  AND?: PostTagLngSubscriptionWhereInput[]
  OR?: PostTagLngSubscriptionWhereInput[]
  NOT?: PostTagLngSubscriptionWhereInput[]
}
export type PostTagLngSubscriptionWhereInputInputObject =
  | Extract<keyof PostTagLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProfileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProfileWhereInput | null
  AND?: ProfileSubscriptionWhereInput[]
  OR?: ProfileSubscriptionWhereInput[]
  NOT?: ProfileSubscriptionWhereInput[]
}
export type ProfileSubscriptionWhereInputInputObject =
  | Extract<keyof ProfileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AvatarSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AvatarWhereInput | null
  AND?: AvatarSubscriptionWhereInput[]
  OR?: AvatarSubscriptionWhereInput[]
  NOT?: AvatarSubscriptionWhereInput[]
}
export type AvatarSubscriptionWhereInputInputObject =
  | Extract<keyof AvatarSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectWhereInput | null
  AND?: ProjectSubscriptionWhereInput[]
  OR?: ProjectSubscriptionWhereInput[]
  NOT?: ProjectSubscriptionWhereInput[]
}
export type ProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectContentWhereInput | null
  AND?: ProjectContentSubscriptionWhereInput[]
  OR?: ProjectContentSubscriptionWhereInput[]
  NOT?: ProjectContentSubscriptionWhereInput[]
}
export type ProjectContentSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectLngWhereInput | null
  AND?: ProjectLngSubscriptionWhereInput[]
  OR?: ProjectLngSubscriptionWhereInput[]
  NOT?: ProjectLngSubscriptionWhereInput[]
}
export type ProjectLngSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectTagWhereInput | null
  AND?: ProjectTagSubscriptionWhereInput[]
  OR?: ProjectTagSubscriptionWhereInput[]
  NOT?: ProjectTagSubscriptionWhereInput[]
}
export type ProjectTagSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectTagSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectTagContentWhereInput | null
  AND?: ProjectTagContentSubscriptionWhereInput[]
  OR?: ProjectTagContentSubscriptionWhereInput[]
  NOT?: ProjectTagContentSubscriptionWhereInput[]
}
export type ProjectTagContentSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectTagContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectTagLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectTagLngWhereInput | null
  AND?: ProjectTagLngSubscriptionWhereInput[]
  OR?: ProjectTagLngSubscriptionWhereInput[]
  NOT?: ProjectTagLngSubscriptionWhereInput[]
}
export type ProjectTagLngSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectTagLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectCategoryWhereInput | null
  AND?: ProjectCategorySubscriptionWhereInput[]
  OR?: ProjectCategorySubscriptionWhereInput[]
  NOT?: ProjectCategorySubscriptionWhereInput[]
}
export type ProjectCategorySubscriptionWhereInputInputObject =
  | Extract<keyof ProjectCategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectCategoryContentWhereInput | null
  AND?: ProjectCategoryContentSubscriptionWhereInput[]
  OR?: ProjectCategoryContentSubscriptionWhereInput[]
  NOT?: ProjectCategoryContentSubscriptionWhereInput[]
}
export type ProjectCategoryContentSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectCategoryContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectCategoryLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectCategoryLngWhereInput | null
  AND?: ProjectCategoryLngSubscriptionWhereInput[]
  OR?: ProjectCategoryLngSubscriptionWhereInput[]
  NOT?: ProjectCategoryLngSubscriptionWhereInput[]
}
export type ProjectCategoryLngSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectCategoryLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectAlbumSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectAlbumWhereInput | null
  AND?: ProjectAlbumSubscriptionWhereInput[]
  OR?: ProjectAlbumSubscriptionWhereInput[]
  NOT?: ProjectAlbumSubscriptionWhereInput[]
}
export type ProjectAlbumSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectAlbumSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectImageWhereInput | null
  AND?: ProjectImageSubscriptionWhereInput[]
  OR?: ProjectImageSubscriptionWhereInput[]
  NOT?: ProjectImageSubscriptionWhereInput[]
}
export type ProjectImageSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageContentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectImageContentWhereInput | null
  AND?: ProjectImageContentSubscriptionWhereInput[]
  OR?: ProjectImageContentSubscriptionWhereInput[]
  NOT?: ProjectImageContentSubscriptionWhereInput[]
}
export type ProjectImageContentSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectImageContentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectImageLngSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectImageLngWhereInput | null
  AND?: ProjectImageLngSubscriptionWhereInput[]
  OR?: ProjectImageLngSubscriptionWhereInput[]
  NOT?: ProjectImageLngSubscriptionWhereInput[]
}
export type ProjectImageLngSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectImageLngSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RoleValues =
  | 'ADMIN'
  | 'SITEMANAGER'
  | 'USER'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'isPublished_ASC'
  | 'isPublished_DESC'
  | 'imageSrc_ASC'
  | 'imageSrc_DESC'
  | 'likes_ASC'
  | 'likes_DESC'
  
export type ProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  
export type ProjectCategoryContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'imageAlt_ASC'
  | 'imageAlt_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  
export type ProjectImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publicId_ASC'
  | 'publicId_DESC'
  | 'src_ASC'
  | 'src_DESC'
  
export type ProjectImageContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'alt_ASC'
  | 'alt_DESC'
  
export type ProjectContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  
export type ProjectTagOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'color_ASC'
  | 'color_DESC'
  
export type CommentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'imageAlt_ASC'
  | 'imageAlt_DESC'
  
export type PostTagOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'color_ASC'
  | 'color_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'role_ASC'
  | 'role_DESC'
  
export type PostLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostTagContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  
export type PostTagLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProfileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'bio_ASC'
  | 'bio_DESC'
  
export type AvatarOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publicId_ASC'
  | 'publicId_DESC'
  | 'src_ASC'
  | 'src_DESC'
  
export type ProjectLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectTagContentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  
export type ProjectTagLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectCategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'image_ASC'
  | 'image_DESC'
  
export type ProjectCategoryLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectAlbumOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectImageLngOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'locale_ASC'
  | 'locale_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  